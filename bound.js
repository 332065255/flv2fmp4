/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 15);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _flvdemux = __webpack_require__(9);\n\nvar _flvdemux2 = _interopRequireDefault(_flvdemux);\n\nvar _mediaInfo = __webpack_require__(10);\n\nvar _mediaInfo2 = _interopRequireDefault(_mediaInfo);\n\nvar _spsParser = __webpack_require__(3);\n\nvar _spsParser2 = _interopRequireDefault(_spsParser);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar tagDemux = function () {\n    function tagDemux() {\n        _classCallCheck(this, tagDemux);\n\n        this.TAG = this.constructor.name;\n\n        this._config = {};\n\n        this._onError = null;\n        this._onMediaInfo = null;\n        this._onTrackMetadata = null;\n        this._onDataAvailable = null;\n\n        this._dataOffset = 0;\n        this._firstParse = true;\n        this._dispatch = false;\n\n        this._hasAudio = false;\n        this._hasVideo = false;\n\n        this._audioInitialMetadataDispatched = false;\n        this._videoInitialMetadataDispatched = false;\n\n        this._mediaInfo = new _mediaInfo2.default();\n        this._mediaInfo.hasAudio = this._hasAudio;\n        this._mediaInfo.hasVideo = this._hasVideo;\n        this._metadata = null;\n        this._audioMetadata = null;\n        this._videoMetadata = null;\n\n        this._naluLengthSize = 4;\n        this._timestampBase = 0; // int32, in milliseconds\n        this._timescale = 1000;\n        this._duration = 0; // int32, in milliseconds\n        this._durationOverrided = false;\n        this._referenceFrameRate = {\n            fixed: true,\n            fps: 23.976,\n            fps_num: 23976,\n            fps_den: 1000\n        };\n\n        this._videoTrack = { type: 'video', id: 1, sequenceNumber: 0, addcoefficient: 2, samples: [], length: 0 };\n        this._audioTrack = { type: 'audio', id: 2, sequenceNumber: 1, addcoefficient: 2, samples: [], length: 0 };\n\n        this._littleEndian = function () {\n            var buf = new ArrayBuffer(2);\n            new DataView(buf).setInt16(0, 256, true); // little-endian write\n            return new Int16Array(buf)[0] === 256; // platform-spec read, if equal then LE\n        }();\n    }\n\n    _createClass(tagDemux, [{\n        key: 'onMediaInfo',\n        value: function onMediaInfo(callback) {\n            this._onMediaInfo = callback;\n        }\n    }, {\n        key: 'parseMetadata',\n        value: function parseMetadata(arr) {\n            var data = _flvdemux2.default.parseMetadata(arr);\n            this._parseScriptData(data);\n            console.log(this._mediaInfo, this._mediaInfo.isComplete());\n        }\n    }, {\n        key: '_parseScriptData',\n        value: function _parseScriptData(obj) {\n            var scriptData = obj;\n\n            if (scriptData.hasOwnProperty('onMetaData')) {\n                if (this._metadata) {\n                    Log.w(this.TAG, 'Found another onMetaData tag!');\n                }\n                this._metadata = scriptData;\n                var onMetaData = this._metadata.onMetaData;\n\n                if (typeof onMetaData.hasAudio === 'boolean') {\n                    // hasAudio\n                    this._hasAudio = onMetaData.hasAudio;\n                    this._mediaInfo.hasAudio = this._hasAudio;\n                }\n                if (typeof onMetaData.hasVideo === 'boolean') {\n                    // hasVideo\n                    this._hasVideo = onMetaData.hasVideo;\n                    this._mediaInfo.hasVideo = this._hasVideo;\n                }\n                if (typeof onMetaData.audiodatarate === 'number') {\n                    // audiodatarate\n                    this._mediaInfo.audioDataRate = onMetaData.audiodatarate;\n                }\n                if (typeof onMetaData.videodatarate === 'number') {\n                    // videodatarate\n                    this._mediaInfo.videoDataRate = onMetaData.videodatarate;\n                }\n                if (typeof onMetaData.width === 'number') {\n                    // width\n                    this._mediaInfo.width = onMetaData.width;\n                }\n                if (typeof onMetaData.height === 'number') {\n                    // height\n                    this._mediaInfo.height = onMetaData.height;\n                }\n                if (typeof onMetaData.duration === 'number') {\n                    // duration\n                    if (!this._durationOverrided) {\n                        var duration = Math.floor(onMetaData.duration * this._timescale);\n                        this._duration = duration;\n                        this._mediaInfo.duration = duration;\n                    }\n                } else {\n                    this._mediaInfo.duration = 0;\n                }\n                if (typeof onMetaData.framerate === 'number') {\n                    // framerate\n                    var fps_num = Math.floor(onMetaData.framerate * 1000);\n                    if (fps_num > 0) {\n                        var fps = fps_num / 1000;\n                        this._referenceFrameRate.fixed = true;\n                        this._referenceFrameRate.fps = fps;\n                        this._referenceFrameRate.fps_num = fps_num;\n                        this._referenceFrameRate.fps_den = 1000;\n                        this._mediaInfo.fps = fps;\n                    }\n                }\n                if (_typeof(onMetaData.keyframes) === 'object') {\n                    // keyframes\n                    this._mediaInfo.hasKeyframesIndex = true;\n                    var keyframes = onMetaData.keyframes;\n                    keyframes.times = onMetaData.times;\n                    keyframes.filepositions = onMetaData.filepositions;\n                    this._mediaInfo.keyframesIndex = this._parseKeyframesIndex(keyframes);\n                    onMetaData.keyframes = null; // keyframes has been extracted, remove it\n                } else {\n                    this._mediaInfo.hasKeyframesIndex = false;\n                }\n                this._dispatch = false;\n                this._mediaInfo.metadata = onMetaData;\n                console.log(this.TAG, 'Parsed onMetaData');\n                // if (this._mediaInfo.isComplete()) {\n                // this._onMediaInfo(this._mediaInfo);\n                // }\n                return this._mediaInfo;\n            }\n        }\n    }, {\n        key: '_parseKeyframesIndex',\n        value: function _parseKeyframesIndex(keyframes) {\n            var times = [];\n            var filepositions = [];\n\n            // ignore first keyframe which is actually AVC Sequence Header (AVCDecoderConfigurationRecord)\n            for (var i = 1; i < keyframes.times.length; i++) {\n                var time = this._timestampBase + Math.floor(keyframes.times[i] * 1000);\n                times.push(time);\n                filepositions.push(keyframes.filepositions[i]);\n            }\n\n            return {\n                times: times,\n                filepositions: filepositions\n            };\n        }\n\n        /**\n         * 传入tags输出moof和mdat\n         * \n         * @param {any} tags \n         * \n         * @memberof tagDemux\n         */\n\n    }, {\n        key: 'moofTag',\n        value: function moofTag(tags) {\n\n            for (var i = 0; i < tags.length; i++) {\n                this._dispatch = true;\n                this.parseChunks(tags[i]);\n                // console.log(\"tagTimestamp\", tags[i].getTime(), tags[i]);\n            }\n            if (this._isInitialMetadataDispatched()) {\n                if (this._dispatch && (this._audioTrack.length || this._videoTrack.length)) {\n                    this._onDataAvailable(this._audioTrack, this._videoTrack);\n                }\n            }\n        }\n    }, {\n        key: 'parseChunks',\n        value: function parseChunks(flvtag) {\n\n            switch (flvtag.tagType) {\n                case 8:\n                    // Audio\n                    this._parseAudioData(flvtag.body.buffer, 0, flvtag.body.length, flvtag.getTime());\n                    break;\n                case 9:\n                    // Video\n                    this._parseVideoData(flvtag.body.buffer, 0, flvtag.body.length, flvtag.getTime(), 0);\n                    break;\n                case 18:\n                    // ScriptDataObject\n                    this.parseMetadata(flvtag.body);\n                    break;\n            }\n        }\n    }, {\n        key: '_parseVideoData',\n        value: function _parseVideoData(arrayBuffer, dataOffset, dataSize, tagTimestamp, tagPosition) {\n            if (tagTimestamp == this._timestampBase && this._timestampBase != 0) {\n                console.log(tagTimestamp, this._timestampBase, '夭寿啦这个视频不是从0开始');\n                // this.timestampBase(0);\n            }\n            if (dataSize <= 1) {\n                Log.w(this.TAG, 'Flv: Invalid video packet, missing VideoData payload!');\n                return;\n            }\n            //获取 video tag body 第一字节\n            var spec = new Uint8Array(arrayBuffer, dataOffset, dataSize)[0];\n            //获取是否是关键帧\n            var frameType = (spec & 240) >>> 4;\n            //获取编码格式\n            var codecId = spec & 15;\n\n            if (codecId !== 7) {\n                this._onError(DemuxErrors.CODEC_UNSUPPORTED, 'Flv: Unsupported codec in video frame: ' + codecId);\n                return;\n            }\n\n            this._parseAVCVideoPacket(arrayBuffer, dataOffset + 1, dataSize - 1, tagTimestamp, tagPosition, frameType);\n        }\n    }, {\n        key: '_parseAVCVideoPacket',\n        value: function _parseAVCVideoPacket(arrayBuffer, dataOffset, dataSize, tagTimestamp, tagPosition, frameType) {\n\n            if (dataSize < 4) {\n                Log.w(this.TAG, 'Flv: Invalid AVC packet, missing AVCPacketType or/and CompositionTime');\n                return;\n            }\n\n            var le = this._littleEndian;\n            //获取 video tag body 第2字节到结尾\n            var v = new DataView(arrayBuffer, dataOffset, dataSize);\n\n            //IF CodecID == 7  AVCPacketType\n            // 0 = AVC sequence header\n            // 1 = AVC NALU\n            // 2 = AVC end of sequence (lower level NALU sequence ender is not required or supported)\n            var packetType = v.getUint8(0);\n            // 3字节\n            // IF AVCPacketType == 1\n            //  Composition time offset\n            // ELSE\n            //  0\n            var cts = v.getUint32(0, !le) & 0x00FFFFFF;\n\n            //IF AVCPacketType == 0 AVCDecoderConfigurationRecord（AVC sequence header）\n            //IF AVCPacketType == 1 One or more NALUs (Full frames are required)\n\n            /**\n             *AVCDecoderConfigurationRecord.包含着是H.264解码相关比较重要的sps和pps信息，\n             *再给AVC解码器送数据 流之前一定要把sps和pps信息送出，否则的话解码器不能正常解码。\n             *而且在解码器stop之后再次start之前，如seek、快进快退状态切换等，\n             *都 需要重新送一遍sps和pps的信息.AVCDecoderConfigurationRecord在FLV文件中一般情况也是出现1次，\n             *也就是第一个 video tag.\n             */\n            if (packetType === 0) {\n                // AVCDecoderConfigurationRecord\n                this._parseAVCDecoderConfigurationRecord(arrayBuffer, dataOffset + 4, dataSize - 4);\n            } else if (packetType === 1) {\n                // One or more Nalus\n                this._parseAVCVideoData(arrayBuffer, dataOffset + 4, dataSize - 4, tagTimestamp, tagPosition, frameType, cts);\n            } else if (packetType === 2) {\n                // empty, AVC end of sequence\n            } else {\n                this._onError(DemuxErrors.FORMAT_ERROR, 'Flv: Invalid video packet type ' + packetType);\n                return;\n            }\n        }\n\n        /**\n         * AVC 初始化\n         */\n\n    }, {\n        key: '_parseAVCDecoderConfigurationRecord',\n        value: function _parseAVCDecoderConfigurationRecord(arrayBuffer, dataOffset, dataSize) {\n            if (dataSize < 7) {\n                Log.w(this.TAG, 'Flv: Invalid AVCDecoderConfigurationRecord, lack of data!');\n                return;\n            }\n\n            var meta = this._videoMetadata;\n            var track = this._videoTrack;\n            var le = this._littleEndian;\n            var v = new DataView(arrayBuffer, dataOffset, dataSize);\n\n            if (!meta) {\n                meta = this._videoMetadata = {};\n                meta.type = 'video';\n                meta.id = track.id;\n                meta.timescale = this._timescale;\n                meta.duration = this._duration;\n            } else {\n                if (typeof meta.avcc !== 'undefined') {\n                    Log.w(this.TAG, 'Found another AVCDecoderConfigurationRecord!');\n                }\n            }\n\n            var version = v.getUint8(0); // configurationVersion\n            var avcProfile = v.getUint8(1); // avcProfileIndication\n            var profileCompatibility = v.getUint8(2); // profile_compatibility\n            var avcLevel = v.getUint8(3); // AVCLevelIndication\n\n            if (version !== 1 || avcProfile === 0) {\n                this._onError(DemuxErrors.FORMAT_ERROR, 'Flv: Invalid AVCDecoderConfigurationRecord');\n                return;\n            }\n\n            this._naluLengthSize = (v.getUint8(4) & 3) + 1; // lengthSizeMinusOne\n            if (this._naluLengthSize !== 3 && this._naluLengthSize !== 4) {\n                // holy shit!!!\n                this._onError(DemuxErrors.FORMAT_ERROR, 'Flv: Strange NaluLengthSizeMinusOne: ' + (this._naluLengthSize - 1));\n                return;\n            }\n\n            var spsCount = v.getUint8(5) & 31; // numOfSequenceParameterSets\n            if (spsCount === 0 || spsCount > 1) {\n                this._onError(DemuxErrors.FORMAT_ERROR, 'Flv: Invalid H264 SPS count: ' + spsCount);\n                return;\n            }\n\n            var offset = 6;\n\n            for (var i = 0; i < spsCount; i++) {\n                var len = v.getUint16(offset, !le); // sequenceParameterSetLength\n                offset += 2;\n\n                if (len === 0) {\n                    continue;\n                }\n\n                // Notice: Nalu without startcode header (00 00 00 01)\n                var sps = new Uint8Array(arrayBuffer, dataOffset + offset, len);\n                offset += len;\n\n                var config = _spsParser2.default.parseSPS(sps);\n                meta.codecWidth = config.codec_size.width;\n                meta.codecHeight = config.codec_size.height;\n                meta.presentWidth = config.present_size.width;\n                meta.presentHeight = config.present_size.height;\n\n                meta.profile = config.profile_string;\n                meta.level = config.level_string;\n                meta.bitDepth = config.bit_depth;\n                meta.chromaFormat = config.chroma_format;\n                meta.sarRatio = config.sar_ratio;\n                meta.frameRate = config.frame_rate;\n\n                if (config.frame_rate.fixed === false || config.frame_rate.fps_num === 0 || config.frame_rate.fps_den === 0) {\n                    meta.frameRate = this._referenceFrameRate;\n                }\n\n                var fps_den = meta.frameRate.fps_den;\n                var fps_num = meta.frameRate.fps_num;\n                meta.refSampleDuration = Math.floor(meta.timescale * (fps_den / fps_num));\n\n                var codecArray = sps.subarray(1, 4);\n                var codecString = 'avc1.';\n                for (var j = 0; j < 3; j++) {\n                    var h = codecArray[j].toString(16);\n                    if (h.length < 2) {\n                        h = '0' + h;\n                    }\n                    codecString += h;\n                }\n                meta.codec = codecString;\n\n                var mi = this._mediaInfo;\n                mi.width = meta.codecWidth;\n                mi.height = meta.codecHeight;\n                mi.fps = meta.frameRate.fps;\n                mi.profile = meta.profile;\n                mi.level = meta.level;\n                mi.chromaFormat = config.chroma_format_string;\n                mi.sarNum = meta.sarRatio.width;\n                mi.sarDen = meta.sarRatio.height;\n                mi.videoCodec = codecString;\n\n                if (mi.hasAudio) {\n                    if (mi.audioCodec != null) {\n                        mi.mimeType = 'video/x-flv; codecs=\"' + mi.videoCodec + ',' + mi.audioCodec + '\"';\n                    }\n                } else {\n                    mi.mimeType = 'video/x-flv; codecs=\"' + mi.videoCodec + '\"';\n                }\n                if (mi.isComplete()) {\n                    this._onMediaInfo(mi);\n                }\n            }\n\n            var ppsCount = v.getUint8(offset); // numOfPictureParameterSets\n            if (ppsCount === 0 || ppsCount > 1) {\n                this._onError(DemuxErrors.FORMAT_ERROR, 'Flv: Invalid H264 PPS count: ' + ppsCount);\n                return;\n            }\n\n            offset++;\n\n            for (var _i = 0; _i < ppsCount; _i++) {\n                var _len = v.getUint16(offset, !le); // pictureParameterSetLength\n                offset += 2;\n\n                if (_len === 0) {\n                    continue;\n                }\n\n                // pps is useless for extracting video information\n                offset += _len;\n            }\n\n            meta.avcc = new Uint8Array(dataSize);\n            meta.avcc.set(new Uint8Array(arrayBuffer, dataOffset, dataSize), 0);\n            console.log(this.TAG, 'Parsed AVCDecoderConfigurationRecord');\n\n            if (this._isInitialMetadataDispatched()) {\n                // flush parsed frames\n                if (this._dispatch && (this._audioTrack.length || this._videoTrack.length)) {\n                    this._onDataAvailable(this._audioTrack, this._videoTrack);\n                }\n            } else {\n                this._videoInitialMetadataDispatched = true;\n            }\n            // notify new metadata\n            this._dispatch = false;\n            // if (this._onTrackMetadata) {\n            //     this._onTrackMetadata.call(null, meta);\n            // }\n\n            this._onTrackMetadata('video', meta);\n        }\n    }, {\n        key: 'timestampBase',\n        value: function timestampBase(i) {\n            this._timestampBase = i;\n        }\n\n        /**\n         * 普通的AVC 片段\n         */\n\n    }, {\n        key: '_parseAVCVideoData',\n        value: function _parseAVCVideoData(arrayBuffer, dataOffset, dataSize, tagTimestamp, tagPosition, frameType, cts) {\n\n            var le = this._littleEndian;\n            var v = new DataView(arrayBuffer, dataOffset, dataSize);\n\n            var units = [],\n                length = 0;\n\n            var offset = 0;\n            var lengthSize = this._naluLengthSize;\n            var dts = this._timestampBase + tagTimestamp;\n            var keyframe = frameType === 1; // from FLV Frame Type constants\n\n            while (offset < dataSize) {\n                if (offset + 4 >= dataSize) {\n                    Log.w(this.TAG, 'Malformed Nalu near timestamp ' + dts + ', offset = ' + offset + ', dataSize = ' + dataSize);\n                    break; // data not enough for next Nalu\n                }\n                // Nalu with length-header (AVC1)\n                var naluSize = v.getUint32(offset, !le); // Big-Endian read\n                if (lengthSize === 3) {\n                    naluSize >>>= 8;\n                }\n                if (naluSize > dataSize - lengthSize) {\n                    Log.w(this.TAG, 'Malformed Nalus near timestamp ' + dts + ', NaluSize > DataSize!');\n                    return;\n                }\n\n                var unitType = v.getUint8(offset + lengthSize) & 0x1F;\n\n                if (unitType === 5) {\n                    // IDR\n                    keyframe = true;\n                }\n\n                var data = new Uint8Array(arrayBuffer, dataOffset + offset, lengthSize + naluSize);\n                var unit = { type: unitType, data: data };\n                units.push(unit);\n                length += data.byteLength;\n\n                offset += lengthSize + naluSize;\n            }\n\n            if (units.length) {\n                var track = this._videoTrack;\n                var avcSample = {\n                    units: units,\n                    length: length,\n                    isKeyframe: keyframe,\n                    dts: dts,\n                    cts: cts,\n                    pts: dts + cts\n                };\n                if (keyframe) {\n                    avcSample.fileposition = tagPosition;\n                }\n                track.samples.push(avcSample);\n                track.length += length;\n            }\n        }\n    }, {\n        key: '_parseAudioData',\n        value: function _parseAudioData(arrayBuffer, dataOffset, dataSize, tagTimestamp) {\n            if (tagTimestamp == this._timestampBase && this._timestampBase != 0) {\n                console.log(tagTimestamp, this._timestampBase, '夭寿啦这个视频不是从0开始');\n                // timestampBase(0);\n            }\n\n            if (dataSize <= 1) {\n                Log.w(this.TAG, 'Flv: Invalid audio packet, missing SoundData payload!');\n                return;\n            }\n\n            var meta = this._audioMetadata;\n            var track = this._audioTrack;\n\n            if (!meta || !meta.codec) {\n                // initial metadata\n                meta = this._audioMetadata = {};\n                meta.type = 'audio';\n                meta.id = track.id;\n                meta.timescale = this._timescale;\n                meta.duration = this._duration;\n\n                var le = this._littleEndian;\n                var v = new DataView(arrayBuffer, dataOffset, dataSize);\n\n                var soundSpec = v.getUint8(0);\n\n                var soundFormat = soundSpec >>> 4;\n                if (soundFormat !== 10) {\n                    // AAC\n                    // TODO: support MP3 audio codec\n                    this._onError(DemuxErrors.CODEC_UNSUPPORTED, 'Flv: Unsupported audio codec idx: ' + soundFormat);\n                    return;\n                }\n\n                var soundRate = 0;\n                var soundRateIndex = (soundSpec & 12) >>> 2;\n\n                var soundRateTable = [5500, 11025, 22050, 44100, 48000];\n\n                if (soundRateIndex < soundRateTable.length) {\n                    soundRate = soundRateTable[soundRateIndex];\n                } else {\n                    this._onError(DemuxErrors.FORMAT_ERROR, 'Flv: Invalid audio sample rate idx: ' + soundRateIndex);\n                    return;\n                }\n\n                var soundSize = (soundSpec & 2) >>> 1; // unused\n                var soundType = soundSpec & 1;\n\n                meta.audioSampleRate = soundRate;\n                meta.channelCount = soundType === 0 ? 1 : 2;\n                meta.refSampleDuration = Math.floor(1024 / meta.audioSampleRate * meta.timescale);\n                meta.codec = 'mp4a.40.5';\n            }\n\n            var aacData = this._parseAACAudioData(arrayBuffer, dataOffset + 1, dataSize - 1);\n            if (aacData == undefined) {\n                return;\n            }\n\n            if (aacData.packetType === 0) {\n                // AAC sequence header (AudioSpecificConfig)\n                if (meta.config) {\n                    Log.w(this.TAG, 'Found another AudioSpecificConfig!');\n                }\n                var misc = aacData.data;\n                meta.audioSampleRate = misc.samplingRate;\n                meta.channelCount = misc.channelCount;\n                meta.codec = misc.codec;\n                meta.config = misc.config;\n                // The decode result of an aac sample is 1024 PCM samples\n                meta.refSampleDuration = Math.floor(1024 / meta.audioSampleRate * meta.timescale);\n                console.log(this.TAG, 'Parsed AudioSpecificConfig');\n\n                if (this._isInitialMetadataDispatched()) {\n                    // Non-initial metadata, force dispatch (or flush) parsed frames to remuxer\n                    if (this._dispatch && (this._audioTrack.length || this._videoTrack.length)) {\n                        this._onDataAvailable(this._audioTrack, this._videoTrack);\n                    }\n                } else {\n                    this._audioInitialMetadataDispatched = true;\n                }\n                // then notify new metadata\n                this._dispatch = false;\n                this._onTrackMetadata('audio', meta);\n\n                var mi = this._mediaInfo;\n                mi.audioCodec = 'mp4a.40.' + misc.originalAudioObjectType;\n                mi.audioSampleRate = meta.audioSampleRate;\n                mi.audioChannelCount = meta.channelCount;\n                if (mi.hasVideo) {\n                    if (mi.videoCodec != null) {\n                        mi.mimeType = 'video/x-flv; codecs=\"' + mi.videoCodec + ',' + mi.audioCodec + '\"';\n                    }\n                } else {\n                    mi.mimeType = 'video/x-flv; codecs=\"' + mi.audioCodec + '\"';\n                }\n                if (mi.isComplete()) {\n                    this._onMediaInfo(mi);\n                }\n                return;\n            } else if (aacData.packetType === 1) {\n                // AAC raw frame data\n                var dts = this._timestampBase + tagTimestamp;\n                var aacSample = { unit: aacData.data, dts: dts, pts: dts };\n                track.samples.push(aacSample);\n                track.length += aacData.data.length;\n            } else {\n                console.log(this.TAG, 'Flv: Unsupported AAC data type ' + aacData.packetType);\n            }\n        }\n    }, {\n        key: '_parseAACAudioData',\n        value: function _parseAACAudioData(arrayBuffer, dataOffset, dataSize) {\n            if (dataSize <= 1) {\n                console.log(this.TAG, 'Flv: Invalid AAC packet, missing AACPacketType or/and Data!');\n                return;\n            }\n\n            var result = {};\n            var array = new Uint8Array(arrayBuffer, dataOffset, dataSize);\n\n            result.packetType = array[0];\n\n            if (array[0] === 0) {\n                result.data = this._parseAACAudioSpecificConfig(arrayBuffer, dataOffset + 1, dataSize - 1);\n            } else {\n                result.data = array.subarray(1);\n            }\n\n            return result;\n        }\n    }, {\n        key: '_parseAACAudioSpecificConfig',\n        value: function _parseAACAudioSpecificConfig(arrayBuffer, dataOffset, dataSize) {\n            var array = new Uint8Array(arrayBuffer, dataOffset, dataSize);\n            var config = null;\n\n            var mpegSamplingRates = [96000, 88200, 64000, 48000, 44100, 32000, 24000, 22050, 16000, 12000, 11025, 8000, 7350];\n\n            /* Audio Object Type:\n               0: Null\n               1: AAC Main\n               2: AAC LC\n               3: AAC SSR (Scalable Sample Rate)\n               4: AAC LTP (Long Term Prediction)\n               5: HE-AAC / SBR (Spectral Band Replication)\n               6: AAC Scalable\n            */\n\n            var audioObjectType = 0;\n            var originalAudioObjectType = 0;\n            var audioExtensionObjectType = null;\n            var samplingIndex = 0;\n            var extensionSamplingIndex = null;\n            // debugger;\n            // 5 bits\n            audioObjectType = originalAudioObjectType = array[0] >>> 3;\n            // 4 bits\n            samplingIndex = (array[0] & 0x07) << 1 | array[1] >>> 7;\n            if (samplingIndex < 0 || samplingIndex >= mpegSamplingRates.length) {\n                this._onError(DemuxErrors.FORMAT_ERROR, 'Flv: AAC invalid sampling frequency index!');\n                return;\n            }\n\n            var samplingFrequence = mpegSamplingRates[samplingIndex];\n\n            // 4 bits\n            var channelConfig = (array[1] & 0x78) >>> 3;\n            if (channelConfig < 0 || channelConfig >= 8) {\n                this._onError(DemuxErrors.FORMAT_ERROR, 'Flv: AAC invalid channel configuration');\n                return;\n            }\n\n            if (audioObjectType === 5) {\n                // HE-AAC?\n                // 4 bits\n                extensionSamplingIndex = (array[1] & 0x07) << 1 | array[2] >>> 7;\n                // 5 bits\n                audioExtensionObjectType = (array[2] & 0x7C) >>> 2;\n            }\n\n            // workarounds for various browsers\n            var userAgent = self.navigator.userAgent.toLowerCase();\n\n            if (userAgent.indexOf('firefox') !== -1) {\n                // firefox: use SBR (HE-AAC) if freq less than 24kHz\n                if (samplingIndex >= 6) {\n                    audioObjectType = 5;\n                    config = new Array(4);\n                    extensionSamplingIndex = samplingIndex - 3;\n                } else {\n                    // use LC-AAC\n                    audioObjectType = 2;\n                    config = new Array(2);\n                    extensionSamplingIndex = samplingIndex;\n                }\n            } else if (userAgent.indexOf('android') !== -1) {\n                // android: always use LC-AAC\n                audioObjectType = 2;\n                config = new Array(2);\n                extensionSamplingIndex = samplingIndex;\n            } else {\n                // for other browsers, e.g. chrome...\n                // Always use HE-AAC to make it easier to switch aac codec profile\n                audioObjectType = 5;\n                extensionSamplingIndex = samplingIndex;\n                config = new Array(4);\n\n                if (samplingIndex >= 6) {\n                    extensionSamplingIndex = samplingIndex - 3;\n                } else if (channelConfig === 1) {\n                    // Mono channel\n                    audioObjectType = 2;\n                    config = new Array(2);\n                    extensionSamplingIndex = samplingIndex;\n                }\n            }\n\n            config[0] = audioObjectType << 3;\n            config[0] |= (samplingIndex & 0x0F) >>> 1;\n            config[1] = (samplingIndex & 0x0F) << 7;\n            config[1] |= (channelConfig & 0x0F) << 3;\n            if (audioObjectType === 5) {\n                config[1] |= (extensionSamplingIndex & 0x0F) >>> 1;\n                config[2] = (extensionSamplingIndex & 0x01) << 7;\n                // extended audio object type: force to 2 (LC-AAC)\n                config[2] |= 2 << 2;\n                config[3] = 0;\n            }\n\n            return {\n                config: config,\n                samplingRate: samplingFrequence,\n                channelCount: channelConfig,\n                codec: 'mp4a.40.' + audioObjectType,\n                originalAudioObjectType: originalAudioObjectType\n            };\n        }\n    }, {\n        key: '_isInitialMetadataDispatched',\n        value: function _isInitialMetadataDispatched() {\n            if (this._hasAudio && this._hasVideo) {\n                // both audio & video\n                return this._audioInitialMetadataDispatched && this._videoInitialMetadataDispatched;\n            }\n            if (this._hasAudio && !this._hasVideo) {\n                // audio only\n                return this._audioInitialMetadataDispatched;\n            }\n            if (!this._hasAudio && this._hasVideo) {\n                // video only\n                return this._videoInitialMetadataDispatched;\n            }\n        }\n    }]);\n\n    return tagDemux;\n}();\n\nexports.default = new tagDemux();//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * 代码借鉴了flv.js\n * 增加了自己的注释和写法\n */\nvar MP4 = function () {\n    function MP4() {\n        _classCallCheck(this, MP4);\n    }\n\n    _createClass(MP4, null, [{\n        key: 'init',\n        value: function init() {\n            MP4.types = {\n                avc1: [],\n                avcC: [],\n                btrt: [],\n                dinf: [],\n                dref: [],\n                esds: [],\n                ftyp: [],\n                hdlr: [],\n                mdat: [],\n                mdhd: [],\n                mdia: [],\n                mfhd: [],\n                minf: [],\n                moof: [],\n                moov: [],\n                mp4a: [],\n                mvex: [],\n                mvhd: [],\n                sdtp: [],\n                stbl: [],\n                stco: [],\n                stsc: [],\n                stsd: [],\n                stsz: [],\n                stts: [],\n                tfdt: [],\n                tfhd: [],\n                traf: [],\n                trak: [],\n                trun: [],\n                trex: [],\n                tkhd: [],\n                vmhd: [],\n                smhd: []\n            };\n\n            for (var name in MP4.types) {\n                if (MP4.types.hasOwnProperty(name)) {\n                    MP4.types[name] = [name.charCodeAt(0), name.charCodeAt(1), name.charCodeAt(2), name.charCodeAt(3)];\n                }\n            }\n\n            var constants = MP4.constants = {};\n\n            constants.FTYP = new Uint8Array([0x69, 0x73, 0x6F, 0x6D, // major_brand: isom\t\tisom\tMP4  Base Media v1 [IS0 14496-12:2003]\tISO\tYES\tvideo/mp4\n            0x0, 0x0, 0x0, 0x1, // minor_version: 0x01\n            0x69, 0x73, 0x6F, 0x6D, // isom\n            0x61, 0x76, 0x63, 0x31 // avc1\n            ]);\n\n            constants.STSD_PREFIX = new Uint8Array([0x00, 0x00, 0x00, 0x00, // version(0) + flags  version字段后会有一个entry count字段\n            0x00, 0x00, 0x00, 0x01 // entry_count\t根据entry的个数，每个entry会有type信息，如“vide”、“sund”等，根据type不同sample description会提供不同的信息，例如对于video track，会有“VisualSampleEntry”类型信息，对于audio track会有“AudioSampleEntry”类型信息。\n            ]);\n\n            constants.STTS = new Uint8Array([0x00, 0x00, 0x00, 0x00, // version(0) + flags\n            0x00, 0x00, 0x00, 0x00 // entry_count     0个索引\n            ]);\n\n            constants.STSC = constants.STCO = constants.STTS;\n\n            constants.STSZ = new Uint8Array([0x00, 0x00, 0x00, 0x00, // version(0) + flags\n            0x00, 0x00, 0x00, 0x00, // sample_size\n            0x00, 0x00, 0x00, 0x00 // sample_count\n            ]);\n\n            constants.HDLR_VIDEO = new Uint8Array([0x00, 0x00, 0x00, 0x00, // version(0) + flags\n            0x00, 0x00, 0x00, 0x00, // pre_defined\n            0x76, 0x69, 0x64, 0x65, // handler_type: 'vide' 在media box中，该值为4个字符\t\t“vide”— video track\n            0x00, 0x00, 0x00, 0x00, // reserved: 3 * 4 bytes\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //保留位\n            0x56, 0x69, 0x64, 0x65, 0x6F, 0x48, 0x61, 0x6E, 0x64, 0x6C, 0x65, 0x72, 0x00 // name: VideoHandler 长度不定\t\ttrack type name，以‘\\0’结尾的字符串\n            ]);\n\n            constants.HDLR_AUDIO = new Uint8Array([0x00, 0x00, 0x00, 0x00, // version(0) + flags\n            0x00, 0x00, 0x00, 0x00, // pre_defined\n            0x73, 0x6F, 0x75, 0x6E, // handler_type: 'soun'在media box中，该值为4个字符\t\t“soun”— audio track\n            0x00, 0x00, 0x00, 0x00, // reserved: 3 * 4 bytes\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //保留位\n            0x53, 0x6F, 0x75, 0x6E, 0x64, 0x48, 0x61, 0x6E, 0x64, 0x6C, 0x65, 0x72, 0x00 // name: SoundHandler 长度不定\t\ttrack type name，以‘\\0’结尾的字符串\n            ]);\n\n            constants.DREF = new Uint8Array([0x00, 0x00, 0x00, 0x00, // version(0) + flags\n            0x00, 0x00, 0x00, 0x01, // entry_count 1个url\t\n            //url\tbox开始\n            0x00, 0x00, 0x00, 0x0C, // entry_size\n            0x75, 0x72, 0x6C, 0x20, // type 'url '\n            0x00, 0x00, 0x00, 0x01 // version(0) + flags 当“url”或“urn”的box flag为1时，字符串均为空。\n            ]);\n\n            // Sound media header\n            constants.SMHD = new Uint8Array([0x00, 0x00, 0x00, 0x00, // version(0) + flags\tbox版本，0或1，一般为0。\n            0x00, 0x00, 0x00, 0x00 // balance(2) + reserved(2) 立体声平衡，[8.8] 格式值，一般为0，-1.0表示全部左声道，1.0表示全部右声道+2位保留位\n            ]);\n\n            // video media header\n            constants.VMHD = new Uint8Array([0x00, 0x00, 0x00, 0x01, // version(0) + flags\n            0x00, 0x00, // graphicsmode: 2 bytes 视频合成模式，为0时拷贝原始图像，否则与opcolor进行合成   //理论上是4位啊  暂时保留\n            0x00, 0x00, 0x00, 0x00, // opcolor: 3 * 2 bytes ｛red，green，blue｝\n            0x00, 0x00]);\n        }\n\n        /**\n         * 封装box\n         */\n\n    }, {\n        key: 'box',\n        value: function box(type) {\n            var size = 8;\n            var result = null;\n            var datas = Array.prototype.slice.call(arguments, 1);\n            var arrayCount = datas.length;\n\n            for (var i = 0; i < arrayCount; i++) {\n                size += datas[i].byteLength;\n            }\n            //box头部大小\n            result = new Uint8Array(size);\n            result[0] = size >>> 24 & 0xFF; // size\n            result[1] = size >>> 16 & 0xFF;\n            result[2] = size >>> 8 & 0xFF;\n            result[3] = size & 0xFF;\n            //写入box的type\n            result.set(type, 4); // type\n\n            var offset = 8;\n            for (var _i = 0; _i < arrayCount; _i++) {\n                // data body\n                result.set(datas[_i], offset);\n                offset += datas[_i].byteLength;\n            }\n\n            return result;\n        }\n\n        //创建ftyp&moov\n\n    }, {\n        key: 'generateInitSegment',\n        value: function generateInitSegment(meta) {\n            if (meta.constructor != Array) {\n                meta = [meta];\n            }\n            var ftyp = MP4.box(MP4.types.ftyp, MP4.constants.FTYP);\n            var moov = MP4.moov(meta);\n\n            var result = new Uint8Array(ftyp.byteLength + moov.byteLength);\n            result.set(ftyp, 0);\n            result.set(moov, ftyp.byteLength);\n            return result;\n        }\n\n        // Movie metadata box\n\n    }, {\n        key: 'moov',\n        value: function moov(meta) {\n            var mvhd = MP4.mvhd(meta[0].timescale, meta[0].duration); ///moov里面的第一个box\n            var vtrak = MP4.trak(meta[0]);\n            var atrak = void 0;\n            if (meta.length > 1) {\n                atrak = MP4.trak(meta[1]);\n            }\n\n            var mvex = MP4.mvex(meta);\n            if (meta.length > 1) return MP4.box(MP4.types.moov, mvhd, vtrak, atrak, mvex);else return MP4.box(MP4.types.moov, mvhd, vtrak, mvex);\n        }\n\n        // Movie header box\n\n    }, {\n        key: 'mvhd',\n        value: function mvhd(timescale, duration) {\n            return MP4.box(MP4.types.mvhd, new Uint8Array([0x00, 0x00, 0x00, 0x00, // version(0) + flags     1位的box版本+3位flags   box版本，0或1，一般为0。（以下字节数均按version=0）\n            0x00, 0x00, 0x00, 0x00, // creation_time    创建时间  （相对于UTC时间1904-01-01零点的秒数）\n            0x00, 0x00, 0x00, 0x00, // modification_time   修改时间\n            timescale >>> 24 & 0xFF, // timescale: 4 bytes\t\t文件媒体在1秒时间内的刻度值，可以理解为1秒长度\n            timescale >>> 16 & 0xFF, timescale >>> 8 & 0xFF, timescale & 0xFF, duration >>> 24 & 0xFF, // duration: 4 bytes\t该track的时间长度，用duration和time scale值可以计算track时长，比如audio track的time scale = 8000, duration = 560128，时长为70.016，video track的time scale = 600, duration = 42000，时长为70\n            duration >>> 16 & 0xFF, duration >>> 8 & 0xFF, duration & 0xFF, 0x00, 0x01, 0x00, 0x00, // Preferred rate: 1.0   推荐播放速率，高16位和低16位分别为小数点整数部分和小数部分，即[16.16] 格式，该值为1.0（0x00010000）表示正常前向播放\n            0x01, 0x00, 0x00, 0x00, // PreferredVolume(1.0, 2bytes) + reserved(2bytes)\t与rate类似，[8.8] 格式，1.0（0x0100）表示最大音量 \n            0x00, 0x00, 0x00, 0x00, // reserved: 4 + 4 bytes\t保留位\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, // ----begin composition matrix----\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //视频变换矩阵   线性代数\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, // ----end composition matrix----\n            0x00, 0x00, 0x00, 0x00, // ----begin pre_defined 6 * 4 bytes----\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //pre-defined 保留位\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ----end pre_defined 6 * 4 bytes----\n            0xFF, 0xFF, 0xFF, 0xFF // next_track_ID 下一个track使用的id号\n            ]));\n        }\n\n        // Track box\n\n    }, {\n        key: 'trak',\n        value: function trak(meta) {\n            return MP4.box(MP4.types.trak, MP4.tkhd(meta), MP4.mdia(meta));\n        }\n\n        // Track header box\n\n    }, {\n        key: 'tkhd',\n        value: function tkhd(meta) {\n            var trackId = meta.id,\n                duration = meta.duration;\n            var width = meta.presentWidth,\n                height = meta.presentHeight;\n\n            return MP4.box(MP4.types.tkhd, new Uint8Array([0x00, 0x00, 0x00, 0x07, // version(0) + flags 1位版本 box版本，0或1，一般为0。（以下字节数均按version=0）按位或操作结果值，预定义如下：\n            //0x000001 track_enabled，否则该track不被播放；\n            //0x000002 track_in_movie，表示该track在播放中被引用；\n            //0x000004 track_in_preview，表示该track在预览时被引用。\n            //一般该值为7，1+2+4 如果一个媒体所有track均未设置track_in_movie和track_in_preview，将被理解为所有track均设置了这两项；对于hint track，该值为0\n            //hint track  这个特殊的track并不包含媒体数据，而是包含了一些将其他数据track打包成流媒体的指示信息。\n            0x00, 0x00, 0x00, 0x00, // creation_time\t创建时间（相对于UTC时间1904-01-01零点的秒数）\n            0x00, 0x00, 0x00, 0x00, // modification_time\t修改时间\n            trackId >>> 24 & 0xFF, // track_ID: 4 bytes\tid号，不能重复且不能为0\n            trackId >>> 16 & 0xFF, trackId >>> 8 & 0xFF, trackId & 0xFF, 0x00, 0x00, 0x00, 0x00, // reserved: 4 bytes    保留位\n            duration >>> 24 & 0xFF, // duration: 4 bytes  \ttrack的时间长度\n            duration >>> 16 & 0xFF, duration >>> 8 & 0xFF, duration & 0xFF, 0x00, 0x00, 0x00, 0x00, // reserved: 2 * 4 bytes    保留位\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // layer(2bytes) + alternate_group(2bytes)  视频层，默认为0，值小的在上层.track分组信息，默认为0表示该track未与其他track有群组关系\n            0x00, 0x00, 0x00, 0x00, // volume(2bytes) + reserved(2bytes)    [8.8] 格式，如果为音频track，1.0（0x0100）表示最大音量；否则为0   +保留位\n            0x00, 0x01, 0x00, 0x00, // ----begin composition matrix----\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, //视频变换矩阵\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, // ----end composition matrix----\n            width >>> 8 & 0xFF, // //宽度\n            width & 0xFF, 0x00, 0x00, height >>> 8 & 0xFF, //高度\n            height & 0xFF, 0x00, 0x00]));\n        }\n\n        /**\n         * “mdia”也是个container box，其子box的结构和种类还是比较复杂的。先来看一个“mdia”的实例结构树图。\n         * 总体来说，“mdia”定义了track媒体类型以及sample数据，描述sample信息。一般“mdia”包含一个“mdhd”，\n         * 一个“hdlr”和一个“minf”，其中“mdhd”为media header box，“hdlr”为handler reference box，\n         * “minf”为media information box。\n         * \n         * mdia\n         * \t\tmdhd\n         * \t\thdlr\n         * \t\tminf\n         * \t\t\tsmhd\n         * \t\t\tdinf\n         * \t\t\t\tdref\n         * \t\t\t\t\turl\n         * \t\t\tstbl\n         * \t\t\t\tstsd\n         * \t\t\t\t\tmp4a\n         * \t\t\t\t\t\tesds\n         * \t\t\t\tstts\n         * \t\t\t\tstsc\n         * \t\t\t\tstsz\n         * \t\t\t\tstco\n         */\n\n    }, {\n        key: 'mdia',\n        value: function mdia(meta) {\n            return MP4.box(MP4.types.mdia, MP4.mdhd(meta), MP4.hdlr(meta), MP4.minf(meta));\n        }\n\n        // Media header box\n\n    }, {\n        key: 'mdhd',\n        value: function mdhd(meta) {\n            var timescale = meta.timescale;\n            var duration = meta.duration;\n            return MP4.box(MP4.types.mdhd, new Uint8Array([0x00, 0x00, 0x00, 0x00, // version(0) + flags // version(0) + flags\t\tbox版本，0或1，一般为0。\n            0x00, 0x00, 0x00, 0x00, // creation_time    创建时间\n            0x00, 0x00, 0x00, 0x00, // modification_time修改时间\n            timescale >>> 24 & 0xFF, // timescale: 4 bytes    文件媒体在1秒时间内的刻度值，可以理解为1秒长度\n            timescale >>> 16 & 0xFF, timescale >>> 8 & 0xFF, timescale & 0xFF, duration >>> 24 & 0xFF, // duration: 4 bytes  track的时间长度\n            duration >>> 16 & 0xFF, duration >>> 8 & 0xFF, duration & 0xFF, 0x55, 0xC4, // language: und (undetermined) 媒体语言码。最高位为0，后面15位为3个字符（见ISO 639-2/T标准中定义）\n            0x00, 0x00 // pre_defined = 0\n            ]));\n        }\n\n        // Media handler reference box\n\n    }, {\n        key: 'hdlr',\n        value: function hdlr(meta) {\n            var data = null;\n            if (meta.type === 'audio') {\n                data = MP4.constants.HDLR_AUDIO;\n            } else {\n                data = MP4.constants.HDLR_VIDEO;\n            }\n            return MP4.box(MP4.types.hdlr, data);\n        }\n\n        /**\n        * “minf”存储了解释track媒体数据的handler-specific信息，media handler用这些信息将媒体时间映射到媒体数据并进行处理。“minf”中的信息格式和内容与媒体类型以及解释媒体数据的media handler密切相关，其他media handler不知道如何解释这些信息。“minf”是一个container box，其实际内容由子box说明。\n        一般情况下，“minf”包含一个header box，一个“dinf”和一个“stbl”，其中，header box根据track type（即media handler type）分为“vmhd”、“smhd”、“hmhd”和“nmhd”，“dinf”为data information box，“stbl”为sample table box。下面分别介绍。\n        * \n        */\n        // Media infomation box\n\n    }, {\n        key: 'minf',\n        value: function minf(meta) {\n            //header box根据track type（即media handler type）分为“vmhd”、“smhd”、“hmhd”和“nmhd”\n            var xmhd = null;\n            if (meta.type === 'audio') {\n                xmhd = MP4.box(MP4.types.smhd, MP4.constants.SMHD);\n            } else {\n                xmhd = MP4.box(MP4.types.vmhd, MP4.constants.VMHD);\n            }\n            return MP4.box(MP4.types.minf, xmhd, MP4.dinf(), MP4.stbl(meta));\n        }\n\n        /**\n         * Data Information Box\n         * “dinf”解释如何定位媒体信息，是一个container box。“dinf”一般包含一个“dref”，即data reference box；\n         * “dref”下会包含若干个“url”或“urn”，这些box组成一个表，用来定位track数据。\n         * 简单的说，track可以被分成若干段，每一段都可以根据“url”或“urn”指向的地址来获取数据，\n         * sample描述中会用这些片段的序号将这些片段组成一个完整的track。\n         * 一般情况下，当数据被完全包含在文件中时，“url”或“urn”中的定位字符串是空的。\n         */\n\n    }, {\n        key: 'dinf',\n        value: function dinf() {\n            var result = MP4.box(MP4.types.dinf, MP4.box(MP4.types.dref, MP4.constants.DREF));\n            return result;\n        }\n\n        /**\n        * Sample Table Box（stbl）\n        \t*\t“stbl”几乎是普通的MP4文件中最复杂的一个box了，首先需要回忆一下sample的概念。\n        * \tsample是媒体数据存储的单位，存储在media的chunk中，chunk和sample的长度均可互不相同，如下图所示。\n        “stbl”是一个container box，其子box包括：sample description box（stsd）、\n        * time to sample box（stts）、sample size box（stsz或stz2）、\n        * sample to chunk box（stsc）、chunk offset box（stco或co64）、\n        * composition time to sample box（ctts）、sync sample box（stss）\n        * stsd”必不可少，且至少包含一个条目，该box包含了data reference box进行sample数据检索的信息。\n        * 没有“stsd”就无法计算media sample的存储位置。“stsd”包含了编码的信息，其存储的信息随媒体类型不同而不同。\n        * \t\t\tstbl\n        * \t\t\t\tstsd\n        * \t\t\t\t\tavc1\n        * \t\t\t\t\t\tavcC\n        * \t\t\t\tstts\n        * \t\t\t\tstsc\n        * \t\t\t\tstsz\n        * \t\t\t\tstco\n        */\n\n    }, {\n        key: 'stbl',\n        value: function stbl(meta) {\n            var result = MP4.box(MP4.types.stbl, // type: stbl\n            MP4.stsd(meta), // Sample Description Table\n            MP4.box(MP4.types.stts, MP4.constants.STTS), // Time-To-Sample    因为stts的entry count 为0\n            //所以没有关键帧index 的stss\n            //也没有CTTS box CTTS是记录偏移量\n            MP4.box(MP4.types.stsc, MP4.constants.STSC), // Sample-To-Chunk\n            MP4.box(MP4.types.stsz, MP4.constants.STSZ), // Sample size\n            MP4.box(MP4.types.stco, MP4.constants.STCO) // Chunk offset\n            );\n            return result;\n        }\n\n        /**\n        * Sample Description Box（stsd）\n        \t\tbox header和version字段后会有一个entry count字段，\n        * \t\t\t根据entry的个数，每个entry会有type信息，如“vide”、“sund”等，\n        * \t\t根据type不同sample description会提供不同的信息，例如对于video track，\n        * 会有“VisualSampleEntry”类型信息，对于audio track会有“AudioSampleEntry”类型信息。\n        * * \t\t\t\tstsd\n        * \t\t\t\t\tmp4a\n        * \t\t\t\t\t\tesds\n        * \n        * \n        * \n        * \n        * \t\t 4 bytes - length in total\n        \t 4 bytes - 4 char code of sample description table (stsd)\n        \t 4 bytes - version & flags\n        \t 4 bytes - number of sample entries (num_sample_entries)\n        \t\t [\n        \t\t    4 bytes - length of sample entry (len_sample_entry)\n        \t\t    4 bytes - 4 char code of sample entry\n        \t\t    ('len_sample_entry' - 8) bytes of data\n        \t\t ] (repeated 'num_sample_entries' times)\n        \t(4 bytes - optional 0x00000000 as end of box marker )\n        */\n\n    }, {\n        key: 'stsd',\n        value: function stsd(meta) {\n            if (meta.type === 'audio') {\n                return MP4.box(MP4.types.stsd, MP4.constants.STSD_PREFIX, MP4.mp4a(meta));\n            } else {\n                return MP4.box(MP4.types.stsd, MP4.constants.STSD_PREFIX, MP4.avc1(meta));\n            }\n        }\n    }, {\n        key: 'mp4a',\n        value: function mp4a(meta) {\n            var channelCount = meta.channelCount;\n            var sampleRate = meta.audioSampleRate;\n\n            var data = new Uint8Array([0x00, 0x00, 0x00, 0x00, // reserved(4) 6个字节，设置为0；\n            0x00, 0x00, 0x00, 0x01, // reserved(2) + data_reference_index(2)\n            0x00, 0x00, 0x00, 0x00, // reserved: 2 * 4 bytes 保留位\n            0x00, 0x00, 0x00, 0x00, 0x00, channelCount, // channelCount(2) 单声道还是双声道\n            0x00, 0x10, // sampleSize(2)\n            0x00, 0x00, 0x00, 0x00, // reserved(4) 4字节保留位\n            sampleRate >>> 8 & 0xFF, // Audio sample rate 显然要右移16位才有意义\ttemplate unsigned int(32) samplerate = {timescale of media}<<16;\n            sampleRate & 0xFF, 0x00, 0x00]);\n\n            return MP4.box(MP4.types.mp4a, data, MP4.esds(meta));\n        }\n    }, {\n        key: 'esds',\n        value: function esds(meta) {\n            var config = meta.config;\n            var configSize = config.length;\n            var data = new Uint8Array([0x00, 0x00, 0x00, 0x00, // version 0 + flags\n\n            0x03, // descriptor_type    MP4ESDescrTag\n            0x17 + configSize, // length3\n            0x00, 0x01, // es_id\n            0x00, // stream_priority\n\n            0x04, // descriptor_type    MP4DecConfigDescrTag\n            0x0F + configSize, // length\n            0x40, // codec: mpeg4_audio\n            /**\n             *当objectTypeIndication为0x40时，为MPEG-4 Audio（MPEG-4 Audio generally is thought of as AAC \n             * but there is a whole framework of audio codecs that can Go in MPEG-4 Audio including AAC, BSAC, ALS, CELP, \n             * and something called MP3On4），如果想更细分format为aac还是mp3，\n             * 可以读取MP4DecSpecificDescr层data[0]的前五位\n             */\n            0x15, // stream_type: Audio\n            0x00, 0x00, 0x00, // buffer_size\n            0x00, 0x00, 0x00, 0x00, // maxBitrate\n            0x00, 0x00, 0x00, 0x00, // avgBitrate\n\n            0x05 // descriptor_type MP4DecSpecificDescrTag\n            ].concat([configSize]).concat(config).concat([0x06, 0x01, 0x02 // GASpecificConfig\n            ]));\n            return MP4.box(MP4.types.esds, data);\n        }\n\n        /**\n         * 改版\n         *stsd下的avc1视频解析 \n         */\n\n    }, {\n        key: 'avc1',\n        value: function avc1(meta) {\n            var avcc = meta.avcc;\n            var width = meta.codecWidth,\n                height = meta.codecHeight;\n\n            var data = new Uint8Array([0x00, 0x00, 0x00, 0x00, // // reserved(4)    6个 保留位\tReserved：6个字节，设置为0；\n            0x00, 0x00, 0x00, 0x01, // reserved(2) + {{{{data_reference_index(2)  数据引用索引}}}}\n            0x00, 0x00, 0x00, 0x00, // pre_defined(2) + reserved(2)\n            0x00, 0x00, 0x00, 0x00, // pre_defined: 3 * 4 bytes  3*4个字节的保留位\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, width >>> 8 & 0xFF, // width: 2 bytes\n            width & 0xFF, height >>> 8 & 0xFF, // height: 2 bytes\n            height & 0xFF, 0x00, 0x48, 0x00, 0x00, // horizresolution: 4 bytes 常数\n            0x00, 0x48, 0x00, 0x00, // vertresolution: 4 bytes 常数\n            0x00, 0x00, 0x00, 0x00, // reserved: 4 bytes 保留位\n            0x00, 0x01, // frame_count\t\t\n            //frame_count表明多少帧压缩视频存储在每个样本。默认是1,每样一帧;它可能超过1每个样本的多个帧数\n            0x04, //\tstrlen compressorname: 32 bytes\t\t\tString[32]\n            //32个8 bit    第一个8bit表示长度,剩下31个8bit表示内容\n            0x67, 0x31, 0x31, 0x31, // compressorname: 32 bytes    翻译过来是g111\n            0x00, 0x00, 0x00, 0x00, //\n            0x00, 0x00, 0x00, 0x00, //\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, // depth 颜色深度\n            0xFF, 0xFF // pre_defined = -1\n            ]);\n            return MP4.box(MP4.types.avc1, data, MP4.box(MP4.types.avcC, avcc));\n        }\n\n        // Movie Extends box\n\n    }, {\n        key: 'mvex',\n        value: function mvex(meta) {\n            if (meta.length > 1) return MP4.box(MP4.types.mvex, MP4.trex(meta[0]), MP4.trex(meta[1]));else return MP4.box(MP4.types.mvex, MP4.trex(meta[0]));\n        }\n\n        // Track Extends box\n\n    }, {\n        key: 'trex',\n        value: function trex(meta) {\n            var trackId = meta.id;\n            var data = new Uint8Array([0x00, 0x00, 0x00, 0x00, // version(0) + flags\n            trackId >>> 24 & 0xFF, // track_ID\n            trackId >>> 16 & 0xFF, trackId >>> 8 & 0xFF, trackId & 0xFF, 0x00, 0x00, 0x00, 0x01, // default_sample_description_index\n            0x00, 0x00, 0x00, 0x00, // default_sample_duration\n            0x00, 0x00, 0x00, 0x00, // default_sample_size\n            0x00, 0x01, 0x00, 0x01 // default_sample_flags\n            ]);\n            // if (meta.type !== 'video') {\n            //     data[data.length - 1] = 0x00;\n            // }\n            return MP4.box(MP4.types.trex, data);\n        }\n\n        // Movie fragment box\n\n    }, {\n        key: 'moof',\n        value: function moof(track, baseMediaDecodeTime) {\n            return MP4.box(MP4.types.moof, MP4.mfhd(track.sequenceNumber), MP4.traf(track, baseMediaDecodeTime));\n        }\n    }, {\n        key: 'mfhd',\n        value: function mfhd(sequenceNumber) {\n            var data = new Uint8Array([0x00, 0x00, 0x00, 0x00, sequenceNumber >>> 24 & 0xFF, // sequence_number: int32\n            sequenceNumber >>> 16 & 0xFF, sequenceNumber >>> 8 & 0xFF, sequenceNumber & 0xFF]);\n            return MP4.box(MP4.types.mfhd, data);\n        }\n\n        // Track fragment box\n\n    }, {\n        key: 'traf',\n        value: function traf(track, baseMediaDecodeTime) {\n            var trackId = track.id;\n\n            // Track fragment header box\n            var tfhd = MP4.box(MP4.types.tfhd, new Uint8Array([0x00, 0x00, 0x00, 0x00, // version(0) & flags\n            trackId >>> 24 & 0xFF, // track_ID\n            trackId >>> 16 & 0xFF, trackId >>> 8 & 0xFF, trackId & 0xFF]));\n            // Track Fragment Decode Time\n            var tfdt = MP4.box(MP4.types.tfdt, new Uint8Array([0x00, 0x00, 0x00, 0x00, // version(0) & flags\n            baseMediaDecodeTime >>> 24 & 0xFF, // baseMediaDecodeTime: int32\n            baseMediaDecodeTime >>> 16 & 0xFF, baseMediaDecodeTime >>> 8 & 0xFF, baseMediaDecodeTime & 0xFF]));\n            var sdtp = MP4.sdtp(track);\n            var trun = MP4.trun(track, sdtp.byteLength + 16 + 16 + 8 + 16 + 8 + 8);\n\n            return MP4.box(MP4.types.traf, tfhd, tfdt, trun, sdtp);\n        }\n\n        // Sample Dependency Type box\n\n    }, {\n        key: 'sdtp',\n        value: function sdtp(track) {\n            var samples = track.samples || [];\n            var sampleCount = samples.length;\n            var data = new Uint8Array(4 + sampleCount);\n            // 0~4 bytes: version(0) & flags\n            for (var i = 0; i < sampleCount; i++) {\n                var flags = samples[i].flags;\n                data[i + 4] = flags.isLeading << 6 | // is_leading: 2 (bit)\n                flags.dependsOn << 4 // sample_depends_on\n                | flags.isDependedOn << 2 // sample_is_depended_on\n                | flags.hasRedundancy; // sample_has_redundancy\n            }\n            return MP4.box(MP4.types.sdtp, data);\n        }\n\n        // Track fragment run box\n\n    }, {\n        key: 'trun',\n        value: function trun(track, offset) {\n            var samples = track.samples || [];\n            var sampleCount = samples.length;\n            var dataSize = 12 + 16 * sampleCount;\n            var data = new Uint8Array(dataSize);\n            offset += 8 + dataSize;\n\n            data.set([0x00, 0x00, 0x0F, 0x01, // version(0) & flags\n            sampleCount >>> 24 & 0xFF, // sample_count\n            sampleCount >>> 16 & 0xFF, sampleCount >>> 8 & 0xFF, sampleCount & 0xFF, offset >>> 24 & 0xFF, // data_offset\n            offset >>> 16 & 0xFF, offset >>> 8 & 0xFF, offset & 0xFF], 0);\n\n            for (var i = 0; i < sampleCount; i++) {\n\n                var duration = samples[i].duration;\n\n                var size = samples[i].size;\n                var flags = samples[i].flags;\n                var cts = samples[i].cts;\n                data.set([duration >>> 24 & 0xFF, // sample_duration\n                duration >>> 16 & 0xFF, duration >>> 8 & 0xFF, duration & 0xFF, size >>> 24 & 0xFF, // sample_size\n                size >>> 16 & 0xFF, size >>> 8 & 0xFF, size & 0xFF, flags.isLeading << 2 | flags.dependsOn, // sample_flags\n                flags.isDependedOn << 6 | flags.hasRedundancy << 4 | flags.isNonSync, 0x00, 0x00, // sample_degradation_priority\n                cts >>> 24 & 0xFF, // sample_composition_time_offset\n                cts >>> 16 & 0xFF, cts >>> 8 & 0xFF, cts & 0xFF], 12 + 16 * i);\n            }\n            return MP4.box(MP4.types.trun, data);\n        }\n    }, {\n        key: 'mdat',\n        value: function mdat(data) {\n            return MP4.box(MP4.types.mdat, data);\n        }\n    }]);\n\n    return MP4;\n}();\n\nMP4.init();\n\nexports.default = MP4;//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _flvTag = __webpack_require__(8);\n\nvar _flvTag2 = _interopRequireDefault(_flvTag);\n\nvar _tagdemux = __webpack_require__(0);\n\nvar _tagdemux2 = _interopRequireDefault(_tagdemux);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar FlvParse = function () {\n    function FlvParse() {\n        _classCallCheck(this, FlvParse);\n\n        this.tempUint8 = new Uint8Array();\n        this.arrTag = [];\n        this.index = 0;\n        this.tempArr = [];\n        this.stop = false;\n        this.offset = 0;\n        this.frist = true;\n    }\n\n    /**\n     * 接受 外部的flv二进制数据\n     */\n\n\n    _createClass(FlvParse, [{\n        key: 'setFlv',\n        value: function setFlv(uint8) {\n            this.stop = false;\n            this.arrTag = [];\n            this.index = 0;\n            this.tempUint8 = uint8;\n            if (this.tempUint8.length > 13 && this.tempUint8[0] == 70 && this.tempUint8[1] == 76 && this.tempUint8[2] == 86) {\n                this.probe(this.tempUint8.buffer);\n                this.read(9); //略掉9个字节的flv header tag\n                this.read(4); //略掉第一个4字节的 tag size\n                this.parse();\n                this.frist = false;\n                return this.offset;\n            } else if (!this.frist) {\n                return this.parse();\n            } else {\n                return this.offset;\n            }\n        }\n    }, {\n        key: 'probe',\n        value: function probe(buffer) {\n            var data = new Uint8Array(buffer);\n            var mismatch = { match: false };\n\n            if (data[0] !== 0x46 || data[1] !== 0x4C || data[2] !== 0x56 || data[3] !== 0x01) {\n                return mismatch;\n            }\n\n            var hasAudio = (data[4] & 4) >>> 2 !== 0;\n            var hasVideo = (data[4] & 1) !== 0;\n\n            if (!hasAudio && !hasVideo) {\n                return mismatch;\n            }\n            _tagdemux2.default._hasAudio = hasAudio;\n            _tagdemux2.default._hasVideo = hasVideo;\n            return {\n                match: true,\n                hasAudioTrack: hasAudio,\n                hasVideoTrack: hasVideo\n            };\n        }\n\n        /**\n         * 开始解析\n         */\n\n    }, {\n        key: 'parse',\n        value: function parse() {\n\n            while (this.index < this.tempUint8.length && !this.stop) {\n                this.offset = this.index;\n\n                var t = new _flvTag2.default();\n                if (this.tempUint8.length - this.index >= 11) {\n                    t.tagType = this.read(1)[0]; //取出tag类型\n                    t.dataSize = this.read(3); //取出包体大小\n                    t.Timestamp = this.read(4); //取出解码时间\n                    t.StreamID = this.read(3); //取出stream id\n                } else {\n                    this.stop = true;\n                    continue;\n                }\n                if (this.tempUint8.length - this.index >= this.getBodySum(t.dataSize) + 4) {\n                    t.body = this.read(this.getBodySum(t.dataSize)); //取出body\n                    this.arrTag.push(t);\n                    this.read(4);\n                } else {\n                    this.stop = true;\n                    continue;\n                }\n                this.offset = this.index;\n            }\n\n            return this.offset;\n        }\n    }, {\n        key: 'read',\n        value: function read(length) {\n            // let u8a = new Uint8Array(length);\n            // u8a.set(this.tempUint8.subarray(this.index, this.index + length), 0);\n            var u8a = this.tempUint8.slice(this.index, this.index + length);\n            this.index += length;\n            return u8a;\n        }\n\n        /**\n         * 计算tag包体大小\n         */\n\n    }, {\n        key: 'getBodySum',\n        value: function getBodySum(arr) {\n            var _str = \"\";\n            _str += arr[0].toString(16).length == 1 ? \"0\" + arr[0].toString(16) : arr[0].toString(16);\n            _str += arr[1].toString(16).length == 1 ? \"0\" + arr[1].toString(16) : arr[1].toString(16);\n            _str += arr[2].toString(16).length == 1 ? \"0\" + arr[2].toString(16) : arr[2].toString(16);\n            return parseInt(_str, 16);\n        }\n    }]);\n\n    return FlvParse;\n}();\n\nexports.default = new FlvParse();//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*\nopyright (C) 2016 Bilibili. All Rights Reserved.\nnauthor zheng qian <xqq@xqq.im>\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * Licensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nou may obtain a copy of the License at\nnhttp://www.apache.org/licenses/LICENSE-2.0\nn                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * Unless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\neither express or implied.\nee the License for the specific language governing permissions and\nlimitations under the License.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      */\n\nvar _expGolomb = __webpack_require__(7);\n\nvar _expGolomb2 = _interopRequireDefault(_expGolomb);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar SPSParser = function () {\n    function SPSParser() {\n        _classCallCheck(this, SPSParser);\n    }\n\n    _createClass(SPSParser, null, [{\n        key: '_ebsp2rbsp',\n        value: function _ebsp2rbsp(uint8array) {\n            var src = uint8array;\n            var src_length = src.byteLength;\n            var dst = new Uint8Array(src_length);\n            var dst_idx = 0;\n\n            for (var i = 0; i < src_length; i++) {\n                if (i >= 2) {\n                    // Unescape: Skip 0x03 after 00 00\n                    if (src[i] === 0x03 && src[i - 1] === 0x00 && src[i - 2] === 0x00) {\n                        continue;\n                    }\n                }\n                dst[dst_idx] = src[i];\n                dst_idx++;\n            }\n\n            return new Uint8Array(dst.buffer, 0, dst_idx);\n        }\n    }, {\n        key: 'parseSPS',\n        value: function parseSPS(uint8array) {\n            var rbsp = SPSParser._ebsp2rbsp(uint8array);\n            var gb = new _expGolomb2.default(rbsp);\n\n            gb.readByte();\n            var profile_idc = gb.readByte(); // profile_idc\n            gb.readByte(); // constraint_set_flags[5] + reserved_zero[3]\n            var level_idc = gb.readByte(); // level_idc\n            gb.readUEG(); // seq_parameter_set_id\n\n            var profile_string = SPSParser.getProfileString(profile_idc);\n            var level_string = SPSParser.getLevelString(level_idc);\n            var chroma_format_idc = 1;\n            var chroma_format = 420;\n            var chroma_format_table = [0, 420, 422, 444];\n            var bit_depth = 8;\n\n            if (profile_idc === 100 || profile_idc === 110 || profile_idc === 122 || profile_idc === 244 || profile_idc === 44 || profile_idc === 83 || profile_idc === 86 || profile_idc === 118 || profile_idc === 128 || profile_idc === 138 || profile_idc === 144) {\n\n                chroma_format_idc = gb.readUEG();\n                if (chroma_format_idc === 3) {\n                    gb.readBits(1); // separate_colour_plane_flag\n                }\n                if (chroma_format_idc <= 3) {\n                    chroma_format = chroma_format_table[chroma_format_idc];\n                }\n\n                bit_depth = gb.readUEG() + 8; // bit_depth_luma_minus8\n                gb.readUEG(); // bit_depth_chroma_minus8\n                gb.readBits(1); // qpprime_y_zero_transform_bypass_flag\n                if (gb.readBool()) {\n                    // seq_scaling_matrix_present_flag\n                    var scaling_list_count = chroma_format_idc !== 3 ? 8 : 12;\n                    for (var i = 0; i < scaling_list_count; i++) {\n                        if (gb.readBool()) {\n                            // seq_scaling_list_present_flag\n                            if (i < 6) {\n                                SPSParser._skipScalingList(gb, 16);\n                            } else {\n                                SPSParser._skipScalingList(gb, 64);\n                            }\n                        }\n                    }\n                }\n            }\n            gb.readUEG(); // log2_max_frame_num_minus4\n            var pic_order_cnt_type = gb.readUEG();\n            if (pic_order_cnt_type === 0) {\n                gb.readUEG(); // log2_max_pic_order_cnt_lsb_minus_4\n            } else if (pic_order_cnt_type === 1) {\n                gb.readBits(1); // delta_pic_order_always_zero_flag\n                gb.readSEG(); // offset_for_non_ref_pic\n                gb.readSEG(); // offset_for_top_to_bottom_field\n                var num_ref_frames_in_pic_order_cnt_cycle = gb.readUEG();\n                for (var _i = 0; _i < num_ref_frames_in_pic_order_cnt_cycle; _i++) {\n                    gb.readSEG(); // offset_for_ref_frame\n                }\n            }\n            gb.readUEG(); // max_num_ref_frames\n            gb.readBits(1); // gaps_in_frame_num_value_allowed_flag\n\n            var pic_width_in_mbs_minus1 = gb.readUEG();\n            var pic_height_in_map_units_minus1 = gb.readUEG();\n\n            var frame_mbs_only_flag = gb.readBits(1);\n            if (frame_mbs_only_flag === 0) {\n                gb.readBits(1); // mb_adaptive_frame_field_flag\n            }\n            gb.readBits(1); // direct_8x8_inference_flag\n\n            var frame_crop_left_offset = 0;\n            var frame_crop_right_offset = 0;\n            var frame_crop_top_offset = 0;\n            var frame_crop_bottom_offset = 0;\n\n            var frame_cropping_flag = gb.readBool();\n            if (frame_cropping_flag) {\n                frame_crop_left_offset = gb.readUEG();\n                frame_crop_right_offset = gb.readUEG();\n                frame_crop_top_offset = gb.readUEG();\n                frame_crop_bottom_offset = gb.readUEG();\n            }\n\n            var sar_width = 1,\n                sar_height = 1;\n            var fps = 0,\n                fps_fixed = true,\n                fps_num = 0,\n                fps_den = 0;\n\n            var vui_parameters_present_flag = gb.readBool();\n            if (vui_parameters_present_flag) {\n                if (gb.readBool()) {\n                    // aspect_ratio_info_present_flag\n                    var aspect_ratio_idc = gb.readByte();\n                    var sar_w_table = [1, 12, 10, 16, 40, 24, 20, 32, 80, 18, 15, 64, 160, 4, 3, 2];\n                    var sar_h_table = [1, 11, 11, 11, 33, 11, 11, 11, 33, 11, 11, 33, 99, 3, 2, 1];\n\n                    if (aspect_ratio_idc > 0 && aspect_ratio_idc < 16) {\n                        sar_width = sar_w_table[aspect_ratio_idc - 1];\n                        sar_height = sar_h_table[aspect_ratio_idc - 1];\n                    } else if (aspect_ratio_idc === 255) {\n                        sar_width = gb.readByte() << 8 | gb.readByte();\n                        sar_height = gb.readByte() << 8 | gb.readByte();\n                    }\n                }\n\n                if (gb.readBool()) {\n                    // overscan_info_present_flag\n                    gb.readBool(); // overscan_appropriate_flag\n                }\n                if (gb.readBool()) {\n                    // video_signal_type_present_flag\n                    gb.readBits(4); // video_format & video_full_range_flag\n                    if (gb.readBool()) {\n                        // colour_description_present_flag\n                        gb.readBits(24); // colour_primaries & transfer_characteristics & matrix_coefficients\n                    }\n                }\n                if (gb.readBool()) {\n                    // chroma_loc_info_present_flag\n                    gb.readUEG(); // chroma_sample_loc_type_top_field\n                    gb.readUEG(); // chroma_sample_loc_type_bottom_field\n                }\n                if (gb.readBool()) {\n                    // timing_info_present_flag\n                    var num_units_in_tick = gb.readBits(32);\n                    var time_scale = gb.readBits(32);\n                    fps_fixed = gb.readBool(); // fixed_frame_rate_flag\n\n                    fps_num = time_scale;\n                    fps_den = num_units_in_tick * 2;\n                    fps = fps_num / fps_den;\n                }\n            }\n\n            var sarScale = 1;\n            if (sar_width !== 1 || sar_height !== 1) {\n                sarScale = sar_width / sar_height;\n            }\n\n            var crop_unit_x = 0,\n                crop_unit_y = 0;\n            if (chroma_format_idc === 0) {\n                crop_unit_x = 1;\n                crop_unit_y = 2 - frame_mbs_only_flag;\n            } else {\n                var sub_wc = chroma_format_idc === 3 ? 1 : 2;\n                var sub_hc = chroma_format_idc === 1 ? 2 : 1;\n                crop_unit_x = sub_wc;\n                crop_unit_y = sub_hc * (2 - frame_mbs_only_flag);\n            }\n\n            var codec_width = (pic_width_in_mbs_minus1 + 1) * 16;\n            var codec_height = (2 - frame_mbs_only_flag) * ((pic_height_in_map_units_minus1 + 1) * 16);\n\n            codec_width -= (frame_crop_left_offset + frame_crop_right_offset) * crop_unit_x;\n            codec_height -= (frame_crop_top_offset + frame_crop_bottom_offset) * crop_unit_y;\n\n            var present_width = Math.ceil(codec_width * sarScale);\n\n            gb.destroy();\n            gb = null;\n\n            return {\n                profile_string: profile_string, // baseline, high, high10, ...\n                level_string: level_string, // 3, 3.1, 4, 4.1, 5, 5.1, ...\n                bit_depth: bit_depth, // 8bit, 10bit, ...\n                chroma_format: chroma_format, // 4:2:0, 4:2:2, ...\n                chroma_format_string: SPSParser.getChromaFormatString(chroma_format),\n\n                frame_rate: {\n                    fixed: fps_fixed,\n                    fps: fps,\n                    fps_den: fps_den,\n                    fps_num: fps_num\n                },\n\n                sar_ratio: {\n                    width: sar_width,\n                    height: sar_height\n                },\n\n                codec_size: {\n                    width: codec_width,\n                    height: codec_height\n                },\n\n                present_size: {\n                    width: present_width,\n                    height: codec_height\n                }\n            };\n        }\n    }, {\n        key: '_skipScalingList',\n        value: function _skipScalingList(gb, count) {\n            var last_scale = 8,\n                next_scale = 8;\n            var delta_scale = 0;\n            for (var i = 0; i < count; i++) {\n                if (next_scale !== 0) {\n                    delta_scale = gb.readSEG();\n                    next_scale = (last_scale + delta_scale + 256) % 256;\n                }\n                last_scale = next_scale === 0 ? last_scale : next_scale;\n            }\n        }\n    }, {\n        key: 'getProfileString',\n        value: function getProfileString(profile_idc) {\n            switch (profile_idc) {\n                case 66:\n                    return 'Baseline';\n                case 77:\n                    return 'Main';\n                case 88:\n                    return 'Extended';\n                case 100:\n                    return 'High';\n                case 110:\n                    return 'High10';\n                case 122:\n                    return 'High422';\n                case 244:\n                    return 'High444';\n                default:\n                    return 'Unknown';\n            }\n        }\n    }, {\n        key: 'getLevelString',\n        value: function getLevelString(level_idc) {\n            return (level_idc / 10).toFixed(1);\n        }\n    }, {\n        key: 'getChromaFormatString',\n        value: function getChromaFormatString(chroma) {\n            switch (chroma) {\n                case 420:\n                    return '4:2:0';\n                case 422:\n                    return '4:2:2';\n                case 444:\n                    return '4:4:4';\n                default:\n                    return 'Unknown';\n            }\n        }\n    }]);\n\n    return SPSParser;\n}();\n\nexports.default = SPSParser;//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*\nopyright (C) 2016 Bilibili. All Rights Reserved.\nnauthor zheng qian <xqq@xqq.im>\nnicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nou may obtain a copy of the License at\nnhttp://www.apache.org/licenses/LICENSE-2.0\nnnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nee the License for the specific language governing permissions and\nlimitations under the License.\nn\nvar _aacSilent = __webpack_require__(12);\n\nvar _aacSilent2 = _interopRequireDefault(_aacSilent);\n\nvar _browser = __webpack_require__(14);\n\nvar _browser2 = _interopRequireDefault(_browser);\n\nvar _mp4remux = __webpack_require__(1);\n\nvar _mp4remux2 = _interopRequireDefault(_mp4remux);\n\nvar _mediaSegmentInfo = __webpack_require__(13);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n// Fragmented mp4 remuxer\nvar MP4Remuxer = function () {\n    function MP4Remuxer(config) {\n        _classCallCheck(this, MP4Remuxer);\n\n        this.TAG = this.constructor.name;\n\n        this._config = config;\n        this._isLive = config.isLive === true ? true : false;\n\n        this._dtsBase = -1;\n        this._dtsBaseInited = false;\n        this._audioDtsBase = Infinity;\n        this._videoDtsBase = Infinity;\n        this._audioNextDts = undefined;\n        this._videoNextDts = undefined;\n\n        this._audioMeta = null;\n        this._videoMeta = null;\n\n        this._audioSegmentInfoList = new _mediaSegmentInfo.MediaSegmentInfoList('audio');\n        this._videoSegmentInfoList = new _mediaSegmentInfo.MediaSegmentInfoList('video');\n\n        this._onInitSegment = null;\n        this._onMediaSegment = null;\n\n        // Workaround for chrome < 50: Always force first sample as a Random Access Point in media segment\n        // see https://bugs.chromium.org/p/chromium/issues/detail?id=229412\n        this._forceFirstIDR = _browser2.default.chrome && (_browser2.default.version.major < 50 || _browser2.default.version.major === 50 && _browser2.default.version.build < 2661) ? true : false;\n\n        // Workaround for IE11/Edge: Fill silent aac frame after keyframe-seeking\n        // Make audio beginDts equals with video beginDts, in order to fix seek freeze\n        this._fillSilentAfterSeek = _browser2.default.msedge || _browser2.default.msie;\n    }\n\n    _createClass(MP4Remuxer, [{\n        key: 'destroy',\n        value: function destroy() {\n            this._dtsBase = -1;\n            this._dtsBaseInited = false;\n            this._audioMeta = null;\n            this._videoMeta = null;\n            this._audioSegmentInfoList.clear();\n            this._audioSegmentInfoList = null;\n            this._videoSegmentInfoList.clear();\n            this._videoSegmentInfoList = null;\n            this._onInitSegment = null;\n            this._onMediaSegment = null;\n        }\n    }, {\n        key: 'bindDataSource',\n        value: function bindDataSource(producer) {\n            producer.onDataAvailable = this.remux.bind(this);\n            producer.onTrackMetadata = this._onTrackMetadataReceived.bind(this);\n            return this;\n        }\n\n        /* prototype: function onInitSegment(type: string, initSegment: ArrayBuffer): void\n           InitSegment: {\n               type: string,\n               data: ArrayBuffer,\n               codec: string,\n               container: string\n           }\n        */\n\n    }, {\n        key: 'insertDiscontinuity',\n        value: function insertDiscontinuity() {\n            this._audioNextDts = this._videoNextDts = undefined;\n        }\n    }, {\n        key: 'seek',\n        value: function seek(originalDts) {\n            this._videoSegmentInfoList.clear();\n            this._audioSegmentInfoList.clear();\n        }\n    }, {\n        key: 'remux',\n        value: function remux(audioTrack, videoTrack) {\n            if (!this._onMediaSegment) {\n                throw new IllegalStateException('MP4Remuxer: onMediaSegment callback must be specificed!');\n            }\n            if (!this._dtsBaseInited) {\n                this._calculateDtsBase(audioTrack, videoTrack);\n            }\n            this._remuxVideo(videoTrack);\n            this._remuxAudio(audioTrack);\n        }\n    }, {\n        key: '_onTrackMetadataReceived',\n        value: function _onTrackMetadataReceived(type, metadata) {\n            var metabox = null;\n\n            if (type === 'audio') {\n                this._audioMeta = metadata;\n                metabox = _mp4remux2.default.generateInitSegment(metadata);\n                Log.v('msg+audio', metadata);\n            } else if (type === 'video') {\n                this._videoMeta = metadata;\n                metabox = _mp4remux2.default.generateInitSegment(metadata);\n                Log.v('msg+video', metadata);\n            } else {\n                return;\n            }\n\n            // dispatch metabox (Initialization Segment)\n            if (!this._onInitSegment) {\n                throw new IllegalStateException('MP4Remuxer: onInitSegment callback must be specified!');\n            }\n            this._onInitSegment(type, {\n                type: type,\n                data: metabox.buffer,\n                codec: metadata.codec,\n                container: type + '/mp4'\n            });\n        }\n    }, {\n        key: '_calculateDtsBase',\n        value: function _calculateDtsBase(audioTrack, videoTrack) {\n            if (this._dtsBaseInited) {\n                return;\n            }\n\n            if (audioTrack.samples && audioTrack.samples.length) {\n                this._audioDtsBase = audioTrack.samples[0].dts;\n            }\n            if (videoTrack.samples && videoTrack.samples.length) {\n                this._videoDtsBase = videoTrack.samples[0].dts;\n            }\n\n            this._dtsBase = Math.min(this._audioDtsBase, this._videoDtsBase);\n            this._dtsBaseInited = true;\n        }\n    }, {\n        key: '_remuxAudio',\n        value: function _remuxAudio(audioTrack) {\n            var track = audioTrack;\n            var samples = track.samples;\n            var dtsCorrection = undefined;\n            var firstDts = -1,\n                lastDts = -1,\n                lastPts = -1;\n\n            var remuxSilentFrame = false;\n            var silentFrameDuration = -1;\n\n            if (!samples || samples.length === 0) {\n                return;\n            }\n\n            var bytes = 8 + track.length;\n            var mdatbox = new Uint8Array(bytes);\n            mdatbox[0] = bytes >>> 24 & 0xFF;\n            mdatbox[1] = bytes >>> 16 & 0xFF;\n            mdatbox[2] = bytes >>> 8 & 0xFF;\n            mdatbox[3] = bytes & 0xFF;\n\n            mdatbox.set(_mp4remux2.default.types.mdat, 4);\n\n            var offset = 8; // size + type\n            var mp4Samples = [];\n\n            while (samples.length) {\n                var aacSample = samples.shift();\n                var unit = aacSample.unit;\n                var originalDts = aacSample.dts - this._dtsBase;\n\n                if (dtsCorrection == undefined) {\n                    if (this._audioNextDts == undefined) {\n                        if (this._audioSegmentInfoList.isEmpty()) {\n                            dtsCorrection = 0;\n                            if (this._fillSilentAfterSeek && !this._videoSegmentInfoList.isEmpty()) {\n                                remuxSilentFrame = true;\n                            }\n                        } else {\n                            var lastSample = this._audioSegmentInfoList.getLastSampleBefore(originalDts);\n                            if (lastSample != null) {\n                                var distance = originalDts - (lastSample.originalDts + lastSample.duration);\n                                if (distance <= 3) {\n                                    distance = 0;\n                                }\n                                var expectedDts = lastSample.dts + lastSample.duration + distance;\n                                dtsCorrection = originalDts - expectedDts;\n                            } else {\n                                // lastSample == null\n                                dtsCorrection = 0;\n                            }\n                        }\n                    } else {\n                        dtsCorrection = originalDts - this._audioNextDts;\n                    }\n                }\n\n                var dts = originalDts - dtsCorrection;\n                if (remuxSilentFrame) {\n                    // align audio segment beginDts to match with current video segment's beginDts\n                    var videoSegment = this._videoSegmentInfoList.getLastSegmentBefore(originalDts);\n                    if (videoSegment != null && videoSegment.beginDts < dts) {\n                        silentFrameDuration = dts - videoSegment.beginDts;\n                        dts = videoSegment.beginDts;\n                    } else {\n                        remuxSilentFrame = false;\n                    }\n                }\n                if (firstDts === -1) {\n                    firstDts = dts;\n                }\n\n                if (remuxSilentFrame) {\n                    remuxSilentFrame = false;\n                    samples.unshift(aacSample);\n\n                    var frame = this._generateSilentAudio(dts, silentFrameDuration);\n                    if (frame == null) {\n                        continue;\n                    }\n                    var _mp4Sample = frame.mp4Sample;\n                    var _unit = frame.unit;\n\n                    mp4Samples.push(_mp4Sample);\n\n                    // re-allocate mdatbox buffer with new size, to fit with this silent frame\n                    bytes += _unit.byteLength;\n                    mdatbox = new Uint8Array(bytes);\n                    mdatbox[0] = bytes >>> 24 & 0xFF;\n                    mdatbox[1] = bytes >>> 16 & 0xFF;\n                    mdatbox[2] = bytes >>> 8 & 0xFF;\n                    mdatbox[3] = bytes & 0xFF;\n                    mdatbox.set(_mp4remux2.default.types.mdat, 4);\n\n                    // fill data now\n                    mdatbox.set(_unit, offset);\n                    offset += _unit.byteLength;\n                    continue;\n                }\n\n                var sampleDuration = 0;\n\n                if (samples.length >= 1) {\n                    var nextDts = samples[0].dts - this._dtsBase - dtsCorrection;\n                    sampleDuration = nextDts - dts;\n                } else {\n                    if (mp4Samples.length >= 1) {\n                        // use second last sample duration\n                        sampleDuration = mp4Samples[mp4Samples.length - 1].duration;\n                    } else {\n                        // the only one sample, use reference sample duration\n                        sampleDuration = this._audioMeta.refSampleDuration;\n                    }\n                }\n\n                var mp4Sample = {\n                    dts: dts,\n                    pts: dts,\n                    cts: 0,\n                    size: unit.byteLength,\n                    duration: sampleDuration,\n                    originalDts: originalDts,\n                    flags: {\n                        isLeading: 0,\n                        dependsOn: 1,\n                        isDependedOn: 0,\n                        hasRedundancy: 0\n                    }\n                };\n                mp4Samples.push(mp4Sample);\n                mdatbox.set(unit, offset);\n                offset += unit.byteLength;\n            }\n            var latest = mp4Samples[mp4Samples.length - 1];\n            lastDts = latest.dts + latest.duration;\n            this._audioNextDts = lastDts;\n\n            // fill media segment info & add to info list\n            var info = new _mediaSegmentInfo.MediaSegmentInfo();\n            info.beginDts = firstDts;\n            info.endDts = lastDts;\n            info.beginPts = firstDts;\n            info.endPts = lastDts;\n            info.originalBeginDts = mp4Samples[0].originalDts;\n            info.originalEndDts = latest.originalDts + latest.duration;\n            info.firstSample = new _mediaSegmentInfo.SampleInfo(mp4Samples[0].dts, mp4Samples[0].pts, mp4Samples[0].duration, mp4Samples[0].originalDts, false);\n            info.lastSample = new _mediaSegmentInfo.SampleInfo(latest.dts, latest.pts, latest.duration, latest.originalDts, false);\n            if (!this._isLive) {\n                this._audioSegmentInfoList.append(info);\n            }\n\n            track.samples = mp4Samples;\n            track.sequenceNumber += track.addcoefficient;\n\n            var moofbox = _mp4remux2.default.moof(track, firstDts);\n            track.samples = [];\n            track.length = 0;\n\n            this._onMediaSegment('audio', {\n                type: 'audio',\n                data: this._mergeBoxes(moofbox, mdatbox).buffer,\n                sampleCount: mp4Samples.length,\n                info: info\n            });\n        }\n    }, {\n        key: '_generateSilentAudio',\n        value: function _generateSilentAudio(dts, frameDuration) {\n            Log.v(this.TAG, 'GenerateSilentAudio: dts = ' + dts + ', duration = ' + frameDuration);\n\n            var unit = _aacSilent2.default.getSilentFrame(this._audioMeta.channelCount);\n            if (unit == null) {\n                Log.w(this.TAG, 'Cannot generate silent aac frame for channelCount = ' + this._audioMeta.channelCount);\n                return null;\n            }\n\n            var mp4Sample = {\n                dts: dts,\n                pts: dts,\n                cts: 0,\n                size: unit.byteLength,\n                duration: frameDuration,\n                originalDts: dts,\n                flags: {\n                    isLeading: 0,\n                    dependsOn: 1,\n                    isDependedOn: 0,\n                    hasRedundancy: 0\n                }\n            };\n\n            return {\n                unit: unit,\n                mp4Sample: mp4Sample\n            };\n        }\n    }, {\n        key: '_remuxVideo',\n        value: function _remuxVideo(videoTrack) {\n            var track = videoTrack;\n            var samples = track.samples;\n            var dtsCorrection = undefined;\n            var firstDts = -1,\n                lastDts = -1;\n            var firstPts = -1,\n                lastPts = -1;\n\n            if (!samples || samples.length === 0) {\n                return;\n            }\n\n            var bytes = 8 + videoTrack.length;\n            var mdatbox = new Uint8Array(bytes);\n            mdatbox[0] = bytes >>> 24 & 0xFF;\n            mdatbox[1] = bytes >>> 16 & 0xFF;\n            mdatbox[2] = bytes >>> 8 & 0xFF;\n            mdatbox[3] = bytes & 0xFF;\n            mdatbox.set(_mp4remux2.default.types.mdat, 4);\n\n            var offset = 8;\n            var mp4Samples = [];\n            var info = new _mediaSegmentInfo.MediaSegmentInfo();\n\n            while (samples.length) {\n                var avcSample = samples.shift();\n                var keyframe = avcSample.isKeyframe;\n                var originalDts = avcSample.dts - this._dtsBase;\n\n                if (dtsCorrection == undefined) {\n                    if (this._videoNextDts == undefined) {\n                        if (this._videoSegmentInfoList.isEmpty()) {\n                            dtsCorrection = 0;\n                        } else {\n                            var lastSample = this._videoSegmentInfoList.getLastSampleBefore(originalDts);\n                            if (lastSample != null) {\n                                var distance = originalDts - (lastSample.originalDts + lastSample.duration);\n                                if (distance <= 3) {\n                                    distance = 0;\n                                }\n                                var expectedDts = lastSample.dts + lastSample.duration + distance;\n                                dtsCorrection = originalDts - expectedDts;\n                            } else {\n                                // lastSample == null\n                                dtsCorrection = 0;\n                            }\n                        }\n                    } else {\n                        dtsCorrection = originalDts - this._videoNextDts;\n                    }\n                }\n\n                var dts = originalDts - dtsCorrection;\n                var cts = avcSample.cts;\n                var pts = dts + cts;\n\n                if (firstDts === -1) {\n                    firstDts = dts;\n                    firstPts = pts;\n                }\n\n                // fill mdat box\n                var sampleSize = 0;\n                while (avcSample.units.length) {\n                    var unit = avcSample.units.shift();\n                    var data = unit.data;\n                    mdatbox.set(data, offset);\n                    offset += data.byteLength;\n                    sampleSize += data.byteLength;\n                }\n\n                var sampleDuration = 0;\n\n                if (samples.length >= 1) {\n                    var nextDts = samples[0].dts - this._dtsBase - dtsCorrection;\n                    sampleDuration = nextDts - dts;\n                } else {\n                    if (mp4Samples.length >= 1) {\n                        // lastest sample, use second last duration\n                        sampleDuration = mp4Samples[mp4Samples.length - 1].duration;\n                    } else {\n                        // the only one sample, use reference duration\n                        sampleDuration = this._videoMeta.refSampleDuration;\n                    }\n                }\n\n                if (keyframe) {\n                    var syncPoint = new _mediaSegmentInfo.SampleInfo(dts, pts, sampleDuration, avcSample.dts, true);\n                    syncPoint.fileposition = avcSample.fileposition;\n                    info.appendSyncPoint(syncPoint);\n                }\n\n                var mp4Sample = {\n                    dts: dts,\n                    pts: pts,\n                    cts: cts,\n                    size: sampleSize,\n                    isKeyframe: keyframe,\n                    duration: sampleDuration,\n                    originalDts: originalDts,\n                    flags: {\n                        isLeading: 0,\n                        dependsOn: keyframe ? 2 : 1,\n                        isDependedOn: keyframe ? 1 : 0,\n                        hasRedundancy: 0,\n                        isNonSync: keyframe ? 0 : 1\n                    }\n                };\n\n                mp4Samples.push(mp4Sample);\n            }\n            var latest = mp4Samples[mp4Samples.length - 1];\n            lastDts = latest.dts + latest.duration;\n            lastPts = latest.pts + latest.duration;\n            this._videoNextDts = lastDts;\n\n            // fill media segment info & add to info list\n            info.beginDts = firstDts;\n            info.endDts = lastDts;\n            info.beginPts = firstPts;\n            info.endPts = lastPts;\n            info.originalBeginDts = mp4Samples[0].originalDts;\n            info.originalEndDts = latest.originalDts + latest.duration;\n            info.firstSample = new _mediaSegmentInfo.SampleInfo(mp4Samples[0].dts, mp4Samples[0].pts, mp4Samples[0].duration, mp4Samples[0].originalDts, mp4Samples[0].isKeyframe);\n            info.lastSample = new _mediaSegmentInfo.SampleInfo(latest.dts, latest.pts, latest.duration, latest.originalDts, latest.isKeyframe);\n            if (!this._isLive) {\n                this._videoSegmentInfoList.append(info);\n            }\n\n            track.samples = mp4Samples;\n            track.sequenceNumber += track.addcoefficient;\n\n            // workaround for chrome < 50: force first sample as a random access point\n            // see https://bugs.chromium.org/p/chromium/issues/detail?id=229412\n            if (this._forceFirstIDR) {\n                var flags = mp4Samples[0].flags;\n                flags.dependsOn = 2;\n                flags.isNonSync = 0;\n            }\n\n            var moofbox = _mp4remux2.default.moof(track, firstDts);\n            track.samples = [];\n            track.length = 0;\n\n            this._onMediaSegment('video', {\n                type: 'video',\n                data: this._mergeBoxes(moofbox, mdatbox).buffer,\n                sampleCount: mp4Samples.length,\n                info: info\n            });\n        }\n    }, {\n        key: '_mergeBoxes',\n        value: function _mergeBoxes(moof, mdat) {\n            var result = new Uint8Array(moof.byteLength + mdat.byteLength);\n            result.set(moof, 0);\n            result.set(mdat, moof.byteLength);\n            return result;\n        }\n    }, {\n        key: 'onInitSegment',\n        get: function get() {\n            return this._onInitSegment;\n        },\n        set: function set(callback) {\n            this._onInitSegment = callback;\n        }\n\n        /* prototype: function onMediaSegment(type: string, mediaSegment: MediaSegment): void\n           MediaSegment: {\n               type: string,\n               data: ArrayBuffer,\n               sampleCount: int32\n               info: MediaSegmentInfo\n           }\n        */\n\n    }, {\n        key: 'onMediaSegment',\n        get: function get() {\n            return this._onMediaSegment;\n        },\n        set: function set(callback) {\n            this._onMediaSegment = callback;\n        }\n    }]);\n\n    return MP4Remuxer;\n}();\n\nexports.default = MP4Remuxer;//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _flvParse = __webpack_require__(2);\n\nvar _flvParse2 = _interopRequireDefault(_flvParse);\n\nvar _tagdemux = __webpack_require__(0);\n\nvar _tagdemux2 = _interopRequireDefault(_tagdemux);\n\nvar _mp4remux = __webpack_require__(1);\n\nvar _mp4remux2 = _interopRequireDefault(_mp4remux);\n\nvar _mp4moof = __webpack_require__(4);\n\nvar _mp4moof2 = _interopRequireDefault(_mp4moof);\n\nvar _flv2fmp = __webpack_require__(11);\n\nvar _flv2fmp2 = _interopRequireDefault(_flv2fmp);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar temp = new _flv2fmp2.default();\n\nwindow.flvParse = {\n    mp4File: null,\n    succ: null,\n    // ftyp_moov:null,\n    tracks: [],\n    baseTime: 0,\n    setFlv: function setFlv(uint8, baseTime) {\n        if (flvParse.baseTime != baseTime) {\n            flvParse.baseTime = baseTime;\n            temp.seek();\n        }\n        if (window.mp4Init) {\n            temp.onInitSegment = window.mp4Init;\n        }\n        if (window.onMediaSegment) {\n            temp.onMediaSegment = window.onMediaSegment;\n        }\n        if (window.seekCallBack) {\n            temp.seekCallBack = window.seekCallBack;\n        }\n        if (window.onMediaInfo) {\n            temp.onMediaInfo = window.onMediaInfo;\n        }\n        return temp.setflv(uint8.buffer, baseTime);\n\n        //用来获取moov\n    },\n    setLocFlv: function setLocFlv(uin8) {\n        return temp.setflvloc(uin8);\n    }\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9qcy9mbHZFbnRlci5qcz9iZGJiIl0sIm5hbWVzIjpbInRlbXAiLCJ3aW5kb3ciLCJmbHZQYXJzZSIsIm1wNEZpbGUiLCJzdWNjIiwidHJhY2tzIiwiYmFzZVRpbWUiLCJzZXRGbHYiLCJ1aW50OCIsInNlZWsiLCJtcDRJbml0Iiwib25Jbml0U2VnbWVudCIsIm9uTWVkaWFTZWdtZW50Iiwic2Vla0NhbGxCYWNrIiwib25NZWRpYUluZm8iLCJzZXRmbHYiLCJidWZmZXIiLCJzZXRMb2NGbHYiLCJ1aW44Iiwic2V0Zmx2bG9jIl0sIm1hcHBpbmdzIjoiOztBQUFBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7OztBQUVBLElBQUlBLE9BQU8sdUJBQVg7O0FBRUFDLE9BQU9DLFFBQVAsR0FBa0I7QUFDZEMsYUFBUyxJQURLO0FBRWRDLFVBQU0sSUFGUTtBQUdkO0FBQ0FDLFlBQVEsRUFKTTtBQUtkQyxjQUFVLENBTEk7QUFNZEMsWUFBUSxnQkFBU0MsS0FBVCxFQUFnQkYsUUFBaEIsRUFBMEI7QUFDOUIsWUFBSUosU0FBU0ksUUFBVCxJQUFxQkEsUUFBekIsRUFBbUM7QUFDL0JKLHFCQUFTSSxRQUFULEdBQW9CQSxRQUFwQjtBQUNBTixpQkFBS1MsSUFBTDtBQUNIO0FBQ0QsWUFBSVIsT0FBT1MsT0FBWCxFQUFvQjtBQUNoQlYsaUJBQUtXLGFBQUwsR0FBcUJWLE9BQU9TLE9BQTVCO0FBQ0g7QUFDRCxZQUFJVCxPQUFPVyxjQUFYLEVBQTJCO0FBQ3ZCWixpQkFBS1ksY0FBTCxHQUFzQlgsT0FBT1csY0FBN0I7QUFDSDtBQUNELFlBQUlYLE9BQU9ZLFlBQVgsRUFBeUI7QUFDckJiLGlCQUFLYSxZQUFMLEdBQW9CWixPQUFPWSxZQUEzQjtBQUNIO0FBQ0QsWUFBSVosT0FBT2EsV0FBWCxFQUF3QjtBQUNwQmQsaUJBQUtjLFdBQUwsR0FBbUJiLE9BQU9hLFdBQTFCO0FBQ0g7QUFDRCxlQUFPZCxLQUFLZSxNQUFMLENBQVlQLE1BQU1RLE1BQWxCLEVBQTBCVixRQUExQixDQUFQOztBQUdBO0FBRUgsS0E1QmE7QUE2QmRXLGVBQVcsbUJBQVNDLElBQVQsRUFBZTtBQUN0QixlQUFPbEIsS0FBS21CLFNBQUwsQ0FBZUQsSUFBZixDQUFQO0FBQ0g7QUEvQmEsQ0FBbEIiLCJmaWxlIjoiNS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBmbHZwYXJzZSBmcm9tICcuL2Zsdi9mbHZQYXJzZSdcbmltcG9ydCB0YWdkZW11eCBmcm9tICcuL2Zsdi90YWdkZW11eCdcbmltcG9ydCBtcDRyZW11eCBmcm9tICcuL21wNC9tcDRyZW11eCdcbmltcG9ydCBtcDRtb29mIGZyb20gJy4vbXA0L21wNG1vb2YnXG5pbXBvcnQgZjJtIGZyb20gJy4vZmx2MmZtcDQnO1xuXG5sZXQgdGVtcCA9IG5ldyBmMm0oKTtcblxud2luZG93LmZsdlBhcnNlID0ge1xuICAgIG1wNEZpbGU6IG51bGwsXG4gICAgc3VjYzogbnVsbCxcbiAgICAvLyBmdHlwX21vb3Y6bnVsbCxcbiAgICB0cmFja3M6IFtdLFxuICAgIGJhc2VUaW1lOiAwLFxuICAgIHNldEZsdjogZnVuY3Rpb24odWludDgsIGJhc2VUaW1lKSB7XG4gICAgICAgIGlmIChmbHZQYXJzZS5iYXNlVGltZSAhPSBiYXNlVGltZSkge1xuICAgICAgICAgICAgZmx2UGFyc2UuYmFzZVRpbWUgPSBiYXNlVGltZTtcbiAgICAgICAgICAgIHRlbXAuc2VlaygpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh3aW5kb3cubXA0SW5pdCkge1xuICAgICAgICAgICAgdGVtcC5vbkluaXRTZWdtZW50ID0gd2luZG93Lm1wNEluaXRcbiAgICAgICAgfVxuICAgICAgICBpZiAod2luZG93Lm9uTWVkaWFTZWdtZW50KSB7XG4gICAgICAgICAgICB0ZW1wLm9uTWVkaWFTZWdtZW50ID0gd2luZG93Lm9uTWVkaWFTZWdtZW50XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHdpbmRvdy5zZWVrQ2FsbEJhY2spIHtcbiAgICAgICAgICAgIHRlbXAuc2Vla0NhbGxCYWNrID0gd2luZG93LnNlZWtDYWxsQmFja1xuICAgICAgICB9XG4gICAgICAgIGlmICh3aW5kb3cub25NZWRpYUluZm8pIHtcbiAgICAgICAgICAgIHRlbXAub25NZWRpYUluZm8gPSB3aW5kb3cub25NZWRpYUluZm9cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGVtcC5zZXRmbHYodWludDguYnVmZmVyLCBiYXNlVGltZSk7XG5cblxuICAgICAgICAvL+eUqOadpeiOt+WPlm1vb3ZcblxuICAgIH0sXG4gICAgc2V0TG9jRmx2OiBmdW5jdGlvbih1aW44KSB7XG4gICAgICAgIHJldHVybiB0ZW1wLnNldGZsdmxvYyh1aW44KTtcbiAgICB9XG59XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vanMvZmx2RW50ZXIuanMiXSwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nfunction decodeUTF8(uint8array) {\n    var out = [];\n    var input = uint8array;\n    var i = 0;\n    var length = uint8array.length;\n\n    while (i < length) {\n        if (input[i] < 0x80) {\n            out.push(String.fromCharCode(input[i]));\n            ++i;\n            continue;\n        } else if (input[i] < 0xC0) {\n            // fallthrough\n        } else if (input[i] < 0xE0) {\n            if (checkContinuation(input, i, 1)) {\n                var ucs4 = (input[i] & 0x1F) << 6 | input[i + 1] & 0x3F;\n                if (ucs4 >= 0x80) {\n                    out.push(String.fromCharCode(ucs4 & 0xFFFF));\n                    i += 2;\n                    continue;\n                }\n            }\n        } else if (input[i] < 0xF0) {\n            if (checkContinuation(input, i, 2)) {\n                var _ucs = (input[i] & 0xF) << 12 | (input[i + 1] & 0x3F) << 6 | input[i + 2] & 0x3F;\n                if (_ucs >= 0x800 && (_ucs & 0xF800) !== 0xD800) {\n                    out.push(String.fromCharCode(_ucs & 0xFFFF));\n                    i += 3;\n                    continue;\n                }\n            }\n        } else if (input[i] < 0xF8) {\n            if (checkContinuation(input, i, 3)) {\n                var _ucs2 = (input[i] & 0x7) << 18 | (input[i + 1] & 0x3F) << 12 | (input[i + 2] & 0x3F) << 6 | input[i + 3] & 0x3F;\n                if (_ucs2 > 0x10000 && _ucs2 < 0x110000) {\n                    _ucs2 -= 0x10000;\n                    out.push(String.fromCharCode(_ucs2 >>> 10 | 0xD800));\n                    out.push(String.fromCharCode(_ucs2 & 0x3FF | 0xDC00));\n                    i += 4;\n                    continue;\n                }\n            }\n        }\n        out.push(String.fromCharCode(0xFFFD));\n        ++i;\n    }\n\n    return out.join('');\n}\n\nexports.default = decodeUTF8;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9qcy9kZWNvZGVVVEY4LmpzPzQ3ZWQiXSwibmFtZXMiOlsiZGVjb2RlVVRGOCIsInVpbnQ4YXJyYXkiLCJvdXQiLCJpbnB1dCIsImkiLCJsZW5ndGgiLCJwdXNoIiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwiY2hlY2tDb250aW51YXRpb24iLCJ1Y3M0Iiwiam9pbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxTQUFTQSxVQUFULENBQW9CQyxVQUFwQixFQUFnQztBQUM1QixRQUFJQyxNQUFNLEVBQVY7QUFDQSxRQUFJQyxRQUFRRixVQUFaO0FBQ0EsUUFBSUcsSUFBSSxDQUFSO0FBQ0EsUUFBSUMsU0FBU0osV0FBV0ksTUFBeEI7O0FBRUEsV0FBT0QsSUFBSUMsTUFBWCxFQUFtQjtBQUNmLFlBQUlGLE1BQU1DLENBQU4sSUFBVyxJQUFmLEVBQXFCO0FBQ2pCRixnQkFBSUksSUFBSixDQUFTQyxPQUFPQyxZQUFQLENBQW9CTCxNQUFNQyxDQUFOLENBQXBCLENBQVQ7QUFDQSxjQUFFQSxDQUFGO0FBQ0E7QUFDSCxTQUpELE1BSU8sSUFBSUQsTUFBTUMsQ0FBTixJQUFXLElBQWYsRUFBcUI7QUFDeEI7QUFDSCxTQUZNLE1BRUEsSUFBSUQsTUFBTUMsQ0FBTixJQUFXLElBQWYsRUFBcUI7QUFDeEIsZ0JBQUlLLGtCQUFrQk4sS0FBbEIsRUFBeUJDLENBQXpCLEVBQTRCLENBQTVCLENBQUosRUFBb0M7QUFDaEMsb0JBQUlNLE9BQU8sQ0FBQ1AsTUFBTUMsQ0FBTixJQUFXLElBQVosS0FBcUIsQ0FBckIsR0FBMEJELE1BQU1DLElBQUksQ0FBVixJQUFlLElBQXBEO0FBQ0Esb0JBQUlNLFFBQVEsSUFBWixFQUFrQjtBQUNkUix3QkFBSUksSUFBSixDQUFTQyxPQUFPQyxZQUFQLENBQW9CRSxPQUFPLE1BQTNCLENBQVQ7QUFDQU4seUJBQUssQ0FBTDtBQUNBO0FBQ0g7QUFDSjtBQUNKLFNBVE0sTUFTQSxJQUFJRCxNQUFNQyxDQUFOLElBQVcsSUFBZixFQUFxQjtBQUN4QixnQkFBSUssa0JBQWtCTixLQUFsQixFQUF5QkMsQ0FBekIsRUFBNEIsQ0FBNUIsQ0FBSixFQUFvQztBQUNoQyxvQkFBSU0sT0FBTyxDQUFDUCxNQUFNQyxDQUFOLElBQVcsR0FBWixLQUFvQixFQUFwQixHQUF5QixDQUFDRCxNQUFNQyxJQUFJLENBQVYsSUFBZSxJQUFoQixLQUF5QixDQUFsRCxHQUFzREQsTUFBTUMsSUFBSSxDQUFWLElBQWUsSUFBaEY7QUFDQSxvQkFBSU0sUUFBUSxLQUFSLElBQWlCLENBQUNBLE9BQU8sTUFBUixNQUFvQixNQUF6QyxFQUFpRDtBQUM3Q1Isd0JBQUlJLElBQUosQ0FBU0MsT0FBT0MsWUFBUCxDQUFvQkUsT0FBTyxNQUEzQixDQUFUO0FBQ0FOLHlCQUFLLENBQUw7QUFDQTtBQUNIO0FBQ0o7QUFDSixTQVRNLE1BU0EsSUFBSUQsTUFBTUMsQ0FBTixJQUFXLElBQWYsRUFBcUI7QUFDeEIsZ0JBQUlLLGtCQUFrQk4sS0FBbEIsRUFBeUJDLENBQXpCLEVBQTRCLENBQTVCLENBQUosRUFBb0M7QUFDaEMsb0JBQUlNLFFBQU8sQ0FBQ1AsTUFBTUMsQ0FBTixJQUFXLEdBQVosS0FBb0IsRUFBcEIsR0FBeUIsQ0FBQ0QsTUFBTUMsSUFBSSxDQUFWLElBQWUsSUFBaEIsS0FBeUIsRUFBbEQsR0FDUCxDQUFDRCxNQUFNQyxJQUFJLENBQVYsSUFBZSxJQUFoQixLQUF5QixDQURsQixHQUN1QkQsTUFBTUMsSUFBSSxDQUFWLElBQWUsSUFEakQ7QUFFQSxvQkFBSU0sUUFBTyxPQUFQLElBQWtCQSxRQUFPLFFBQTdCLEVBQXVDO0FBQ25DQSw2QkFBUSxPQUFSO0FBQ0FSLHdCQUFJSSxJQUFKLENBQVNDLE9BQU9DLFlBQVAsQ0FBcUJFLFVBQVMsRUFBVixHQUFnQixNQUFwQyxDQUFUO0FBQ0FSLHdCQUFJSSxJQUFKLENBQVNDLE9BQU9DLFlBQVAsQ0FBcUJFLFFBQU8sS0FBUixHQUFpQixNQUFyQyxDQUFUO0FBQ0FOLHlCQUFLLENBQUw7QUFDQTtBQUNIO0FBQ0o7QUFDSjtBQUNERixZQUFJSSxJQUFKLENBQVNDLE9BQU9DLFlBQVAsQ0FBb0IsTUFBcEIsQ0FBVDtBQUNBLFVBQUVKLENBQUY7QUFDSDs7QUFFRCxXQUFPRixJQUFJUyxJQUFKLENBQVMsRUFBVCxDQUFQO0FBQ0g7O2tCQUVjWCxVIiwiZmlsZSI6IjYuanMiLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBkZWNvZGVVVEY4KHVpbnQ4YXJyYXkpIHtcbiAgICBsZXQgb3V0ID0gW107XG4gICAgbGV0IGlucHV0ID0gdWludDhhcnJheTtcbiAgICBsZXQgaSA9IDA7XG4gICAgbGV0IGxlbmd0aCA9IHVpbnQ4YXJyYXkubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGkgPCBsZW5ndGgpIHtcbiAgICAgICAgaWYgKGlucHV0W2ldIDwgMHg4MCkge1xuICAgICAgICAgICAgb3V0LnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZShpbnB1dFtpXSkpO1xuICAgICAgICAgICAgKytpO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH0gZWxzZSBpZiAoaW5wdXRbaV0gPCAweEMwKSB7XG4gICAgICAgICAgICAvLyBmYWxsdGhyb3VnaFxuICAgICAgICB9IGVsc2UgaWYgKGlucHV0W2ldIDwgMHhFMCkge1xuICAgICAgICAgICAgaWYgKGNoZWNrQ29udGludWF0aW9uKGlucHV0LCBpLCAxKSkge1xuICAgICAgICAgICAgICAgIGxldCB1Y3M0ID0gKGlucHV0W2ldICYgMHgxRikgPDwgNiB8IChpbnB1dFtpICsgMV0gJiAweDNGKTtcbiAgICAgICAgICAgICAgICBpZiAodWNzNCA+PSAweDgwKSB7XG4gICAgICAgICAgICAgICAgICAgIG91dC5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUodWNzNCAmIDB4RkZGRikpO1xuICAgICAgICAgICAgICAgICAgICBpICs9IDI7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChpbnB1dFtpXSA8IDB4RjApIHtcbiAgICAgICAgICAgIGlmIChjaGVja0NvbnRpbnVhdGlvbihpbnB1dCwgaSwgMikpIHtcbiAgICAgICAgICAgICAgICBsZXQgdWNzNCA9IChpbnB1dFtpXSAmIDB4RikgPDwgMTIgfCAoaW5wdXRbaSArIDFdICYgMHgzRikgPDwgNiB8IGlucHV0W2kgKyAyXSAmIDB4M0Y7XG4gICAgICAgICAgICAgICAgaWYgKHVjczQgPj0gMHg4MDAgJiYgKHVjczQgJiAweEY4MDApICE9PSAweEQ4MDApIHtcbiAgICAgICAgICAgICAgICAgICAgb3V0LnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZSh1Y3M0ICYgMHhGRkZGKSk7XG4gICAgICAgICAgICAgICAgICAgIGkgKz0gMztcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGlucHV0W2ldIDwgMHhGOCkge1xuICAgICAgICAgICAgaWYgKGNoZWNrQ29udGludWF0aW9uKGlucHV0LCBpLCAzKSkge1xuICAgICAgICAgICAgICAgIGxldCB1Y3M0ID0gKGlucHV0W2ldICYgMHg3KSA8PCAxOCB8IChpbnB1dFtpICsgMV0gJiAweDNGKSA8PCAxMiB8XG4gICAgICAgICAgICAgICAgICAgIChpbnB1dFtpICsgMl0gJiAweDNGKSA8PCA2IHwgKGlucHV0W2kgKyAzXSAmIDB4M0YpO1xuICAgICAgICAgICAgICAgIGlmICh1Y3M0ID4gMHgxMDAwMCAmJiB1Y3M0IDwgMHgxMTAwMDApIHtcbiAgICAgICAgICAgICAgICAgICAgdWNzNCAtPSAweDEwMDAwO1xuICAgICAgICAgICAgICAgICAgICBvdXQucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlKCh1Y3M0ID4+PiAxMCkgfCAweEQ4MDApKTtcbiAgICAgICAgICAgICAgICAgICAgb3V0LnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZSgodWNzNCAmIDB4M0ZGKSB8IDB4REMwMCkpO1xuICAgICAgICAgICAgICAgICAgICBpICs9IDQ7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBvdXQucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlKDB4RkZGRCkpO1xuICAgICAgICArK2k7XG4gICAgfVxuXG4gICAgcmV0dXJuIG91dC5qb2luKCcnKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZGVjb2RlVVRGODtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9qcy9kZWNvZGVVVEY4LmpzIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/*\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\n *\n * @author zheng qian <xqq@xqq.im>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Exponential-Golomb buffer decoder\nvar ExpGolomb = function () {\n    function ExpGolomb(uint8array) {\n        _classCallCheck(this, ExpGolomb);\n\n        this.TAG = this.constructor.name;\n\n        this._buffer = uint8array;\n        this._buffer_index = 0;\n        this._total_bytes = uint8array.byteLength;\n        this._total_bits = uint8array.byteLength * 8;\n        this._current_word = 0;\n        this._current_word_bits_left = 0;\n    }\n\n    _createClass(ExpGolomb, [{\n        key: 'destroy',\n        value: function destroy() {\n            this._buffer = null;\n        }\n    }, {\n        key: '_fillCurrentWord',\n        value: function _fillCurrentWord() {\n            var buffer_bytes_left = this._total_bytes - this._buffer_index;\n            if (buffer_bytes_left <= 0) throw new IllegalStateException('ExpGolomb: _fillCurrentWord() but no bytes available');\n\n            var bytes_read = Math.min(4, buffer_bytes_left);\n            var word = new Uint8Array(4);\n            word.set(this._buffer.subarray(this._buffer_index, this._buffer_index + bytes_read));\n            this._current_word = new DataView(word.buffer).getUint32(0, false);\n\n            this._buffer_index += bytes_read;\n            this._current_word_bits_left = bytes_read * 8;\n        }\n    }, {\n        key: 'readBits',\n        value: function readBits(bits) {\n            if (bits > 32) throw new InvalidArgumentException('ExpGolomb: readBits() bits exceeded max 32bits!');\n\n            if (bits <= this._current_word_bits_left) {\n                var _result = this._current_word >>> 32 - bits;\n                this._current_word <<= bits;\n                this._current_word_bits_left -= bits;\n                return _result;\n            }\n\n            var result = this._current_word_bits_left ? this._current_word : 0;\n            result = result >>> 32 - this._current_word_bits_left;\n            var bits_need_left = bits - this._current_word_bits_left;\n\n            this._fillCurrentWord();\n            var bits_read_next = Math.min(bits_need_left, this._current_word_bits_left);\n\n            var result2 = this._current_word >>> 32 - bits_read_next;\n            this._current_word <<= bits_read_next;\n            this._current_word_bits_left -= bits_read_next;\n\n            result = result << bits_read_next | result2;\n            return result;\n        }\n    }, {\n        key: 'readBool',\n        value: function readBool() {\n            return this.readBits(1) === 1;\n        }\n    }, {\n        key: 'readByte',\n        value: function readByte() {\n            return this.readBits(8);\n        }\n    }, {\n        key: '_skipLeadingZero',\n        value: function _skipLeadingZero() {\n            var zero_count = void 0;\n            for (zero_count = 0; zero_count < this._current_word_bits_left; zero_count++) {\n                if (0 !== (this._current_word & 0x80000000 >>> zero_count)) {\n                    this._current_word <<= zero_count;\n                    this._current_word_bits_left -= zero_count;\n                    return zero_count;\n                }\n            }\n            this._fillCurrentWord();\n            return zero_count + this._skipLeadingZero();\n        }\n    }, {\n        key: 'readUEG',\n        value: function readUEG() {\n            // unsigned exponential golomb\n            var leading_zeros = this._skipLeadingZero();\n            return this.readBits(leading_zeros + 1) - 1;\n        }\n    }, {\n        key: 'readSEG',\n        value: function readSEG() {\n            // signed exponential golomb\n            var value = this.readUEG();\n            if (value & 0x01) {\n                return value + 1 >>> 1;\n            } else {\n                return -1 * (value >>> 1);\n            }\n        }\n    }]);\n\n    return ExpGolomb;\n}();\n\nexports.default = ExpGolomb;//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar FlvTag = function () {\n    function FlvTag() {\n        _classCallCheck(this, FlvTag);\n\n        this.tagType = -1;\n        this.dataSize = -1;\n        this.Timestamp = -1;\n        this.StreamID = -1;\n        this.body = -1;\n        this.time = -1;\n        this.arr = [];\n    }\n\n    _createClass(FlvTag, [{\n        key: \"getTime\",\n        value: function getTime() {\n            // this.Timestamp.pop();\n            this.arr = [];\n            for (var i = 0; i < this.Timestamp.length; i++) {\n                this.arr.push(this.Timestamp[i].toString(16).length == 1 ? \"0\" + this.Timestamp[i].toString(16) : this.Timestamp[i].toString(16));\n            }\n            this.arr.pop();\n            var time = this.arr.join('');\n            this.time = parseInt(time, 16);\n            return parseInt(time, 16);\n        }\n    }]);\n\n    return FlvTag;\n}();\n\nexports.default = FlvTag;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9qcy9mbHYvZmx2VGFnLmpzPzg1OTgiXSwibmFtZXMiOlsiRmx2VGFnIiwidGFnVHlwZSIsImRhdGFTaXplIiwiVGltZXN0YW1wIiwiU3RyZWFtSUQiLCJib2R5IiwidGltZSIsImFyciIsImkiLCJsZW5ndGgiLCJwdXNoIiwidG9TdHJpbmciLCJwb3AiLCJqb2luIiwicGFyc2VJbnQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7SUFBcUJBLE07QUFDakIsc0JBQWM7QUFBQTs7QUFDVixhQUFLQyxPQUFMLEdBQWUsQ0FBQyxDQUFoQjtBQUNBLGFBQUtDLFFBQUwsR0FBZ0IsQ0FBQyxDQUFqQjtBQUNBLGFBQUtDLFNBQUwsR0FBaUIsQ0FBQyxDQUFsQjtBQUNBLGFBQUtDLFFBQUwsR0FBZ0IsQ0FBQyxDQUFqQjtBQUNBLGFBQUtDLElBQUwsR0FBWSxDQUFDLENBQWI7QUFDQSxhQUFLQyxJQUFMLEdBQVksQ0FBQyxDQUFiO0FBQ0EsYUFBS0MsR0FBTCxHQUFXLEVBQVg7QUFDSDs7OztrQ0FDUztBQUNOO0FBQ0EsaUJBQUtBLEdBQUwsR0FBVyxFQUFYO0FBQ0EsaUJBQUssSUFBSUMsSUFBSSxDQUFiLEVBQWdCQSxJQUFJLEtBQUtMLFNBQUwsQ0FBZU0sTUFBbkMsRUFBMkNELEdBQTNDLEVBQWdEO0FBQzVDLHFCQUFLRCxHQUFMLENBQVNHLElBQVQsQ0FBZSxLQUFLUCxTQUFMLENBQWVLLENBQWYsRUFBa0JHLFFBQWxCLENBQTJCLEVBQTNCLEVBQStCRixNQUEvQixJQUF5QyxDQUF6QyxHQUE2QyxNQUFNLEtBQUtOLFNBQUwsQ0FBZUssQ0FBZixFQUFrQkcsUUFBbEIsQ0FBMkIsRUFBM0IsQ0FBbkQsR0FBb0YsS0FBS1IsU0FBTCxDQUFlSyxDQUFmLEVBQWtCRyxRQUFsQixDQUEyQixFQUEzQixDQUFuRztBQUNIO0FBQ0QsaUJBQUtKLEdBQUwsQ0FBU0ssR0FBVDtBQUNBLGdCQUFJTixPQUFPLEtBQUtDLEdBQUwsQ0FBU00sSUFBVCxDQUFjLEVBQWQsQ0FBWDtBQUNBLGlCQUFLUCxJQUFMLEdBQVlRLFNBQVNSLElBQVQsRUFBZSxFQUFmLENBQVo7QUFDQSxtQkFBT1EsU0FBU1IsSUFBVCxFQUFlLEVBQWYsQ0FBUDtBQUNIOzs7Ozs7a0JBcEJnQk4sTSIsImZpbGUiOiI4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgY2xhc3MgRmx2VGFnIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy50YWdUeXBlID0gLTE7XG4gICAgICAgIHRoaXMuZGF0YVNpemUgPSAtMTtcbiAgICAgICAgdGhpcy5UaW1lc3RhbXAgPSAtMTtcbiAgICAgICAgdGhpcy5TdHJlYW1JRCA9IC0xO1xuICAgICAgICB0aGlzLmJvZHkgPSAtMTtcbiAgICAgICAgdGhpcy50aW1lID0gLTE7XG4gICAgICAgIHRoaXMuYXJyID0gW107XG4gICAgfVxuICAgIGdldFRpbWUoKSB7XG4gICAgICAgIC8vIHRoaXMuVGltZXN0YW1wLnBvcCgpO1xuICAgICAgICB0aGlzLmFyciA9IFtdO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuVGltZXN0YW1wLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB0aGlzLmFyci5wdXNoKCh0aGlzLlRpbWVzdGFtcFtpXS50b1N0cmluZygxNikubGVuZ3RoID09IDEgPyBcIjBcIiArIHRoaXMuVGltZXN0YW1wW2ldLnRvU3RyaW5nKDE2KSA6IHRoaXMuVGltZXN0YW1wW2ldLnRvU3RyaW5nKDE2KSkpXG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5hcnIucG9wKCk7XG4gICAgICAgIGxldCB0aW1lID0gdGhpcy5hcnIuam9pbignJyk7XG4gICAgICAgIHRoaXMudGltZSA9IHBhcnNlSW50KHRpbWUsIDE2KTtcbiAgICAgICAgcmV0dXJuIHBhcnNlSW50KHRpbWUsIDE2KTtcbiAgICB9XG59XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vanMvZmx2L2ZsdlRhZy5qcyJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _decodeUTF = __webpack_require__(6);\n\nvar _decodeUTF2 = _interopRequireDefault(_decodeUTF);\n\nvar _spsParser = __webpack_require__(3);\n\nvar _spsParser2 = _interopRequireDefault(_spsParser);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar le = function () {\n    var buf = new ArrayBuffer(2);\n    new DataView(buf).setInt16(0, 256, true); // little-endian write\n    return new Int16Array(buf)[0] === 256; // platform-spec read, if equal then LE\n}();\n\nvar flvDemux = function () {\n    function flvDemux() {\n        _classCallCheck(this, flvDemux);\n    }\n\n    _createClass(flvDemux, null, [{\n        key: 'parseObject',\n        value: function parseObject(arrayBuffer, dataOffset, dataSize) {\n\n            var name = flvDemux.parseString(arrayBuffer, dataOffset, dataSize);\n            var value = flvDemux.parseScript(arrayBuffer, dataOffset + name.size);\n            var isObjectEnd = value.objectEnd;\n\n            return {\n                data: {\n                    name: name.data,\n                    value: value.data\n                },\n                size: value.size,\n                objectEnd: isObjectEnd\n            };\n        }\n    }, {\n        key: 'parseVariable',\n        value: function parseVariable(arrayBuffer, dataOffset, dataSize) {\n            return flvDemux.parseObject(arrayBuffer, dataOffset, dataSize);\n        }\n    }, {\n        key: 'parseLongString',\n        value: function parseLongString(arrayBuffer, dataOffset, dataSize) {\n            if (dataSize < 4) {\n                throw new IllegalStateException('Data not enough when parse LongString');\n            }\n            var v = new DataView(arrayBuffer, dataOffset);\n            var length = v.getUint32(0, !le);\n\n            var str = void 0;\n            if (length > 0) {\n                str = (0, _decodeUTF2.default)(new Uint8Array(arrayBuffer, dataOffset + 4, length));\n            } else {\n                str = '';\n            }\n\n            return {\n                data: str,\n                size: 4 + length\n            };\n        }\n    }, {\n        key: 'parseDate',\n        value: function parseDate(arrayBuffer, dataOffset, dataSize) {\n            if (dataSize < 10) {\n                throw new IllegalStateException('Data size invalid when parse Date');\n            }\n            var v = new DataView(arrayBuffer, dataOffset);\n            var timestamp = v.getFloat64(0, !le);\n            var localTimeOffset = v.getInt16(8, !le);\n            timestamp += localTimeOffset * 60 * 1000; // get UTC time\n\n            return {\n                data: new Date(timestamp),\n                size: 8 + 2\n            };\n        }\n    }, {\n        key: 'parseString',\n        value: function parseString(arrayBuffer, dataOffset, dataSize) {\n            var v = new DataView(arrayBuffer, dataOffset);\n            var length = v.getUint16(0, !le);\n            var str = void 0;\n            if (length > 0) {\n                str = (0, _decodeUTF2.default)(new Uint8Array(arrayBuffer, dataOffset + 2, length));\n            } else {\n                str = '';\n            }\n            return {\n                data: str,\n                size: 2 + length\n            };\n        }\n\n        /**\n         * 解析metadata\n         */\n\n    }, {\n        key: 'parseMetadata',\n        value: function parseMetadata(arr) {\n            var name = flvDemux.parseScript(arr, 0);\n            var value = flvDemux.parseScript(arr, name.size, arr.length - name.size);\n            // return {}\n            var data = {};\n            data[name.data] = value.data;\n            return data;\n        }\n    }, {\n        key: 'parseScript',\n        value: function parseScript(arr, offset, dataSize) {\n            var dataOffset = offset;\n            var object = {};\n            var uint8 = new Uint8Array(arr);\n            var buffer = uint8.buffer;\n            var dv = new DataView(buffer, 0, dataSize);\n            var value = null;\n            var objectEnd = false;\n            var type = dv.getUint8(dataOffset);\n            dataOffset += 1;\n            switch (type) {\n                case 0:\n                    // Number(Double) type\n                    value = dv.getFloat64(dataOffset, !le);\n                    dataOffset += 8;\n                    break;\n                case 1:\n                    {\n                        // Boolean type\n                        var b = dv.getUint8(dataOffset);\n                        value = b ? true : false;\n                        dataOffset += 1;\n                        break;\n                    }\n                case 2:\n                    {\n                        // String type\n                        // dataOffset += 1;\n                        var amfstr = flvDemux.parseString(buffer, dataOffset);\n                        value = amfstr.data;\n                        dataOffset += amfstr.size;\n                        break;\n                    }\n                case 3:\n\n                    {\n                        // Object(s) type\n                        value = {};\n                        var terminal = 0; // workaround for malformed Objects which has missing ScriptDataObjectEnd\n                        if ((dv.getUint32(dataSize - 4, !le) & 0x00FFFFFF) === 9) {\n                            terminal = 3;\n                        }\n                        while (offset < dataSize - 4) {\n                            // 4 === type(UI8) + ScriptDataObjectEnd(UI24)\n                            var amfobj = flvDemux.parseObject(buffer, dataOffset, dataSize - offset - terminal);\n\n                            if (amfobj.objectEnd) break;\n                            value[amfobj.data.name] = amfobj.data.value;\n                            // dataOffset += amfobj.size;\n                            dataOffset = amfobj.size;\n                        }\n                        if (offset <= dataSize - 3) {\n                            var marker = v.getUint32(dataOffset - 1, !le) & 0x00FFFFFF;\n                            if (marker === 9) {\n                                dataOffset += 3;\n                            }\n                        }\n                        break;\n                    }\n                case 8:\n                    {\n                        // ECMA array type (Mixed array)\n                        value = {};\n                        // dataOffset += 1;\n                        dataOffset += 4; // ECMAArrayLength(UI32)\n                        var _terminal = 0; // workaround for malformed MixedArrays which has missing ScriptDataObjectEnd\n                        if ((dv.getUint32(dataSize - 4, !le) & 0x00FFFFFF) === 9) {\n                            _terminal = 3;\n                        }\n                        while (dataOffset < dataSize - 8) {\n                            // 8 === type(UI8) + ECMAArrayLength(UI32) + ScriptDataVariableEnd(UI24)\n                            var amfvar = flvDemux.parseVariable(buffer, dataOffset);\n\n                            if (amfvar.objectEnd) break;\n                            value[amfvar.data.name] = amfvar.data.value;\n                            dataOffset = amfvar.size;\n                        }\n                        if (dataOffset <= dataSize - 3) {\n                            var _marker = dv.getUint32(dataOffset - 1, !le) & 0x00FFFFFF;\n                            if (_marker === 9) {\n                                dataOffset += 3;\n                            }\n                        }\n                        break;\n                    }\n                case 9:\n                    // ScriptDataObjectEnd\n                    value = undefined;\n                    dataOffset = 1;\n                    objectEnd = true;\n                    break;\n                case 10:\n                    {\n                        // Strict array type\n                        // ScriptDataValue[n]. NOTE: according to video_file_format_spec_v10_1.pdf\n                        value = [];\n                        var strictArrayLength = dv.getUint32(dataOffset, !le);\n                        dataOffset += 4;\n                        for (var i = 0; i < strictArrayLength; i++) {\n                            var val = flvDemux.parseScript(buffer, dataOffset);\n                            value.push(val.data);\n                            dataOffset = val.size;\n                        }\n                        break;\n                    }\n                case 11:\n                    {\n                        // Date type\n                        var date = flvDemux.parseDate(buffer, dataOffset + 1, dataSize - 1);\n                        value = date.data;\n                        dataOffset += date.size;\n                        break;\n                    }\n                case 12:\n                    {\n                        // Long string type\n                        var amfLongStr = flvDemux.parseString(buffer, dataOffset + 1, dataSize - 1);\n                        value = amfLongStr.data;\n                        dataOffset += amfLongStr.size;\n                        break;\n                    }\n                default:\n                    // ignore and skip\n                    dataOffset = dataSize;\n                    console.log('AMF', 'Unsupported AMF value type ' + type);\n            }\n            return {\n                data: value,\n                size: dataOffset\n            };\n        }\n    }]);\n\n    return flvDemux;\n}();\n\nexports.default = flvDemux;//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/*\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\n *\n * @author zheng qian <xqq@xqq.im>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar MediaInfo = function () {\n    function MediaInfo() {\n        _classCallCheck(this, MediaInfo);\n\n        this.mimeType = null;\n        this.duration = null;\n\n        this.hasAudio = null;\n        this.hasVideo = null;\n        this.audioCodec = null;\n        this.videoCodec = null;\n        this.audioDataRate = null;\n        this.videoDataRate = null;\n\n        this.audioSampleRate = null;\n        this.audioChannelCount = null;\n\n        this.width = null;\n        this.height = null;\n        this.fps = null;\n        this.profile = null;\n        this.level = null;\n        this.chromaFormat = null;\n        this.sarNum = null;\n        this.sarDen = null;\n\n        this.metadata = null;\n        this.segments = null; // MediaInfo[]\n        this.segmentCount = null;\n        this.hasKeyframesIndex = null;\n        this.keyframesIndex = null;\n    }\n\n    _createClass(MediaInfo, [{\n        key: \"isComplete\",\n        value: function isComplete() {\n            var audioInfoComplete = this.hasAudio === false || this.hasAudio === true && this.audioCodec != null && this.audioSampleRate != null && this.audioChannelCount != null;\n\n            var videoInfoComplete = this.hasVideo === false || this.hasVideo === true && this.videoCodec != null && this.width != null && this.height != null && this.fps != null && this.profile != null && this.level != null && this.chromaFormat != null && this.sarNum != null && this.sarDen != null;\n\n            // keyframesIndex may not be present\n            return this.mimeType != null && this.duration != null && this.metadata != null && this.hasKeyframesIndex != null && audioInfoComplete && videoInfoComplete;\n        }\n    }, {\n        key: \"isSeekable\",\n        value: function isSeekable() {\n            return this.hasKeyframesIndex === true;\n        }\n    }, {\n        key: \"getNearestKeyframe\",\n        value: function getNearestKeyframe(milliseconds) {\n            if (this.keyframesIndex == null) {\n                return null;\n            }\n\n            var table = this.keyframesIndex;\n            var keyframeIdx = this._search(table.times, milliseconds);\n\n            return {\n                index: keyframeIdx,\n                milliseconds: table.times[keyframeIdx],\n                fileposition: table.filepositions[keyframeIdx]\n            };\n        }\n    }, {\n        key: \"_search\",\n        value: function _search(list, value) {\n            var idx = 0;\n\n            var last = list.length - 1;\n            var mid = 0;\n            var lbound = 0;\n            var ubound = last;\n\n            if (value < list[0]) {\n                idx = 0;\n                lbound = ubound + 1; // skip search\n            }\n\n            while (lbound <= ubound) {\n                mid = lbound + Math.floor((ubound - lbound) / 2);\n                if (mid === last || value >= list[mid] && value < list[mid + 1]) {\n                    idx = mid;\n                    break;\n                } else if (list[mid] < value) {\n                    lbound = mid + 1;\n                } else {\n                    ubound = mid - 1;\n                }\n            }\n\n            return idx;\n        }\n    }]);\n\n    return MediaInfo;\n}();\n\nexports.default = MediaInfo;//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _flvParse = __webpack_require__(2);\n\nvar _flvParse2 = _interopRequireDefault(_flvParse);\n\nvar _tagdemux = __webpack_require__(0);\n\nvar _tagdemux2 = _interopRequireDefault(_tagdemux);\n\nvar _mp4remux = __webpack_require__(1);\n\nvar _mp4remux2 = _interopRequireDefault(_mp4remux);\n\nvar _mp4moof = __webpack_require__(4);\n\nvar _mp4moof2 = _interopRequireDefault(_mp4moof);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar flv2fmp4 = function () {\n\n    /**\n     * Creates an instance of flv2fmp4.\n     * config 里面有_isLive属性,是否是直播\n     * @param {any} config \n     * \n     * @memberof flv2fmp4\n     */\n    function flv2fmp4(config) {\n        _classCallCheck(this, flv2fmp4);\n\n        this._config = { _isLive: false };\n        this._config = Object.assign(this._config, config);\n\n        //外部方法赋值\n        this.onInitSegment = null;\n        this.onMediaSegment = null;\n        this.onMediaInfo = null;\n        this.seekCallBack = null;\n\n        //内部使用\n        this.loadmetadata = false;\n        this.ftyp_moov = null;\n        this.metaSuccRun = false;\n        this.metas = [];\n        this.parseChunk = null;\n        //临时记录seek时间\n        this._pendingResolveSeekPoint = -1;\n\n        //临时记录flv数据起始时间\n        this._tempBaseTime = 0;\n\n        //处理flv数据入口\n        this.setflvBase = this.setflvBasefrist;\n\n        _tagdemux2.default._onTrackMetadata = this.Metadata.bind(this);\n        _tagdemux2.default._onMediaInfo = this.metaSucc.bind(this);\n        _tagdemux2.default._onDataAvailable = this.onDataAvailable.bind(this);\n        this.m4mof = new _mp4moof2.default(this._config);\n        this.m4mof.onMediaSegment = this.onMdiaSegment.bind(this);\n    }\n\n    _createClass(flv2fmp4, [{\n        key: 'seek',\n        value: function seek() {\n            this.setflvBase = this.setflvBasefrist;\n        }\n\n        /**\n         * 不要主动调用这个接口!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n         * 第一次接受数据,和seek时候接受数据入口,\n         * \n         * @param {any} arraybuff \n         * @param {any} baseTime \n         * @returns \n         * \n         * @memberof flv2fmp4\n         */\n\n    }, {\n        key: 'setflvBasefrist',\n        value: function setflvBasefrist(arraybuff, baseTime) {\n            if (baseTime == undefined || baseTime == 0) {\n                baseTime = 0;\n                this._pendingResolveSeekPoint = -1;\n            }\n            if (this._tempBaseTime != baseTime) {\n                this._tempBaseTime = baseTime;\n                _tagdemux2.default._timestampBase = baseTime;\n                this.m4mof.seek(baseTime);\n                this.m4mof.insertDiscontinuity();\n                this._pendingResolveSeekPoint = baseTime;\n            }\n\n            var offset = _flvParse2.default.setFlv(new Uint8Array(arraybuff));\n\n            if (_flvParse2.default.arrTag.length > 0) {\n                if (this._tempBaseTime != 0 && this._tempBaseTime == _flvParse2.default.arrTag[0].getTime()) {\n                    _tagdemux2.default._timestampBase = 0;\n                }\n                _tagdemux2.default.moofTag(_flvParse2.default.arrTag);\n                this.setflvBase = this.setflvBaseUsually;\n            }\n\n            return offset;\n        }\n\n        /**\n         * 不要主动调用这个接口!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n         * 后续接受数据接口\n         * @param {any} arraybuff \n         * @param {any} baseTime \n         * @returns \n         * \n         * @memberof flv2fmp4\n         */\n\n    }, {\n        key: 'setflvBaseUsually',\n        value: function setflvBaseUsually(arraybuff, baseTime) {\n            var offset = _flvParse2.default.setFlv(new Uint8Array(arraybuff));\n\n            if (_flvParse2.default.arrTag.length > 0) {\n                _tagdemux2.default.moofTag(_flvParse2.default.arrTag);\n            }\n\n            return offset;\n        }\n\n        /**\n         * 不要主动调用这个接口!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n         * moof回调\n         * \n         * @param {any} track \n         * @param {any} value \n         * \n         * @memberof flv2fmp4\n         */\n\n    }, {\n        key: 'onMdiaSegment',\n        value: function onMdiaSegment(track, value) {\n\n            if (this.onMediaSegment) {\n                this.onMediaSegment(new Uint8Array(value.data));\n            }\n            if (this._pendingResolveSeekPoint != -1 && track == 'video') {\n                var seekpoint = this._pendingResolveSeekPoint;\n                this._pendingResolveSeekPoint = -1;\n                if (this.seekCallBack) {\n                    this.seekCallBack(seekpoint);\n                }\n            }\n        }\n\n        /**\n         * \n         * 音频和视频的初始化tag\n         * \n         * @param {any} type \n         * @param {any} meta \n         * \n         * @memberof flv2fmp4\n         */\n\n    }, {\n        key: 'Metadata',\n        value: function Metadata(type, meta) {\n            switch (type) {\n                case 'video':\n                    this.metas.push(meta);\n                    this.m4mof._videoMeta = meta;\n                    break;\n                case 'audio':\n                    this.metas.push(meta);\n                    this.m4mof._audioMeta = meta;\n                    break;\n            }\n            if (this.metaSuccRun && this.metas.length > 1) {\n                this.metaSucc();\n            }\n        }\n\n        /**\n         * metadata解读成功后触发及第一个视频tag和第一个音频tag\n         * \n         * @param {any} mi \n         * @returns \n         * \n         * @memberof flv2fmp4\n         */\n\n    }, {\n        key: 'metaSucc',\n        value: function metaSucc(mi) {\n            if (this.onMediaInfo) {\n                this.onMediaInfo(mi);\n            }\n            //获取ftyp和moov\n            if (this.metas.length == 0) {\n                this.metaSuccRun = true;\n                return;\n            }\n\n            this.ftyp_moov = _mp4remux2.default.generateInitSegment(this.metas);\n            if (this.onInitSegment && this.loadmetadata == false) {\n\n                this.onInitSegment(this.ftyp_moov);\n                this.loadmetadata = true;\n            }\n        }\n    }, {\n        key: 'onDataAvailable',\n        value: function onDataAvailable(audiotrack, videotrack) {\n            this.m4mof.remux(audiotrack, videotrack);\n        }\n\n        /**\n         * 传入flv的二进制数据\n         * 统一入口\n         * @param {any} arraybuff \n         * @param {any} baseTime flv数据开始时间\n         * @returns \n         * \n         * @memberof flv2fmp4\n         */\n\n    }, {\n        key: 'setflv',\n        value: function setflv(arraybuff, baseTime) {\n            return this.setflvBase(arraybuff, baseTime);\n        }\n\n        /**\n         * \n         * 本地调试代码,不用理会\n         * @param {any} arraybuff \n         * @returns \n         * \n         * @memberof flv2fmp4\n         */\n\n    }, {\n        key: 'setflvloc',\n        value: function setflvloc(arraybuff) {\n            var offset = _flvParse2.default.setFlv(new Uint8Array(arraybuff));\n\n            if (_flvParse2.default.arrTag.length > 0) {\n                return _flvParse2.default.arrTag;\n            }\n        }\n    }]);\n\n    return flv2fmp4;\n}();\n\n/**\n * 封装的对外类,有些方法不想对外暴露,所以封装这么一个类\n * \n * @class foreign\n */\n\n\nvar foreign = function () {\n    function foreign(config) {\n        _classCallCheck(this, foreign);\n\n        this.f2m = new flv2fmp4(config);\n        //外部方法赋值\n        this._onInitSegment = null;\n        this._onMediaSegment = null;\n        this._onMediaInfo = null;\n        this._seekCallBack = null;\n    }\n\n    /**\n     * \n     * 跳转\n     * \n     * @memberof foreign\n     */\n\n\n    _createClass(foreign, [{\n        key: 'seek',\n        value: function seek() {\n            this.f2m.seek();\n        }\n\n        /**\n         * 传入flv的二进制数据\n         * 统一入口\n         * @param {any} arraybuff \n         * @param {any} baseTime flv数据开始时间\n         * @returns \n         * \n         * @memberof flv2fmp4\n         */\n\n    }, {\n        key: 'setflv',\n        value: function setflv(arraybuff, baseTime) {\n            return this.f2m.setflv(arraybuff, baseTime);\n        }\n\n        /**\n         * \n         * 本地调试代码,不用理会\n         * @param {any} arraybuff \n         * @returns \n         * \n         * @memberof flv2fmp4\n         */\n\n    }, {\n        key: 'setflvloc',\n        value: function setflvloc(arraybuff) {\n            return this.f2m.setflvloc(arraybuff);\n        }\n\n        /**\n         * 赋值初始化seg接受方法\n         * \n         * \n         * @memberof foreign\n         */\n\n    }, {\n        key: 'onInitSegment',\n        set: function set(fun) {\n            this._onInitSegment = fun;\n            this.f2m.onInitSegment = fun;\n        }\n\n        /**\n         * 赋值moof接受方法\n         * \n         * \n         * @memberof foreign\n         */\n\n    }, {\n        key: 'onMediaSegment',\n        set: function set(fun) {\n            this._onMediaSegment = fun;\n            this.f2m.onMediaSegment = fun;\n        }\n\n        /**\n         * 赋值metadata接受方法\n         * \n         * \n         * @memberof foreign\n         */\n\n    }, {\n        key: 'onMediaInfo',\n        set: function set(fun) {\n            this._onMediaInfo = fun;\n            this.f2m.onMediaInfo = fun;\n        }\n\n        /**\n         * 赋值是否跳转回调接受方法\n         * \n         * \n         * @memberof foreign\n         */\n\n    }, {\n        key: 'seekCallBack',\n        set: function set(fun) {\n            this._seekCallBack = fun;\n            this.f2m.seekCallBack = fun;\n        }\n    }]);\n\n    return foreign;\n}();\n\nexports.default = foreign;//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/*\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\n *\n * This file is modified from dailymotion's hls.js library (hls.js/src/helper/aac.js)\n * @author zheng qian <xqq@xqq.im>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar AAC = function () {\n    function AAC() {\n        _classCallCheck(this, AAC);\n    }\n\n    _createClass(AAC, null, [{\n        key: \"getSilentFrame\",\n        value: function getSilentFrame(channelCount) {\n            if (channelCount === 1) {\n                return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x23, 0x80]);\n            } else if (channelCount === 2) {\n                return new Uint8Array([0x21, 0x00, 0x49, 0x90, 0x02, 0x19, 0x00, 0x23, 0x80]);\n            } else if (channelCount === 3) {\n                return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64, 0x00, 0x8e]);\n            } else if (channelCount === 4) {\n                return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64, 0x00, 0x80, 0x2c, 0x80, 0x08, 0x02, 0x38]);\n            } else if (channelCount === 5) {\n                return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64, 0x00, 0x82, 0x30, 0x04, 0x99, 0x00, 0x21, 0x90, 0x02, 0x38]);\n            } else if (channelCount === 6) {\n                return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64, 0x00, 0x82, 0x30, 0x04, 0x99, 0x00, 0x21, 0x90, 0x02, 0x00, 0xb2, 0x00, 0x20, 0x08, 0xe0]);\n            }\n            return null;\n        }\n    }]);\n\n    return AAC;\n}();\n\nexports.default = AAC;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9qcy9tcDQvYWFjLXNpbGVudC5qcz84YWU3Il0sIm5hbWVzIjpbIkFBQyIsImNoYW5uZWxDb3VudCIsIlVpbnQ4QXJyYXkiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7OztJQW1CTUEsRzs7Ozs7Ozt1Q0FFb0JDLFksRUFBYztBQUNoQyxnQkFBSUEsaUJBQWlCLENBQXJCLEVBQXdCO0FBQ3BCLHVCQUFPLElBQUlDLFVBQUosQ0FBZSxDQUFDLElBQUQsRUFBTyxJQUFQLEVBQWEsSUFBYixFQUFtQixJQUFuQixFQUF5QixJQUF6QixFQUErQixJQUEvQixDQUFmLENBQVA7QUFDSCxhQUZELE1BRU8sSUFBSUQsaUJBQWlCLENBQXJCLEVBQXdCO0FBQzNCLHVCQUFPLElBQUlDLFVBQUosQ0FBZSxDQUFDLElBQUQsRUFBTyxJQUFQLEVBQWEsSUFBYixFQUFtQixJQUFuQixFQUF5QixJQUF6QixFQUErQixJQUEvQixFQUFxQyxJQUFyQyxFQUEyQyxJQUEzQyxFQUFpRCxJQUFqRCxDQUFmLENBQVA7QUFDSCxhQUZNLE1BRUEsSUFBSUQsaUJBQWlCLENBQXJCLEVBQXdCO0FBQzNCLHVCQUFPLElBQUlDLFVBQUosQ0FBZSxDQUFDLElBQUQsRUFBTyxJQUFQLEVBQWEsSUFBYixFQUFtQixJQUFuQixFQUF5QixJQUF6QixFQUErQixJQUEvQixFQUFxQyxJQUFyQyxFQUEyQyxJQUEzQyxFQUFpRCxJQUFqRCxFQUF1RCxJQUF2RCxFQUE2RCxJQUE3RCxFQUFtRSxJQUFuRSxFQUF5RSxJQUF6RSxDQUFmLENBQVA7QUFDSCxhQUZNLE1BRUEsSUFBSUQsaUJBQWlCLENBQXJCLEVBQXdCO0FBQzNCLHVCQUFPLElBQUlDLFVBQUosQ0FBZSxDQUFDLElBQUQsRUFBTyxJQUFQLEVBQWEsSUFBYixFQUFtQixJQUFuQixFQUF5QixJQUF6QixFQUErQixJQUEvQixFQUFxQyxJQUFyQyxFQUEyQyxJQUEzQyxFQUFpRCxJQUFqRCxFQUF1RCxJQUF2RCxFQUE2RCxJQUE3RCxFQUFtRSxJQUFuRSxFQUF5RSxJQUF6RSxFQUErRSxJQUEvRSxFQUFxRixJQUFyRixFQUEyRixJQUEzRixFQUFpRyxJQUFqRyxFQUF1RyxJQUF2RyxDQUFmLENBQVA7QUFDSCxhQUZNLE1BRUEsSUFBSUQsaUJBQWlCLENBQXJCLEVBQXdCO0FBQzNCLHVCQUFPLElBQUlDLFVBQUosQ0FBZSxDQUFDLElBQUQsRUFBTyxJQUFQLEVBQWEsSUFBYixFQUFtQixJQUFuQixFQUF5QixJQUF6QixFQUErQixJQUEvQixFQUFxQyxJQUFyQyxFQUEyQyxJQUEzQyxFQUFpRCxJQUFqRCxFQUF1RCxJQUF2RCxFQUE2RCxJQUE3RCxFQUFtRSxJQUFuRSxFQUF5RSxJQUF6RSxFQUErRSxJQUEvRSxFQUFxRixJQUFyRixFQUEyRixJQUEzRixFQUFpRyxJQUFqRyxFQUF1RyxJQUF2RyxFQUE2RyxJQUE3RyxFQUFtSCxJQUFuSCxFQUF5SCxJQUF6SCxDQUFmLENBQVA7QUFDSCxhQUZNLE1BRUEsSUFBSUQsaUJBQWlCLENBQXJCLEVBQXdCO0FBQzNCLHVCQUFPLElBQUlDLFVBQUosQ0FBZSxDQUFDLElBQUQsRUFBTyxJQUFQLEVBQWEsSUFBYixFQUFtQixJQUFuQixFQUF5QixJQUF6QixFQUErQixJQUEvQixFQUFxQyxJQUFyQyxFQUEyQyxJQUEzQyxFQUFpRCxJQUFqRCxFQUF1RCxJQUF2RCxFQUE2RCxJQUE3RCxFQUFtRSxJQUFuRSxFQUF5RSxJQUF6RSxFQUErRSxJQUEvRSxFQUFxRixJQUFyRixFQUEyRixJQUEzRixFQUFpRyxJQUFqRyxFQUF1RyxJQUF2RyxFQUE2RyxJQUE3RyxFQUFtSCxJQUFuSCxFQUF5SCxJQUF6SCxFQUErSCxJQUEvSCxFQUFxSSxJQUFySSxFQUEySSxJQUEzSSxFQUFpSixJQUFqSixFQUF1SixJQUF2SixDQUFmLENBQVA7QUFDSDtBQUNELG1CQUFPLElBQVA7QUFDSDs7Ozs7O2tCQUlVRixHIiwiZmlsZSI6IjEyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCAoQykgMjAxNiBCaWxpYmlsaS4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBUaGlzIGZpbGUgaXMgbW9kaWZpZWQgZnJvbSBkYWlseW1vdGlvbidzIGhscy5qcyBsaWJyYXJ5IChobHMuanMvc3JjL2hlbHBlci9hYWMuanMpXG4gKiBAYXV0aG9yIHpoZW5nIHFpYW4gPHhxcUB4cXEuaW0+XG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmNsYXNzIEFBQyB7XG5cbiAgICBzdGF0aWMgZ2V0U2lsZW50RnJhbWUoY2hhbm5lbENvdW50KSB7XG4gICAgICAgIGlmIChjaGFubmVsQ291bnQgPT09IDEpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShbMHgwMCwgMHhjOCwgMHgwMCwgMHg4MCwgMHgyMywgMHg4MF0pO1xuICAgICAgICB9IGVsc2UgaWYgKGNoYW5uZWxDb3VudCA9PT0gMikge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KFsweDIxLCAweDAwLCAweDQ5LCAweDkwLCAweDAyLCAweDE5LCAweDAwLCAweDIzLCAweDgwXSk7XG4gICAgICAgIH0gZWxzZSBpZiAoY2hhbm5lbENvdW50ID09PSAzKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoWzB4MDAsIDB4YzgsIDB4MDAsIDB4ODAsIDB4MjAsIDB4ODQsIDB4MDEsIDB4MjYsIDB4NDAsIDB4MDgsIDB4NjQsIDB4MDAsIDB4OGVdKTtcbiAgICAgICAgfSBlbHNlIGlmIChjaGFubmVsQ291bnQgPT09IDQpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShbMHgwMCwgMHhjOCwgMHgwMCwgMHg4MCwgMHgyMCwgMHg4NCwgMHgwMSwgMHgyNiwgMHg0MCwgMHgwOCwgMHg2NCwgMHgwMCwgMHg4MCwgMHgyYywgMHg4MCwgMHgwOCwgMHgwMiwgMHgzOF0pO1xuICAgICAgICB9IGVsc2UgaWYgKGNoYW5uZWxDb3VudCA9PT0gNSkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KFsweDAwLCAweGM4LCAweDAwLCAweDgwLCAweDIwLCAweDg0LCAweDAxLCAweDI2LCAweDQwLCAweDA4LCAweDY0LCAweDAwLCAweDgyLCAweDMwLCAweDA0LCAweDk5LCAweDAwLCAweDIxLCAweDkwLCAweDAyLCAweDM4XSk7XG4gICAgICAgIH0gZWxzZSBpZiAoY2hhbm5lbENvdW50ID09PSA2KSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoWzB4MDAsIDB4YzgsIDB4MDAsIDB4ODAsIDB4MjAsIDB4ODQsIDB4MDEsIDB4MjYsIDB4NDAsIDB4MDgsIDB4NjQsIDB4MDAsIDB4ODIsIDB4MzAsIDB4MDQsIDB4OTksIDB4MDAsIDB4MjEsIDB4OTAsIDB4MDIsIDB4MDAsIDB4YjIsIDB4MDAsIDB4MjAsIDB4MDgsIDB4ZTBdKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgQUFDO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2pzL21wNC9hYWMtc2lsZW50LmpzIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/*\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\n *\n * @author zheng qian <xqq@xqq.im>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Represents an media sample (audio / video)\nvar SampleInfo = exports.SampleInfo = function SampleInfo(dts, pts, duration, originalDts, isSync) {\n    _classCallCheck(this, SampleInfo);\n\n    this.dts = dts;\n    this.pts = pts;\n    this.duration = duration;\n    this.originalDts = originalDts;\n    this.isSyncPoint = isSync;\n    this.fileposition = null;\n};\n\n// Media Segment concept is defined in Media Source Extensions spec.\n// Particularly in ISO BMFF format, an Media Segment contains a moof box followed by a mdat box.\n\n\nvar MediaSegmentInfo = exports.MediaSegmentInfo = function () {\n    function MediaSegmentInfo() {\n        _classCallCheck(this, MediaSegmentInfo);\n\n        this.beginDts = 0;\n        this.endDts = 0;\n        this.beginPts = 0;\n        this.endPts = 0;\n        this.originalBeginDts = 0;\n        this.originalEndDts = 0;\n        this.syncPoints = []; // SampleInfo[n], for video IDR frames only\n        this.firstSample = null; // SampleInfo\n        this.lastSample = null; // SampleInfo\n    }\n\n    _createClass(MediaSegmentInfo, [{\n        key: \"appendSyncPoint\",\n        value: function appendSyncPoint(sampleInfo) {\n            // also called Random Access Point\n            sampleInfo.isSyncPoint = true;\n            this.syncPoints.push(sampleInfo);\n        }\n    }]);\n\n    return MediaSegmentInfo;\n}();\n\n// Ordered list for recording video IDR frames, sorted by originalDts\n\n\nvar IDRSampleList = exports.IDRSampleList = function () {\n    function IDRSampleList() {\n        _classCallCheck(this, IDRSampleList);\n\n        this._list = [];\n    }\n\n    _createClass(IDRSampleList, [{\n        key: \"clear\",\n        value: function clear() {\n            this._list = [];\n        }\n    }, {\n        key: \"appendArray\",\n        value: function appendArray(syncPoints) {\n            var list = this._list;\n\n            if (syncPoints.length === 0) {\n                return;\n            }\n\n            if (list.length > 0 && syncPoints[0].originalDts < list[list.length - 1].originalDts) {\n                this.clear();\n            }\n\n            Array.prototype.push.apply(list, syncPoints);\n        }\n    }, {\n        key: \"getLastSyncPointBeforeDts\",\n        value: function getLastSyncPointBeforeDts(dts) {\n            if (this._list.length == 0) {\n                return null;\n            }\n\n            var list = this._list;\n            var idx = 0;\n            var last = list.length - 1;\n            var mid = 0;\n            var lbound = 0;\n            var ubound = last;\n\n            if (dts < list[0].dts) {\n                idx = 0;\n                lbound = ubound + 1;\n            }\n\n            while (lbound <= ubound) {\n                mid = lbound + Math.floor((ubound - lbound) / 2);\n                if (mid === last || dts >= list[mid].dts && dts < list[mid + 1].dts) {\n                    idx = mid;\n                    break;\n                } else if (list[mid].dts < dts) {\n                    lbound = mid + 1;\n                } else {\n                    ubound = mid - 1;\n                }\n            }\n            return this._list[idx];\n        }\n    }]);\n\n    return IDRSampleList;\n}();\n\n// Data structure for recording information of media segments in single track.\n\n\nvar MediaSegmentInfoList = exports.MediaSegmentInfoList = function () {\n    function MediaSegmentInfoList(type) {\n        _classCallCheck(this, MediaSegmentInfoList);\n\n        this._type = type;\n        this._list = [];\n        this._lastAppendLocation = -1; // cached last insert location\n    }\n\n    _createClass(MediaSegmentInfoList, [{\n        key: \"isEmpty\",\n        value: function isEmpty() {\n            return this._list.length === 0;\n        }\n    }, {\n        key: \"clear\",\n        value: function clear() {\n            this._list = [];\n            this._lastAppendLocation = -1;\n        }\n    }, {\n        key: \"_searchNearestSegmentBefore\",\n        value: function _searchNearestSegmentBefore(originalBeginDts) {\n            var list = this._list;\n            if (list.length === 0) {\n                return -2;\n            }\n            var last = list.length - 1;\n            var mid = 0;\n            var lbound = 0;\n            var ubound = last;\n\n            var idx = 0;\n\n            if (originalBeginDts < list[0].originalBeginDts) {\n                idx = -1;\n                return idx;\n            }\n\n            while (lbound <= ubound) {\n                mid = lbound + Math.floor((ubound - lbound) / 2);\n                if (mid === last || originalBeginDts > list[mid].lastSample.originalDts && originalBeginDts < list[mid + 1].originalBeginDts) {\n                    idx = mid;\n                    break;\n                } else if (list[mid].originalBeginDts < originalBeginDts) {\n                    lbound = mid + 1;\n                } else {\n                    ubound = mid - 1;\n                }\n            }\n            return idx;\n        }\n    }, {\n        key: \"_searchNearestSegmentAfter\",\n        value: function _searchNearestSegmentAfter(originalBeginDts) {\n            return this._searchNearestSegmentBefore(originalBeginDts) + 1;\n        }\n    }, {\n        key: \"append\",\n        value: function append(mediaSegmentInfo) {\n            var list = this._list;\n            var msi = mediaSegmentInfo;\n            var lastAppendIdx = this._lastAppendLocation;\n            var insertIdx = 0;\n\n            if (lastAppendIdx !== -1 && lastAppendIdx < list.length && msi.originalBeginDts >= list[lastAppendIdx].lastSample.originalDts && (lastAppendIdx === list.length - 1 || lastAppendIdx < list.length - 1 && msi.originalBeginDts < list[lastAppendIdx + 1].originalBeginDts)) {\n                insertIdx = lastAppendIdx + 1; // use cached location idx\n            } else {\n                if (list.length > 0) {\n                    insertIdx = this._searchNearestSegmentBefore(msi.originalBeginDts) + 1;\n                }\n            }\n\n            this._lastAppendLocation = insertIdx;\n            this._list.splice(insertIdx, 0, msi);\n        }\n    }, {\n        key: \"getLastSegmentBefore\",\n        value: function getLastSegmentBefore(originalBeginDts) {\n            var idx = this._searchNearestSegmentBefore(originalBeginDts);\n            if (idx >= 0) {\n                return this._list[idx];\n            } else {\n                // -1\n                return null;\n            }\n        }\n    }, {\n        key: \"getLastSampleBefore\",\n        value: function getLastSampleBefore(originalBeginDts) {\n            var segment = this.getLastSegmentBefore(originalBeginDts);\n            if (segment != null) {\n                return segment.lastSample;\n            } else {\n                return null;\n            }\n        }\n    }, {\n        key: \"getLastSyncPointBefore\",\n        value: function getLastSyncPointBefore(originalBeginDts) {\n            var segmentIdx = this._searchNearestSegmentBefore(originalBeginDts);\n            var syncPoints = this._list[segmentIdx].syncPoints;\n            while (syncPoints.length === 0 && segmentIdx > 0) {\n                segmentIdx--;\n                syncPoints = this._list[segmentIdx].syncPoints;\n            }\n            if (syncPoints.length > 0) {\n                return syncPoints[syncPoints.length - 1];\n            } else {\n                return null;\n            }\n        }\n    }, {\n        key: \"type\",\n        get: function get() {\n            return this._type;\n        }\n    }, {\n        key: \"length\",\n        get: function get() {\n            return this._list.length;\n        }\n    }]);\n\n    return MediaSegmentInfoList;\n}();//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n/*\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\n *\n * @author zheng qian <xqq@xqq.im>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar Browser = {};\n\nfunction detect() {\n    // modified from jquery-browser-plugin\n\n    var ua = self.navigator.userAgent.toLowerCase();\n\n    var match = /(edge)\\/([\\w.]+)/.exec(ua) || /(opr)[\\/]([\\w.]+)/.exec(ua) || /(chrome)[ \\/]([\\w.]+)/.exec(ua) || /(iemobile)[\\/]([\\w.]+)/.exec(ua) || /(version)(applewebkit)[ \\/]([\\w.]+).*(safari)[ \\/]([\\w.]+)/.exec(ua) || /(webkit)[ \\/]([\\w.]+).*(version)[ \\/]([\\w.]+).*(safari)[ \\/]([\\w.]+)/.exec(ua) || /(webkit)[ \\/]([\\w.]+)/.exec(ua) || /(opera)(?:.*version|)[ \\/]([\\w.]+)/.exec(ua) || /(msie) ([\\w.]+)/.exec(ua) || ua.indexOf('trident') >= 0 && /(rv)(?::| )([\\w.]+)/.exec(ua) || ua.indexOf('compatible') < 0 && /(mozilla)(?:.*? rv:([\\w.]+)|)/.exec(ua) || [];\n\n    var platform_match = /(ipad)/.exec(ua) || /(ipod)/.exec(ua) || /(windows phone)/.exec(ua) || /(iphone)/.exec(ua) || /(kindle)/.exec(ua) || /(android)/.exec(ua) || /(windows)/.exec(ua) || /(mac)/.exec(ua) || /(linux)/.exec(ua) || /(cros)/.exec(ua) || [];\n\n    var matched = {\n        browser: match[5] || match[3] || match[1] || '',\n        version: match[2] || match[4] || '0',\n        majorVersion: match[4] || match[2] || '0',\n        platform: platform_match[0] || ''\n    };\n\n    var browser = {};\n    if (matched.browser) {\n        browser[matched.browser] = true;\n\n        var versionArray = matched.majorVersion.split('.');\n        browser.version = {\n            major: parseInt(matched.majorVersion, 10),\n            string: matched.version\n        };\n        if (versionArray.length > 1) {\n            browser.version.minor = parseInt(versionArray[1], 10);\n        }\n        if (versionArray.length > 2) {\n            browser.version.build = parseInt(versionArray[2], 10);\n        }\n    }\n\n    if (matched.platform) {\n        browser[matched.platform] = true;\n    }\n\n    if (browser.chrome || browser.opr || browser.safari) {\n        browser.webkit = true;\n    }\n\n    // MSIE. IE11 has 'rv' identifer\n    if (browser.rv || browser.iemobile) {\n        if (browser.rv) {\n            delete browser.rv;\n        }\n        var msie = 'msie';\n        matched.browser = msie;\n        browser[msie] = true;\n    }\n\n    // Microsoft Edge\n    if (browser.edge) {\n        delete browser.edge;\n        var msedge = 'msedge';\n        matched.browser = msedge;\n        browser[msedge] = true;\n    }\n\n    // Opera 15+\n    if (browser.opr) {\n        var opera = 'opera';\n        matched.browser = opera;\n        browser[opera] = true;\n    }\n\n    // Stock android browsers are marked as Safari\n    if (browser.safari && browser.android) {\n        var android = 'android';\n        matched.browser = android;\n        browser[android] = true;\n    }\n\n    browser.name = matched.browser;\n    browser.platform = matched.platform;\n\n    for (var key in Browser) {\n        if (Browser.hasOwnProperty(key)) {\n            delete Browser[key];\n        }\n    }\n    Object.assign(Browser, browser);\n}\n\ndetect();\n\nexports.default = Browser;//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(5);


/***/ })
/******/ ]);