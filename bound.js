/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 19);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("class Error {\n    constructor (type) {\n        this.type = type;\n    }\n}\n/* harmony export (immutable) */ __webpack_exports__[\"a\"] = Error;\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NoaW1lZS1mbHYyZm1wNC9saWIvdXRpbHMvZXJyb3IuanM/OWQ2MyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQSIsImZpbGUiOiIwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgY2xhc3MgRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yICh0eXBlKSB7XG4gICAgICAgIHRoaXMudHlwZSA9IHR5cGU7XG4gICAgfVxufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NoaW1lZS1mbHYyZm1wNC9saWIvdXRpbHMvZXJyb3IuanNcbi8vIG1vZHVsZSBpZCA9IDBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 1 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__exp_golomb_js__ = __webpack_require__(7);\n/**\n * reference flv.js\n */\n/* eslint-disable */\n\n\nclass SPSParser {\n\n    static _ebsp2rbsp(uint8array) {\n        const src = uint8array;\n        const src_length = src.byteLength;\n        const dst = new Uint8Array(src_length);\n        let dst_idx = 0;\n\n        for (let i = 0; i < src_length; i++) {\n            if (i >= 2) {\n                // Unescape: Skip 0x03 after 00 00\n                if (src[i] === 0x03 && src[i - 1] === 0x00 && src[i - 2] === 0x00) {\n                    continue;\n                }\n            }\n            dst[dst_idx] = src[i];\n            dst_idx++;\n        }\n\n        return new Uint8Array(dst.buffer, 0, dst_idx);\n    }\n\n    static parseSPS(uint8array) {\n        const rbsp = SPSParser._ebsp2rbsp(uint8array);\n        let gb = new __WEBPACK_IMPORTED_MODULE_0__exp_golomb_js__[\"a\" /* default */](rbsp);\n\n        gb.readByte();\n        const profile_idc = gb.readByte(); // profile_idc\n        gb.readByte(); // constraint_set_flags[5] + reserved_zero[3]\n        const level_idc = gb.readByte(); // level_idc\n        gb.readUEG(); // seq_parameter_set_id\n\n        const profile_string = SPSParser.getProfileString(profile_idc);\n        const level_string = SPSParser.getLevelString(level_idc);\n        let chroma_format_idc = 1;\n        let chroma_format = 420;\n        const chroma_format_table = [0, 420, 422, 444];\n        let bit_depth = 8;\n\n        if (profile_idc === 100 || profile_idc === 110 || profile_idc === 122 ||\n            profile_idc === 244 || profile_idc === 44 || profile_idc === 83 ||\n            profile_idc === 86 || profile_idc === 118 || profile_idc === 128 ||\n            profile_idc === 138 || profile_idc === 144) {\n\n            chroma_format_idc = gb.readUEG();\n            if (chroma_format_idc === 3) {\n                gb.readBits(1); // separate_colour_plane_flag\n            }\n            if (chroma_format_idc <= 3) {\n                chroma_format = chroma_format_table[chroma_format_idc];\n            }\n\n            bit_depth = gb.readUEG() + 8; // bit_depth_luma_minus8\n            gb.readUEG(); // bit_depth_chroma_minus8\n            gb.readBits(1); // qpprime_y_zero_transform_bypass_flag\n            if (gb.readBool()) { // seq_scaling_matrix_present_flag\n                const scaling_list_count = (chroma_format_idc !== 3) ? 8 : 12;\n                for (let i = 0; i < scaling_list_count; i++) {\n                    if (gb.readBool()) { // seq_scaling_list_present_flag\n                        if (i < 6) {\n                            SPSParser._skipScalingList(gb, 16);\n                        } else {\n                            SPSParser._skipScalingList(gb, 64);\n                        }\n                    }\n                }\n            }\n        }\n        gb.readUEG(); // log2_max_frame_num_minus4\n        const pic_order_cnt_type = gb.readUEG();\n        if (pic_order_cnt_type === 0) {\n            gb.readUEG(); // log2_max_pic_order_cnt_lsb_minus_4\n        } else if (pic_order_cnt_type === 1) {\n            gb.readBits(1); // delta_pic_order_always_zero_flag\n            gb.readSEG(); // offset_for_non_ref_pic\n            gb.readSEG(); // offset_for_top_to_bottom_field\n            const num_ref_frames_in_pic_order_cnt_cycle = gb.readUEG();\n            for (let i = 0; i < num_ref_frames_in_pic_order_cnt_cycle; i++) {\n                gb.readSEG(); // offset_for_ref_frame\n            }\n        }\n        gb.readUEG(); // max_num_ref_frames\n        gb.readBits(1); // gaps_in_frame_num_value_allowed_flag\n\n        const pic_width_in_mbs_minus1 = gb.readUEG();\n        const pic_height_in_map_units_minus1 = gb.readUEG();\n\n        const frame_mbs_only_flag = gb.readBits(1);\n        if (frame_mbs_only_flag === 0) {\n            gb.readBits(1); // mb_adaptive_frame_field_flag\n        }\n        gb.readBits(1); // direct_8x8_inference_flag\n\n        let frame_crop_left_offset = 0;\n        let frame_crop_right_offset = 0;\n        let frame_crop_top_offset = 0;\n        let frame_crop_bottom_offset = 0;\n\n        const frame_cropping_flag = gb.readBool();\n        if (frame_cropping_flag) {\n            frame_crop_left_offset = gb.readUEG();\n            frame_crop_right_offset = gb.readUEG();\n            frame_crop_top_offset = gb.readUEG();\n            frame_crop_bottom_offset = gb.readUEG();\n        }\n\n        let sar_width = 1,\n            sar_height = 1;\n        let fps = 0,\n            fps_fixed = true,\n            fps_num = 0,\n            fps_den = 0;\n\n        const vui_parameters_present_flag = gb.readBool();\n        if (vui_parameters_present_flag) {\n            if (gb.readBool()) { // aspect_ratio_info_present_flag\n                const aspect_ratio_idc = gb.readByte();\n                const sar_w_table = [1, 12, 10, 16, 40, 24, 20, 32, 80, 18, 15, 64, 160, 4, 3, 2];\n                const sar_h_table = [1, 11, 11, 11, 33, 11, 11, 11, 33, 11, 11, 33, 99, 3, 2, 1];\n\n                if (aspect_ratio_idc > 0 && aspect_ratio_idc < 16) {\n                    sar_width = sar_w_table[aspect_ratio_idc - 1];\n                    sar_height = sar_h_table[aspect_ratio_idc - 1];\n                } else if (aspect_ratio_idc === 255) {\n                    sar_width = gb.readByte() << 8 | gb.readByte();\n                    sar_height = gb.readByte() << 8 | gb.readByte();\n                }\n            }\n\n            if (gb.readBool()) { // overscan_info_present_flag\n                gb.readBool(); // overscan_appropriate_flag\n            }\n            if (gb.readBool()) { // video_signal_type_present_flag\n                gb.readBits(4); // video_format & video_full_range_flag\n                if (gb.readBool()) { // colour_description_present_flag\n                    gb.readBits(24); // colour_primaries & transfer_characteristics & matrix_coefficients\n                }\n            }\n            if (gb.readBool()) { // chroma_loc_info_present_flag\n                gb.readUEG(); // chroma_sample_loc_type_top_field\n                gb.readUEG(); // chroma_sample_loc_type_bottom_field\n            }\n            if (gb.readBool()) { // timing_info_present_flag\n                const num_units_in_tick = gb.readBits(32);\n                const time_scale = gb.readBits(32);\n                fps_fixed = gb.readBool(); // fixed_frame_rate_flag\n\n                fps_num = time_scale;\n                fps_den = num_units_in_tick * 2;\n                fps = fps_num / fps_den;\n            }\n        }\n\n        let sarScale = 1;\n        if (sar_width !== 1 || sar_height !== 1) {\n            sarScale = sar_width / sar_height;\n        }\n\n        let crop_unit_x = 0,\n            crop_unit_y = 0;\n        if (chroma_format_idc === 0) {\n            crop_unit_x = 1;\n            crop_unit_y = 2 - frame_mbs_only_flag;\n        } else {\n            const sub_wc = (chroma_format_idc === 3) ? 1 : 2;\n            const sub_hc = (chroma_format_idc === 1) ? 2 : 1;\n            crop_unit_x = sub_wc;\n            crop_unit_y = sub_hc * (2 - frame_mbs_only_flag);\n        }\n\n        let codec_width = (pic_width_in_mbs_minus1 + 1) * 16;\n        let codec_height = (2 - frame_mbs_only_flag) * ((pic_height_in_map_units_minus1 + 1) * 16);\n\n        codec_width -= (frame_crop_left_offset + frame_crop_right_offset) * crop_unit_x;\n        codec_height -= (frame_crop_top_offset + frame_crop_bottom_offset) * crop_unit_y;\n\n        const present_width = Math.ceil(codec_width * sarScale);\n\n        gb.destroy();\n        gb = null;\n\n        return {\n            profile_string, // baseline, high, high10, ...\n            level_string, // 3, 3.1, 4, 4.1, 5, 5.1, ...\n            bit_depth, // 8bit, 10bit, ...\n            chroma_format, // 4:2:0, 4:2:2, ...\n            chroma_format_string: SPSParser.getChromaFormatString(chroma_format),\n\n            frame_rate: {\n                fixed: fps_fixed,\n                fps,\n                fps_den,\n                fps_num\n            },\n\n            sar_ratio: {\n                width: sar_width,\n                height: sar_height\n            },\n\n            codec_size: {\n                width: codec_width,\n                height: codec_height\n            },\n\n            present_size: {\n                width: present_width,\n                height: codec_height\n            }\n        };\n    }\n\n    static _skipScalingList(gb, count) {\n        let last_scale = 8,\n            next_scale = 8;\n        let delta_scale = 0;\n        for (let i = 0; i < count; i++) {\n            if (next_scale !== 0) {\n                delta_scale = gb.readSEG();\n                next_scale = (last_scale + delta_scale + 256) % 256;\n            }\n            last_scale = (next_scale === 0) ? last_scale : next_scale;\n        }\n    }\n\n    static getProfileString(profile_idc) {\n        switch (profile_idc) {\n            case 66:\n                return 'Baseline';\n            case 77:\n                return 'Main';\n            case 88:\n                return 'Extended';\n            case 100:\n                return 'High';\n            case 110:\n                return 'High10';\n            case 122:\n                return 'High422';\n            case 244:\n                return 'High444';\n            default:\n                return 'Unknown';\n        }\n    }\n\n    static getLevelString(level_idc) {\n        return (level_idc / 10).toFixed(1);\n    }\n\n    static getChromaFormatString(chroma) {\n        switch (chroma) {\n            case 420:\n                return '4:2:0';\n            case 422:\n                return '4:2:2';\n            case 444:\n                return '4:4:4';\n            default:\n                return 'Unknown';\n        }\n    }\n\n}\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (SPSParser);//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 2 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__flvdemux__ = __webpack_require__(10);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__media_info__ = __webpack_require__(11);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__sps_parser__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__utils_error__ = __webpack_require__(0);\n/* eslint-disable */\n\n\n\n\nclass tagDemux {\n    constructor() {\n        this.TAG = this.constructor.name;\n\n        this._config = {};\n\n        this._onError = null;\n        this._onMediaInfo = null;\n        this._onTrackMetadata = null;\n        this._onDataAvailable = null;\n\n        this._dataOffset = 0;\n        this._firstParse = true;\n        this._dispatch = false;\n\n        this._hasAudio = false;\n        this._hasVideo = false;\n\n        this._audioInitialMetadataDispatched = false;\n        this._videoInitialMetadataDispatched = false;\n\n        this._mediaInfo = new __WEBPACK_IMPORTED_MODULE_1__media_info__[\"a\" /* default */]();\n        this._mediaInfo.hasAudio = this._hasAudio;\n        this._mediaInfo.hasVideo = this._hasVideo;\n        this._metadata = null;\n        this._audioMetadata = null;\n        this._videoMetadata = null;\n\n        this._naluLengthSize = 4;\n        this._timestampBase = 0; // int32, in milliseconds\n        this._timescale = 1000;\n        this._duration = 0; // int32, in milliseconds\n        this._durationOverrided = false;\n        this._referenceFrameRate = {\n            fixed: true,\n            fps: 23.976,\n            fps_num: 23976,\n            fps_den: 1000\n        };\n\n        this._videoTrack = { type: 'video', id: 1, sequenceNumber: 0, addcoefficient: 2, samples: [], length: 0 };\n        this._audioTrack = { type: 'audio', id: 2, sequenceNumber: 1, addcoefficient: 2, samples: [], length: 0 };\n\n        this._littleEndian = (function() {\n            const buf = new ArrayBuffer(2);\n            (new DataView(buf)).setInt16(0, 256, true); // little-endian write\n            return (new Int16Array(buf))[0] === 256; // platform-spec read, if equal then LE\n        })();\n    }\n    onMediaInfo(callback) {\n        this._onMediaInfo = callback;\n    }\n    parseMetadata(arr) {\n        const data = __WEBPACK_IMPORTED_MODULE_0__flvdemux__[\"a\" /* default */].parseMetadata(arr);\n        this._parseScriptData(data);\n    }\n    _parseScriptData(obj) {\n        const scriptData = obj;\n\n        if (scriptData.hasOwnProperty('onMetaData')) {\n            if (this._metadata) {\n                console.log(this.TAG, 'Found another onMetaData tag!');\n            }\n            this._metadata = scriptData;\n            const onMetaData = this._metadata.onMetaData;\n\n            if (typeof onMetaData.hasAudio === 'boolean') { // hasAudio\n                this._hasAudio = onMetaData.hasAudio;\n                this._mediaInfo.hasAudio = this._hasAudio;\n            }\n            if (typeof onMetaData.hasVideo === 'boolean') { // hasVideo\n                this._hasVideo = onMetaData.hasVideo;\n                this._mediaInfo.hasVideo = this._hasVideo;\n            }\n            if (typeof onMetaData.audiodatarate === 'number') { // audiodatarate\n                this._mediaInfo.audioDataRate = onMetaData.audiodatarate;\n            }\n            if (typeof onMetaData.videodatarate === 'number') { // videodatarate\n                this._mediaInfo.videoDataRate = onMetaData.videodatarate;\n            }\n            if (typeof onMetaData.width === 'number') { // width\n                this._mediaInfo.width = onMetaData.width;\n            }\n            if (typeof onMetaData.height === 'number') { // height\n                this._mediaInfo.height = onMetaData.height;\n            }\n            if (typeof onMetaData.duration === 'number') { // duration\n                if (!this._durationOverrided) {\n                    const duration = Math.floor(onMetaData.duration * this._timescale);\n                    this._duration = duration;\n                    this._mediaInfo.duration = duration;\n                }\n            } else {\n                this._mediaInfo.duration = 0;\n            }\n            if (typeof onMetaData.framerate === 'number') { // framerate\n                const fps_num = Math.floor(onMetaData.framerate * 1000);\n                if (fps_num > 0) {\n                    const fps = fps_num / 1000;\n                    this._referenceFrameRate.fixed = true;\n                    this._referenceFrameRate.fps = fps;\n                    this._referenceFrameRate.fps_num = fps_num;\n                    this._referenceFrameRate.fps_den = 1000;\n                    this._mediaInfo.fps = fps;\n                }\n            }\n            if (typeof onMetaData.keyframes === 'object') { // keyframes\n                this._mediaInfo.hasKeyframesIndex = true;\n                const keyframes = onMetaData.keyframes;\n                keyframes.times = onMetaData.times;\n                keyframes.filepositions = onMetaData.filepositions;\n                this._mediaInfo.keyframesIndex = this._parseKeyframesIndex(keyframes);\n                onMetaData.keyframes = null; // keyframes has been extracted, remove it\n            } else {\n                this._mediaInfo.hasKeyframesIndex = false;\n            }\n            this._dispatch = false;\n            this._mediaInfo.metadata = onMetaData;\n            console.log(this.TAG, 'Parsed onMetaData');\n            // if (this._mediaInfo.isComplete()) {\n            // this._onMediaInfo(this._mediaInfo);\n            // }\n            return this._mediaInfo;\n        }\n    }\n\n    _parseKeyframesIndex(keyframes) {\n        const times = [];\n        const filepositions = [];\n\n        // ignore first keyframe which is actually AVC Sequence Header (AVCDecoderConfigurationRecord)\n        for (let i = 1; i < keyframes.times.length; i++) {\n            const time = this._timestampBase + Math.floor(keyframes.times[i] * 1000);\n            times.push(time);\n            filepositions.push(keyframes.filepositions[i]);\n        }\n\n        return {\n            times,\n            filepositions\n        };\n    }\n\n    /**\n     * 传入tags输出moof和mdat\n     *\n     * @param {any} tags\n     *\n     * @memberof tagDemux\n     */\n    moofTag(tags) {\n\n        for (let i = 0; i < tags.length; i++) {\n            this._dispatch = true;\n            this.parseChunks(tags[i]);\n            // console.log(\"tagTimestamp\", tags[i].getTime(), tags[i]);\n        }\n        if (this._isInitialMetadataDispatched()) {\n            if (this._dispatch && (this._audioTrack.length || this._videoTrack.length)) {\n                this._onDataAvailable(this._audioTrack, this._videoTrack);\n            }\n        }\n    }\n\n    parseChunks(flvtag) {\n\n        switch (flvtag.tagType) {\n            case 8: // Audio\n                this._parseAudioData(flvtag.body.buffer, 0, flvtag.body.length, flvtag.getTime());\n                break;\n            case 9: // Video\n                this._parseVideoData(flvtag.body.buffer, 0, flvtag.body.length, flvtag.getTime(), 0);\n                break;\n            case 18: // ScriptDataObject\n                this.parseMetadata(flvtag.body);\n                break;\n        }\n    }\n\n    _parseVideoData(arrayBuffer, dataOffset, dataSize, tagTimestamp, tagPosition) {\n        if (tagTimestamp == this._timestampBase && this._timestampBase != 0) {\n            throw new __WEBPACK_IMPORTED_MODULE_3__utils_error__[\"a\" /* default */](tagTimestamp+ this._timestampBase+'夭寿啦这个视频不是从0开始');\n            // this.timestampBase(0);\n        }\n        if (dataSize <= 1) {\n            console.log(this.TAG, 'Flv: Invalid video packet, missing VideoData payload!');\n            return;\n        }\n        // 获取 video tag body 第一字节\n        const spec = (new Uint8Array(arrayBuffer, dataOffset, dataSize))[0];\n        // 获取是否是关键帧\n        const frameType = (spec & 240) >>> 4;\n        // 获取编码格式\n        const codecId = spec & 15;\n\n        if (codecId !== 7) {\n            throw new __WEBPACK_IMPORTED_MODULE_3__utils_error__[\"a\" /* default */](`Flv: Unsupported codec in video frame: ${codecId}`);\n            // return;\n        }\n\n        this._parseAVCVideoPacket(arrayBuffer, dataOffset + 1, dataSize - 1, tagTimestamp, tagPosition, frameType);\n    }\n\n    _parseAVCVideoPacket(arrayBuffer, dataOffset, dataSize, tagTimestamp, tagPosition, frameType) {\n\n        if (dataSize < 4) {\n            console.log(this.TAG, 'Flv: Invalid AVC packet, missing AVCPacketType or/and CompositionTime');\n            return;\n        }\n\n        const le = this._littleEndian;\n        // 获取 video tag body 第2字节到结尾\n        const v = new DataView(arrayBuffer, dataOffset, dataSize);\n\n        // IF CodecID == 7  AVCPacketType\n        // 0 = AVC sequence header\n        // 1 = AVC NALU\n        // 2 = AVC end of sequence (lower level NALU sequence ender is not required or supported)\n        const packetType = v.getUint8(0);\n        // 3字节\n        // IF AVCPacketType == 1\n        //  Composition time offset\n        // ELSE\n        //  0\n        const cts = v.getUint32(0, !le) & 0x00FFFFFF;\n\n        // IF AVCPacketType == 0 AVCDecoderConfigurationRecord（AVC sequence header）\n        // IF AVCPacketType == 1 One or more NALUs (Full frames are required)\n\n        /**\n         *AVCDecoderConfigurationRecord.包含着是H.264解码相关比较重要的sps和pps信息，\n         *再给AVC解码器送数据 流之前一定要把sps和pps信息送出，否则的话解码器不能正常解码。\n         *而且在解码器stop之后再次start之前，如seek、快进快退状态切换等，\n         *都 需要重新送一遍sps和pps的信息.AVCDecoderConfigurationRecord在FLV文件中一般情况也是出现1次，\n         *也就是第一个 video tag.\n         */\n        if (packetType === 0) { // AVCDecoderConfigurationRecord\n            this._parseAVCDecoderConfigurationRecord(arrayBuffer, dataOffset + 4, dataSize - 4);\n        } else if (packetType === 1) { // One or more Nalus\n            this._parseAVCVideoData(arrayBuffer, dataOffset + 4, dataSize - 4, tagTimestamp, tagPosition, frameType, cts);\n        } else if (packetType === 2) {\n            // empty, AVC end of sequence\n        } else {\n            throw new __WEBPACK_IMPORTED_MODULE_3__utils_error__[\"a\" /* default */](`Flv: Invalid video packet type ${packetType}`);\n            \n        }\n    }\n\n    /**\n     * AVC 初始化\n     */\n    _parseAVCDecoderConfigurationRecord(arrayBuffer, dataOffset, dataSize) {\n        if (dataSize < 7) {\n            console.log(this.TAG, 'Flv: Invalid AVCDecoderConfigurationRecord, lack of data!');\n            return;\n        }\n\n        let meta = this._videoMetadata;\n        const track = this._videoTrack;\n        const le = this._littleEndian;\n        const v = new DataView(arrayBuffer, dataOffset, dataSize);\n\n        if (!meta) {\n            meta = this._videoMetadata = {};\n            meta.type = 'video';\n            meta.id = track.id;\n            meta.timescale = this._timescale;\n            meta.duration = this._duration;\n        } else {\n            if (typeof meta.avcc !== 'undefined') {\n                console.log(this.TAG, 'Found another AVCDecoderConfigurationRecord!');\n            }\n        }\n\n        const version = v.getUint8(0); // configurationVersion\n        const avcProfile = v.getUint8(1); // avcProfileIndication\n        const profileCompatibility = v.getUint8(2); // profile_compatibility\n        const avcLevel = v.getUint8(3); // AVCLevelIndication\n\n        if (version !== 1 || avcProfile === 0) {\n            this._onError(DemuxErrors.FORMAT_ERROR, 'Flv: Invalid AVCDecoderConfigurationRecord');\n            return;\n        }\n\n        this._naluLengthSize = (v.getUint8(4) & 3) + 1; // lengthSizeMinusOne\n        if (this._naluLengthSize !== 3 && this._naluLengthSize !== 4) { // holy shit!!!\n            this._onError(DemuxErrors.FORMAT_ERROR, `Flv: Strange NaluLengthSizeMinusOne: ${this._naluLengthSize - 1}`);\n            return;\n        }\n\n        const spsCount = v.getUint8(5) & 31; // numOfSequenceParameterSets\n        if (spsCount === 0 || spsCount > 1) {\n            this._onError(DemuxErrors.FORMAT_ERROR, `Flv: Invalid H264 SPS count: ${spsCount}`);\n            return;\n        }\n\n        let offset = 6;\n\n        for (let i = 0; i < spsCount; i++) {\n            const len = v.getUint16(offset, !le); // sequenceParameterSetLength\n            offset += 2;\n\n            if (len === 0) {\n                continue;\n            }\n\n            // Notice: Nalu without startcode header (00 00 00 01)\n            const sps = new Uint8Array(arrayBuffer, dataOffset + offset, len);\n            offset += len;\n\n            const config = __WEBPACK_IMPORTED_MODULE_2__sps_parser__[\"a\" /* default */].parseSPS(sps);\n            meta.codecWidth = config.codec_size.width;\n            meta.codecHeight = config.codec_size.height;\n            meta.presentWidth = config.present_size.width;\n            meta.presentHeight = config.present_size.height;\n\n            meta.profile = config.profile_string;\n            meta.level = config.level_string;\n            meta.bitDepth = config.bit_depth;\n            meta.chromaFormat = config.chroma_format;\n            meta.sarRatio = config.sar_ratio;\n            meta.frameRate = config.frame_rate;\n\n            if (config.frame_rate.fixed === false ||\n                config.frame_rate.fps_num === 0 ||\n                config.frame_rate.fps_den === 0) {\n                meta.frameRate = this._referenceFrameRate;\n            }\n\n            const fps_den = meta.frameRate.fps_den;\n            const fps_num = meta.frameRate.fps_num;\n            meta.refSampleDuration = Math.floor(meta.timescale * (fps_den / fps_num));\n\n            const codecArray = sps.subarray(1, 4);\n            let codecString = 'avc1.';\n            for (let j = 0; j < 3; j++) {\n                let h = codecArray[j].toString(16);\n                if (h.length < 2) {\n                    h = '0' + h;\n                }\n                codecString += h;\n            }\n            meta.codec = codecString;\n\n            const mi = this._mediaInfo;\n            mi.width = meta.codecWidth;\n            mi.height = meta.codecHeight;\n            mi.fps = meta.frameRate.fps;\n            mi.profile = meta.profile;\n            mi.level = meta.level;\n            mi.chromaFormat = config.chroma_format_string;\n            mi.sarNum = meta.sarRatio.width;\n            mi.sarDen = meta.sarRatio.height;\n            mi.videoCodec = codecString;\n\n            if (mi.hasAudio) {\n                if (mi.audioCodec != null) {\n                    mi.mimeType = 'video/x-flv; codecs=\"' + mi.videoCodec + ',' + mi.audioCodec + '\"';\n                }\n            } else {\n                mi.mimeType = 'video/x-flv; codecs=\"' + mi.videoCodec + '\"';\n            }\n            if (mi.isComplete()) {\n                this._onMediaInfo(mi);\n            }\n        }\n\n        const ppsCount = v.getUint8(offset); // numOfPictureParameterSets\n        if (ppsCount === 0 || ppsCount > 1) {\n            this._onError(DemuxErrors.FORMAT_ERROR, `Flv: Invalid H264 PPS count: ${ppsCount}`);\n            return;\n        }\n\n        offset++;\n\n        for (let i = 0; i < ppsCount; i++) {\n            const len = v.getUint16(offset, !le); // pictureParameterSetLength\n            offset += 2;\n\n            if (len === 0) {\n                continue;\n            }\n\n            // pps is useless for extracting video information\n            offset += len;\n        }\n\n        meta.avcc = new Uint8Array(dataSize);\n        meta.avcc.set(new Uint8Array(arrayBuffer, dataOffset, dataSize), 0);\n        console.log(this.TAG, 'Parsed AVCDecoderConfigurationRecord');\n\n        if (this._isInitialMetadataDispatched()) {\n            // flush parsed frames\n            if (this._dispatch && (this._audioTrack.length || this._videoTrack.length)) {\n                this._onDataAvailable(this._audioTrack, this._videoTrack);\n            }\n        } else {\n            this._videoInitialMetadataDispatched = true;\n        }\n        // notify new metadata\n        this._dispatch = false;\n        // if (this._onTrackMetadata) {\n        //     this._onTrackMetadata.call(null, meta);\n        // }\n\n        this._onTrackMetadata('video', meta);\n    }\n\n    timestampBase(i) {\n        this._timestampBase = i;\n    }\n\n    /**\n     * 普通的AVC 片段\n     */\n    _parseAVCVideoData(arrayBuffer, dataOffset, dataSize, tagTimestamp, tagPosition, frameType, cts) {\n\n        const le = this._littleEndian;\n        const v = new DataView(arrayBuffer, dataOffset, dataSize);\n\n        let units = [],\n            length = 0;\n\n        let offset = 0;\n        const lengthSize = this._naluLengthSize;\n        const dts = this._timestampBase + tagTimestamp;\n        let keyframe = (frameType === 1); // from FLV Frame Type constants\n\n        while (offset < dataSize) {\n            if (offset + 4 >= dataSize) {\n                console.log(this.TAG, `Malformed Nalu near timestamp ${dts}, offset = ${offset}, dataSize = ${dataSize}`);\n                break; // data not enough for next Nalu\n            }\n            // Nalu with length-header (AVC1)\n            let naluSize = v.getUint32(offset, !le); // Big-Endian read\n            if (lengthSize === 3) {\n                naluSize >>>= 8;\n            }\n            if (naluSize > dataSize - lengthSize) {\n                console.log(this.TAG, `Malformed Nalus near timestamp ${dts}, NaluSize > DataSize!`);\n                return;\n            }\n\n            const unitType = v.getUint8(offset + lengthSize) & 0x1F;\n\n            if (unitType === 5) { // IDR\n                keyframe = true;\n            }\n\n            const data = new Uint8Array(arrayBuffer, dataOffset + offset, lengthSize + naluSize);\n            const unit = { type: unitType, data };\n            units.push(unit);\n            length += data.byteLength;\n\n            offset += lengthSize + naluSize;\n        }\n\n        if (units.length) {\n            const track = this._videoTrack;\n            const avcSample = {\n                units,\n                length,\n                isKeyframe: keyframe,\n                dts,\n                cts,\n                pts: (dts + cts)\n            };\n            if (keyframe) {\n                avcSample.fileposition = tagPosition;\n            }\n            track.samples.push(avcSample);\n            track.length += length;\n        }\n    }\n    _parseAudioData(arrayBuffer, dataOffset, dataSize, tagTimestamp) {\n        if (tagTimestamp == this._timestampBase && this._timestampBase != 0) {\n            console.log(tagTimestamp, this._timestampBase, '夭寿啦这个视频不是从0开始');\n            // timestampBase(0);\n        }\n\n        if (dataSize <= 1) {\n            console.log(this.TAG, 'Flv: Invalid audio packet, missing SoundData payload!');\n            return;\n        }\n\n        let meta = this._audioMetadata;\n        const track = this._audioTrack;\n\n        if (!meta || !meta.codec) {\n            // initial metadata\n            meta = this._audioMetadata = {};\n            meta.type = 'audio';\n            meta.id = track.id;\n            meta.timescale = this._timescale;\n            meta.duration = this._duration;\n\n            const le = this._littleEndian;\n            const v = new DataView(arrayBuffer, dataOffset, dataSize);\n\n            const soundSpec = v.getUint8(0);\n\n            const soundFormat = soundSpec >>> 4;\n            if (soundFormat !== 10) { // AAC\n                // TODO: support MP3 audio codec\n                this._onError(DemuxErrors.CODEC_UNSUPPORTED, 'Flv: Unsupported audio codec idx: ' + soundFormat);\n                return;\n            }\n\n            let soundRate = 0;\n            const soundRateIndex = (soundSpec & 12) >>> 2;\n\n            const soundRateTable = [5500, 11025, 22050, 44100, 48000];\n\n            if (soundRateIndex < soundRateTable.length) {\n                soundRate = soundRateTable[soundRateIndex];\n            } else {\n                this._onError(DemuxErrors.FORMAT_ERROR, 'Flv: Invalid audio sample rate idx: ' + soundRateIndex);\n                return;\n            }\n\n            const soundSize = (soundSpec & 2) >>> 1; // unused\n            const soundType = (soundSpec & 1);\n\n            meta.audioSampleRate = soundRate;\n            meta.channelCount = (soundType === 0 ? 1 : 2);\n            meta.refSampleDuration = Math.floor(1024 / meta.audioSampleRate * meta.timescale);\n            meta.codec = 'mp4a.40.5';\n        }\n\n        const aacData = this._parseAACAudioData(arrayBuffer, dataOffset + 1, dataSize - 1);\n        if (aacData == undefined) {\n            return;\n        }\n\n        if (aacData.packetType === 0) { // AAC sequence header (AudioSpecificConfig)\n            if (meta.config) {\n                console.log(this.TAG, 'Found another AudioSpecificConfig!');\n            }\n            const misc = aacData.data;\n            meta.audioSampleRate = misc.samplingRate;\n            meta.channelCount = misc.channelCount;\n            meta.codec = misc.codec;\n            meta.config = misc.config;\n            // The decode result of an aac sample is 1024 PCM samples\n            meta.refSampleDuration = Math.floor(1024 / meta.audioSampleRate * meta.timescale);\n            console.log(this.TAG, 'Parsed AudioSpecificConfig');\n\n            if (this._isInitialMetadataDispatched()) {\n                // Non-initial metadata, force dispatch (or flush) parsed frames to remuxer\n                if (this._dispatch && (this._audioTrack.length || this._videoTrack.length)) {\n                    this._onDataAvailable(this._audioTrack, this._videoTrack);\n                }\n            } else {\n                this._audioInitialMetadataDispatched = true;\n            }\n            // then notify new metadata\n            this._dispatch = false;\n            this._onTrackMetadata('audio', meta);\n\n            const mi = this._mediaInfo;\n            mi.audioCodec = 'mp4a.40.' + misc.originalAudioObjectType;\n            mi.audioSampleRate = meta.audioSampleRate;\n            mi.audioChannelCount = meta.channelCount;\n            if (mi.hasVideo) {\n                if (mi.videoCodec != null) {\n                    mi.mimeType = 'video/x-flv; codecs=\"' + mi.videoCodec + ',' + mi.audioCodec + '\"';\n                }\n            } else {\n                mi.mimeType = 'video/x-flv; codecs=\"' + mi.audioCodec + '\"';\n            }\n            if (mi.isComplete()) {\n                this._onMediaInfo(mi);\n            }\n            return;\n        } else if (aacData.packetType === 1) { // AAC raw frame data\n            const dts = this._timestampBase + tagTimestamp;\n            const aacSample = { unit: aacData.data, dts, pts: dts };\n            track.samples.push(aacSample);\n            track.length += aacData.data.length;\n        } else {\n            console.log(this.TAG, `Flv: Unsupported AAC data type ${aacData.packetType}`);\n        }\n    }\n\n    _parseAACAudioData(arrayBuffer, dataOffset, dataSize) {\n        if (dataSize <= 1) {\n            console.log(this.TAG, 'Flv: Invalid AAC packet, missing AACPacketType or/and Data!');\n            return;\n        }\n\n        const result = {};\n        const array = new Uint8Array(arrayBuffer, dataOffset, dataSize);\n\n        result.packetType = array[0];\n\n        if (array[0] === 0) {\n            result.data = this._parseAACAudioSpecificConfig(arrayBuffer, dataOffset + 1, dataSize - 1);\n        } else {\n            result.data = array.subarray(1);\n        }\n\n        return result;\n    }\n\n    _parseAACAudioSpecificConfig(arrayBuffer, dataOffset, dataSize) {\n        const array = new Uint8Array(arrayBuffer, dataOffset, dataSize);\n        let config = null;\n\n        const mpegSamplingRates = [\n            96000, 88200, 64000, 48000, 44100, 32000,\n            24000, 22050, 16000, 12000, 11025, 8000, 7350\n        ];\n\n        /* Audio Object Type:\n           0: Null\n           1: AAC Main\n           2: AAC LC\n           3: AAC SSR (Scalable Sample Rate)\n           4: AAC LTP (Long Term Prediction)\n           5: HE-AAC / SBR (Spectral Band Replication)\n           6: AAC Scalable\n        */\n\n        let audioObjectType = 0;\n        let originalAudioObjectType = 0;\n        let audioExtensionObjectType = null;\n        let samplingIndex = 0;\n        let extensionSamplingIndex = null;\n        // debugger;\n        // 5 bits\n        audioObjectType = originalAudioObjectType = array[0] >>> 3;\n        // 4 bits\n        samplingIndex = ((array[0] & 0x07) << 1) | (array[1] >>> 7);\n        if (samplingIndex < 0 || samplingIndex >= mpegSamplingRates.length) {\n            this._onError(DemuxErrors.FORMAT_ERROR, 'Flv: AAC invalid sampling frequency index!');\n            return;\n        }\n\n        const samplingFrequence = mpegSamplingRates[samplingIndex];\n\n        // 4 bits\n        const channelConfig = (array[1] & 0x78) >>> 3;\n        if (channelConfig < 0 || channelConfig >= 8) {\n            this._onError(DemuxErrors.FORMAT_ERROR, 'Flv: AAC invalid channel configuration');\n            return;\n        }\n\n        if (audioObjectType === 5) { // HE-AAC?\n            // 4 bits\n            extensionSamplingIndex = ((array[1] & 0x07) << 1) | (array[2] >>> 7);\n            // 5 bits\n            audioExtensionObjectType = (array[2] & 0x7C) >>> 2;\n        }\n\n        // workarounds for various browsers\n        const userAgent = self.navigator.userAgent.toLowerCase();\n\n        if (userAgent.indexOf('firefox') !== -1) {\n            // firefox: use SBR (HE-AAC) if freq less than 24kHz\n            if (samplingIndex >= 6) {\n                audioObjectType = 5;\n                config = new Array(4);\n                extensionSamplingIndex = samplingIndex - 3;\n            } else { // use LC-AAC\n                audioObjectType = 2;\n                config = new Array(2);\n                extensionSamplingIndex = samplingIndex;\n            }\n        } else if (userAgent.indexOf('android') !== -1) {\n            // android: always use LC-AAC\n            audioObjectType = 2;\n            config = new Array(2);\n            extensionSamplingIndex = samplingIndex;\n        } else {\n            // for other browsers, e.g. chrome...\n            // Always use HE-AAC to make it easier to switch aac codec profile\n            audioObjectType = 5;\n            extensionSamplingIndex = samplingIndex;\n            config = new Array(4);\n\n            if (samplingIndex >= 6) {\n                extensionSamplingIndex = samplingIndex - 3;\n            } else if (channelConfig === 1) { // Mono channel\n                audioObjectType = 2;\n                config = new Array(2);\n                extensionSamplingIndex = samplingIndex;\n            }\n        }\n\n        config[0] = audioObjectType << 3;\n        config[0] |= (samplingIndex & 0x0F) >>> 1;\n        config[1] = (samplingIndex & 0x0F) << 7;\n        config[1] |= (channelConfig & 0x0F) << 3;\n        if (audioObjectType === 5) {\n            config[1] |= ((extensionSamplingIndex & 0x0F) >>> 1);\n            config[2] = (extensionSamplingIndex & 0x01) << 7;\n            // extended audio object type: force to 2 (LC-AAC)\n            config[2] |= (2 << 2);\n            config[3] = 0;\n        }\n\n        return {\n            config,\n            samplingRate: samplingFrequence,\n            channelCount: channelConfig,\n            codec: 'mp4a.40.' + audioObjectType,\n            originalAudioObjectType\n        };\n    }\n    _isInitialMetadataDispatched() {\n        if (this._hasAudio && this._hasVideo) { // both audio & video\n            return this._audioInitialMetadataDispatched && this._videoInitialMetadataDispatched;\n        }\n        if (this._hasAudio && !this._hasVideo) { // audio only\n            return this._audioInitialMetadataDispatched;\n        }\n        if (!this._hasAudio && this._hasVideo) { // video only\n            return this._videoInitialMetadataDispatched;\n        }\n    }\n}\n/* harmony default export */ __webpack_exports__[\"a\"] = (new tagDemux());//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 3 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/**\n * 代码借鉴了flv.js\n * 增加了自己的注释和写法\n */\n/* eslint-disable */\nclass MP4 {\n\n    static init() {\n        MP4.types = {\n            avc1: [],\n            avcC: [],\n            btrt: [],\n            dinf: [],\n            dref: [],\n            esds: [],\n            ftyp: [],\n            hdlr: [],\n            mdat: [],\n            mdhd: [],\n            mdia: [],\n            mfhd: [],\n            minf: [],\n            moof: [],\n            moov: [],\n            mp4a: [],\n            mvex: [],\n            mvhd: [],\n            sdtp: [],\n            stbl: [],\n            stco: [],\n            stsc: [],\n            stsd: [],\n            stsz: [],\n            stts: [],\n            tfdt: [],\n            tfhd: [],\n            traf: [],\n            trak: [],\n            trun: [],\n            trex: [],\n            tkhd: [],\n            vmhd: [],\n            smhd: []\n        };\n\n        for (const name in MP4.types) {\n            if (MP4.types.hasOwnProperty(name)) {\n                MP4.types[name] = [\n                    name.charCodeAt(0),\n                    name.charCodeAt(1),\n                    name.charCodeAt(2),\n                    name.charCodeAt(3)\n                ];\n            }\n        }\n\n        const constants = MP4.constants = {};\n\n        constants.FTYP = new Uint8Array([\n            0x69, 0x73, 0x6F, 0x6D, // major_brand: isom\t\tisom\tMP4  Base Media v1 [IS0 14496-12:2003]\tISO\tYES\tvideo/mp4\n            0x0, 0x0, 0x0, 0x1, // minor_version: 0x01\n            0x69, 0x73, 0x6F, 0x6D, // isom\n            0x61, 0x76, 0x63, 0x31 // avc1\n        ]);\n\n        constants.STSD_PREFIX = new Uint8Array([\n            0x00, 0x00, 0x00, 0x00, // version(0) + flags  version字段后会有一个entry count字段\n            0x00, 0x00, 0x00, 0x01 // entry_count\t根据entry的个数，每个entry会有type信息，如“vide”、“sund”等，根据type不同sample description会提供不同的信息，例如对于video track，会有“VisualSampleEntry”类型信息，对于audio track会有“AudioSampleEntry”类型信息。\n        ]);\n\n        constants.STTS = new Uint8Array([\n            0x00, 0x00, 0x00, 0x00, // version(0) + flags\n            0x00, 0x00, 0x00, 0x00 // entry_count     0个索引\n        ]);\n\n        constants.STSC = constants.STCO = constants.STTS;\n\n        constants.STSZ = new Uint8Array([\n            0x00, 0x00, 0x00, 0x00, // version(0) + flags\n            0x00, 0x00, 0x00, 0x00, // sample_size\n            0x00, 0x00, 0x00, 0x00 // sample_count\n        ]);\n\n        constants.HDLR_VIDEO = new Uint8Array([\n            0x00, 0x00, 0x00, 0x00, // version(0) + flags\n            0x00, 0x00, 0x00, 0x00, // pre_defined\n            0x76, 0x69, 0x64, 0x65, // handler_type: 'vide' 在media box中，该值为4个字符\t\t“vide”— video track\n            0x00, 0x00, 0x00, 0x00, // reserved: 3 * 4 bytes\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, // 保留位\n            0x56, 0x69, 0x64, 0x65,\n            0x6F, 0x48, 0x61, 0x6E,\n            0x64, 0x6C, 0x65, 0x72, 0x00 // name: VideoHandler 长度不定\t\ttrack type name，以‘\\0’结尾的字符串\n        ]);\n\n        constants.HDLR_AUDIO = new Uint8Array([\n            0x00, 0x00, 0x00, 0x00, // version(0) + flags\n            0x00, 0x00, 0x00, 0x00, // pre_defined\n            0x73, 0x6F, 0x75, 0x6E, // handler_type: 'soun'在media box中，该值为4个字符\t\t“soun”— audio track\n            0x00, 0x00, 0x00, 0x00, // reserved: 3 * 4 bytes\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, // 保留位\n            0x53, 0x6F, 0x75, 0x6E,\n            0x64, 0x48, 0x61, 0x6E,\n            0x64, 0x6C, 0x65, 0x72, 0x00 // name: SoundHandler 长度不定\t\ttrack type name，以‘\\0’结尾的字符串\n        ]);\n\n        constants.DREF = new Uint8Array([\n            0x00, 0x00, 0x00, 0x00, // version(0) + flags\n            0x00, 0x00, 0x00, 0x01, // entry_count 1个url\n            // url\tbox开始\n            0x00, 0x00, 0x00, 0x0C, // entry_size\n            0x75, 0x72, 0x6C, 0x20, // type 'url '\n            0x00, 0x00, 0x00, 0x01 // version(0) + flags 当“url”或“urn”的box flag为1时，字符串均为空。\n        ]);\n\n        // Sound media header\n        constants.SMHD = new Uint8Array([\n            0x00, 0x00, 0x00, 0x00, // version(0) + flags\tbox版本，0或1，一般为0。\n            0x00, 0x00, 0x00, 0x00 // balance(2) + reserved(2) 立体声平衡，[8.8] 格式值，一般为0，-1.0表示全部左声道，1.0表示全部右声道+2位保留位\n        ]);\n\n        // video media header\n        constants.VMHD = new Uint8Array([\n            0x00, 0x00, 0x00, 0x01, // version(0) + flags\n            0x00, 0x00, // graphicsmode: 2 bytes 视频合成模式，为0时拷贝原始图像，否则与opcolor进行合成   //理论上是4位啊  暂时保留\n            0x00, 0x00, 0x00, 0x00, // opcolor: 3 * 2 bytes ｛red，green，blue｝\n            0x00, 0x00\n        ]);\n    }\n\n    /**\n     * 封装box\n     */\n    static box(type) {\n        let size = 8;\n        let result = null;\n        const datas = Array.prototype.slice.call(arguments, 1);\n        const arrayCount = datas.length;\n\n        for (let i = 0; i < arrayCount; i++) {\n            size += datas[i].byteLength;\n        }\n        // box头部大小\n        result = new Uint8Array(size);\n        result[0] = (size >>> 24) & 0xFF; // size\n        result[1] = (size >>> 16) & 0xFF;\n        result[2] = (size >>> 8) & 0xFF;\n        result[3] = (size) & 0xFF;\n        // 写入box的type\n        result.set(type, 4); // type\n\n        let offset = 8;\n        for (let i = 0; i < arrayCount; i++) { // data body\n            result.set(datas[i], offset);\n            offset += datas[i].byteLength;\n        }\n\n        return result;\n    }\n\n    // 创建ftyp&moov\n    static generateInitSegment(meta) {\n        if (meta.constructor != Array) {\n            meta = [meta];\n        }\n        const ftyp = MP4.box(MP4.types.ftyp, MP4.constants.FTYP);\n        const moov = MP4.moov(meta);\n\n        const result = new Uint8Array(ftyp.byteLength + moov.byteLength);\n        result.set(ftyp, 0);\n        result.set(moov, ftyp.byteLength);\n        return result;\n    }\n\n    // Movie metadata box\n    static moov(meta) {\n        const mvhd = MP4.mvhd(meta[0].timescale, meta[0].duration); // /moov里面的第一个box\n        const vtrak = MP4.trak(meta[0]);\n        let atrak;\n        if (meta.length > 1) {\n            atrak = MP4.trak(meta[1]);\n        }\n\n        const mvex = MP4.mvex(meta);\n        if (meta.length > 1) { return MP4.box(MP4.types.moov, mvhd, vtrak, atrak, mvex); } else { return MP4.box(MP4.types.moov, mvhd, vtrak, mvex); }\n    }\n\n    // Movie header box\n    static mvhd(timescale, duration) {\n        return MP4.box(MP4.types.mvhd, new Uint8Array([\n            0x00, 0x00, 0x00, 0x00, // version(0) + flags     1位的box版本+3位flags   box版本，0或1，一般为0。（以下字节数均按version=0）\n            0x00, 0x00, 0x00, 0x00, // creation_time    创建时间  （相对于UTC时间1904-01-01零点的秒数）\n            0x00, 0x00, 0x00, 0x00, // modification_time   修改时间\n            (timescale >>> 24) & 0xFF, // timescale: 4 bytes\t\t文件媒体在1秒时间内的刻度值，可以理解为1秒长度\n            (timescale >>> 16) & 0xFF,\n            (timescale >>> 8) & 0xFF,\n            (timescale) & 0xFF,\n            (duration >>> 24) & 0xFF, // duration: 4 bytes\t该track的时间长度，用duration和time scale值可以计算track时长，比如audio track的time scale = 8000, duration = 560128，时长为70.016，video track的time scale = 600, duration = 42000，时长为70\n            (duration >>> 16) & 0xFF,\n            (duration >>> 8) & 0xFF,\n            (duration) & 0xFF,\n            0x00, 0x01, 0x00, 0x00, // Preferred rate: 1.0   推荐播放速率，高16位和低16位分别为小数点整数部分和小数部分，即[16.16] 格式，该值为1.0（0x00010000）表示正常前向播放\n            0x01, 0x00, 0x00, 0x00, // PreferredVolume(1.0, 2bytes) + reserved(2bytes)\t与rate类似，[8.8] 格式，1.0（0x0100）表示最大音量\n            0x00, 0x00, 0x00, 0x00, // reserved: 4 + 4 bytes\t保留位\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x01, 0x00, 0x00, // ----begin composition matrix----\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, // 视频变换矩阵   线性代数\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x01, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            0x40, 0x00, 0x00, 0x00, // ----end composition matrix----\n            0x00, 0x00, 0x00, 0x00, // ----begin pre_defined 6 * 4 bytes----\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, // pre-defined 保留位\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, // ----end pre_defined 6 * 4 bytes----\n            0xFF, 0xFF, 0xFF, 0xFF // next_track_ID 下一个track使用的id号\n        ]));\n    }\n\n    // Track box\n    static trak(meta) {\n        return MP4.box(MP4.types.trak, MP4.tkhd(meta), MP4.mdia(meta));\n    }\n\n    // Track header box\n    static tkhd(meta) {\n        let trackId = meta.id,\n            duration = meta.duration;\n        let width = meta.presentWidth,\n            height = meta.presentHeight;\n\n        return MP4.box(MP4.types.tkhd, new Uint8Array([\n            0x00, 0x00, 0x00, 0x07, // version(0) + flags 1位版本 box版本，0或1，一般为0。（以下字节数均按version=0）按位或操作结果值，预定义如下：\n            // 0x000001 track_enabled，否则该track不被播放；\n            // 0x000002 track_in_movie，表示该track在播放中被引用；\n            // 0x000004 track_in_preview，表示该track在预览时被引用。\n            // 一般该值为7，1+2+4 如果一个媒体所有track均未设置track_in_movie和track_in_preview，将被理解为所有track均设置了这两项；对于hint track，该值为0\n            // hint track  这个特殊的track并不包含媒体数据，而是包含了一些将其他数据track打包成流媒体的指示信息。\n            0x00, 0x00, 0x00, 0x00, // creation_time\t创建时间（相对于UTC时间1904-01-01零点的秒数）\n            0x00, 0x00, 0x00, 0x00, // modification_time\t修改时间\n            (trackId >>> 24) & 0xFF, // track_ID: 4 bytes\tid号，不能重复且不能为0\n            (trackId >>> 16) & 0xFF,\n            (trackId >>> 8) & 0xFF,\n            (trackId) & 0xFF,\n            0x00, 0x00, 0x00, 0x00, // reserved: 4 bytes    保留位\n            (duration >>> 24) & 0xFF, // duration: 4 bytes  \ttrack的时间长度\n            (duration >>> 16) & 0xFF,\n            (duration >>> 8) & 0xFF,\n            (duration) & 0xFF,\n            0x00, 0x00, 0x00, 0x00, // reserved: 2 * 4 bytes    保留位\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, // layer(2bytes) + alternate_group(2bytes)  视频层，默认为0，值小的在上层.track分组信息，默认为0表示该track未与其他track有群组关系\n            0x00, 0x00, 0x00, 0x00, // volume(2bytes) + reserved(2bytes)    [8.8] 格式，如果为音频track，1.0（0x0100）表示最大音量；否则为0   +保留位\n            0x00, 0x01, 0x00, 0x00, // ----begin composition matrix----\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x01, 0x00, 0x00, // 视频变换矩阵\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            0x40, 0x00, 0x00, 0x00, // ----end composition matrix----\n            (width >>> 8) & 0xFF, // //宽度\n            (width) & 0xFF,\n            0x00, 0x00,\n            (height >>> 8) & 0xFF, // 高度\n            (height) & 0xFF,\n            0x00, 0x00\n        ]));\n    }\n\n    /**\n     * “mdia”也是个container box，其子box的结构和种类还是比较复杂的。先来看一个“mdia”的实例结构树图。\n     * 总体来说，“mdia”定义了track媒体类型以及sample数据，描述sample信息。一般“mdia”包含一个“mdhd”，\n     * 一个“hdlr”和一个“minf”，其中“mdhd”为media header box，“hdlr”为handler reference box，\n     * “minf”为media information box。\n     *\n     * mdia\n     * \t\tmdhd\n     * \t\thdlr\n     * \t\tminf\n     * \t\t\tsmhd\n     * \t\t\tdinf\n     * \t\t\t\tdref\n     * \t\t\t\t\turl\n     * \t\t\tstbl\n     * \t\t\t\tstsd\n     * \t\t\t\t\tmp4a\n     * \t\t\t\t\t\tesds\n     * \t\t\t\tstts\n     * \t\t\t\tstsc\n     * \t\t\t\tstsz\n     * \t\t\t\tstco\n     */\n    static mdia(meta) {\n        return MP4.box(MP4.types.mdia, MP4.mdhd(meta), MP4.hdlr(meta), MP4.minf(meta));\n    }\n\n    // Media header box\n    static mdhd(meta) {\n        const timescale = meta.timescale;\n        const duration = meta.duration;\n        return MP4.box(MP4.types.mdhd, new Uint8Array([\n            0x00, 0x00, 0x00, 0x00, // version(0) + flags // version(0) + flags\t\tbox版本，0或1，一般为0。\n            0x00, 0x00, 0x00, 0x00, // creation_time    创建时间\n            0x00, 0x00, 0x00, 0x00, // modification_time修改时间\n            (timescale >>> 24) & 0xFF, // timescale: 4 bytes    文件媒体在1秒时间内的刻度值，可以理解为1秒长度\n            (timescale >>> 16) & 0xFF,\n            (timescale >>> 8) & 0xFF,\n            (timescale) & 0xFF,\n            (duration >>> 24) & 0xFF, // duration: 4 bytes  track的时间长度\n            (duration >>> 16) & 0xFF,\n            (duration >>> 8) & 0xFF,\n            (duration) & 0xFF,\n            0x55, 0xC4, // language: und (undetermined) 媒体语言码。最高位为0，后面15位为3个字符（见ISO 639-2/T标准中定义）\n            0x00, 0x00 // pre_defined = 0\n        ]));\n    }\n\n    // Media handler reference box\n    static hdlr(meta) {\n        let data = null;\n        if (meta.type === 'audio') {\n            data = MP4.constants.HDLR_AUDIO;\n        } else {\n            data = MP4.constants.HDLR_VIDEO;\n        }\n        return MP4.box(MP4.types.hdlr, data);\n    }\n\n    /**\n\t\t * “minf”存储了解释track媒体数据的handler-specific信息，media handler用这些信息将媒体时间映射到媒体数据并进行处理。“minf”中的信息格式和内容与媒体类型以及解释媒体数据的media handler密切相关，其他media handler不知道如何解释这些信息。“minf”是一个container box，其实际内容由子box说明。\n    一般情况下，“minf”包含一个header box，一个“dinf”和一个“stbl”，其中，header box根据track type（即media handler type）分为“vmhd”、“smhd”、“hmhd”和“nmhd”，“dinf”为data information box，“stbl”为sample table box。下面分别介绍。\n\n\t\t *\n\t\t */\n    // Media infomation box\n    static minf(meta) {\n        // header box根据track type（即media handler type）分为“vmhd”、“smhd”、“hmhd”和“nmhd”\n        let xmhd = null;\n        if (meta.type === 'audio') {\n            xmhd = MP4.box(MP4.types.smhd, MP4.constants.SMHD);\n        } else {\n            xmhd = MP4.box(MP4.types.vmhd, MP4.constants.VMHD);\n        }\n        return MP4.box(MP4.types.minf, xmhd, MP4.dinf(), MP4.stbl(meta));\n    }\n\n    /**\n     * Data Information Box\n     * “dinf”解释如何定位媒体信息，是一个container box。“dinf”一般包含一个“dref”，即data reference box；\n     * “dref”下会包含若干个“url”或“urn”，这些box组成一个表，用来定位track数据。\n     * 简单的说，track可以被分成若干段，每一段都可以根据“url”或“urn”指向的地址来获取数据，\n     * sample描述中会用这些片段的序号将这些片段组成一个完整的track。\n     * 一般情况下，当数据被完全包含在文件中时，“url”或“urn”中的定位字符串是空的。\n     */\n    static dinf() {\n        const result = MP4.box(MP4.types.dinf,\n            MP4.box(MP4.types.dref, MP4.constants.DREF)\n        );\n        return result;\n    }\n\n    /**\n\t\t * Sample Table Box（stbl）\n    \t*\t“stbl”几乎是普通的MP4文件中最复杂的一个box了，首先需要回忆一下sample的概念。\n \t\t* \tsample是媒体数据存储的单位，存储在media的chunk中，chunk和sample的长度均可互不相同，如下图所示。\n\t\t\t“stbl”是一个container box，其子box包括：sample description box（stsd）、\n\t\t\t * time to sample box（stts）、sample size box（stsz或stz2）、\n\t\t\t * sample to chunk box（stsc）、chunk offset box（stco或co64）、\n\t\t\t * composition time to sample box（ctts）、sync sample box（stss）\n\t\t\t * stsd”必不可少，且至少包含一个条目，该box包含了data reference box进行sample数据检索的信息。\n\t\t\t * 没有“stsd”就无法计算media sample的存储位置。“stsd”包含了编码的信息，其存储的信息随媒体类型不同而不同。\n\t\t\t * \t\t\tstbl\n\t\t\t * \t\t\t\tstsd\n\t\t\t * \t\t\t\t\tavc1\n\t\t\t * \t\t\t\t\t\tavcC\n\t\t\t * \t\t\t\tstts\n\t\t\t * \t\t\t\tstsc\n\t\t\t * \t\t\t\tstsz\n\t\t\t * \t\t\t\tstco\n\t\t */\n    static stbl(meta) {\n        const result = MP4.box(MP4.types.stbl, // type: stbl\n            MP4.stsd(meta), // Sample Description Table\n            MP4.box(MP4.types.stts, MP4.constants.STTS), // Time-To-Sample    因为stts的entry count 为0\n            // 所以没有关键帧index 的stss\n            // 也没有CTTS box CTTS是记录偏移量\n            MP4.box(MP4.types.stsc, MP4.constants.STSC), // Sample-To-Chunk\n            MP4.box(MP4.types.stsz, MP4.constants.STSZ), // Sample size\n            MP4.box(MP4.types.stco, MP4.constants.STCO) // Chunk offset\n        );\n        return result;\n    }\n\n    /**\n\t\t * Sample Description Box（stsd）\n    \t\tbox header和version字段后会有一个entry count字段，\n * \t\t\t根据entry的个数，每个entry会有type信息，如“vide”、“sund”等，\n * \t\t根据type不同sample description会提供不同的信息，例如对于video track，\n * 会有“VisualSampleEntry”类型信息，对于audio track会有“AudioSampleEntry”类型信息。\n\n\t\t * * \t\t\t\tstsd\n\t\t\t* \t\t\t\t\tmp4a\n\t\t\t* \t\t\t\t\t\tesds\n\t\t\t *\n\t\t\t *\n\t\t\t *\n\t\t\t *\n\t\t\t * \t\t 4 bytes - length in total\n\t\t\t\t\t 4 bytes - 4 char code of sample description table (stsd)\n\t\t\t\t\t 4 bytes - version & flags\n\t\t\t\t\t 4 bytes - number of sample entries (num_sample_entries)\n\t\t\t\t\t\t [\n\t\t\t\t\t\t    4 bytes - length of sample entry (len_sample_entry)\n\t\t\t\t\t\t    4 bytes - 4 char code of sample entry\n\t\t\t\t\t\t    ('len_sample_entry' - 8) bytes of data\n\t\t\t\t\t\t ] (repeated 'num_sample_entries' times)\n\t\t\t\t\t(4 bytes - optional 0x00000000 as end of box marker )\n\t\t */\n    static stsd(meta) {\n        if (meta.type === 'audio') {\n            return MP4.box(MP4.types.stsd, MP4.constants.STSD_PREFIX, MP4.mp4a(meta));\n        } else {\n            return MP4.box(MP4.types.stsd, MP4.constants.STSD_PREFIX, MP4.avc1(meta));\n        }\n    }\n\n    static mp4a(meta) {\n        const channelCount = meta.channelCount;\n        const sampleRate = meta.audioSampleRate;\n\n        const data = new Uint8Array([\n            0x00, 0x00, 0x00, 0x00, // reserved(4) 6个字节，设置为0；\n            0x00, 0x00, 0x00, 0x01, // reserved(2) + data_reference_index(2)\n            0x00, 0x00, 0x00, 0x00, // reserved: 2 * 4 bytes 保留位\n            0x00, 0x00, 0x00, 0x00,\n            0x00, channelCount, // channelCount(2) 单声道还是双声道\n            0x00, 0x10, // sampleSize(2)\n            0x00, 0x00, 0x00, 0x00, // reserved(4) 4字节保留位\n            (sampleRate >>> 8) & 0xFF, // Audio sample rate 显然要右移16位才有意义\ttemplate unsigned int(32) samplerate = {timescale of media}<<16;\n            (sampleRate) & 0xFF,\n            0x00, 0x00\n        ]);\n\n        return MP4.box(MP4.types.mp4a, data, MP4.esds(meta));\n    }\n\n    static esds(meta) {\n        const config = meta.config;\n        const configSize = config.length;\n        const data = new Uint8Array([\n            0x00, 0x00, 0x00, 0x00, // version 0 + flags\n\n            0x03, // descriptor_type    MP4ESDescrTag\n            0x17 + configSize, // length3\n            0x00, 0x01, // es_id\n            0x00, // stream_priority\n\n            0x04, // descriptor_type    MP4DecConfigDescrTag\n            0x0F + configSize, // length\n            0x40, // codec: mpeg4_audio\n            /**\n             *当objectTypeIndication为0x40时，为MPEG-4 Audio（MPEG-4 Audio generally is thought of as AAC\n             * but there is a whole framework of audio codecs that can Go in MPEG-4 Audio including AAC, BSAC, ALS, CELP,\n             * and something called MP3On4），如果想更细分format为aac还是mp3，\n             * 可以读取MP4DecSpecificDescr层data[0]的前五位\n             */\n            0x15, // stream_type: Audio\n            0x00, 0x00, 0x00, // buffer_size\n            0x00, 0x00, 0x00, 0x00, // maxBitrate\n            0x00, 0x00, 0x00, 0x00, // avgBitrate\n\n            0x05 // descriptor_type MP4DecSpecificDescrTag\n        ].concat([\n            configSize\n        ]).concat(\n            config\n        ).concat([\n            0x06, 0x01, 0x02 // GASpecificConfig\n        ]));\n        return MP4.box(MP4.types.esds, data);\n    }\n\n    /**\n     * 改版\n     *stsd下的avc1视频解析\n     */\n    static avc1(meta) {\n        const avcc = meta.avcc;\n        let width = meta.codecWidth,\n            height = meta.codecHeight;\n\n        const data = new Uint8Array([\n            0x00, 0x00, 0x00, 0x00, // // reserved(4)    6个 保留位\tReserved：6个字节，设置为0；\n            0x00, 0x00, 0x00, 0x01, // reserved(2) + {{{{data_reference_index(2)  数据引用索引}}}}\n            0x00, 0x00, 0x00, 0x00, // pre_defined(2) + reserved(2)\n            0x00, 0x00, 0x00, 0x00, // pre_defined: 3 * 4 bytes  3*4个字节的保留位\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            (width >>> 8) & 0xFF, // width: 2 bytes\n            (width) & 0xFF,\n            (height >>> 8) & 0xFF, // height: 2 bytes\n            (height) & 0xFF,\n            0x00, 0x48, 0x00, 0x00, // horizresolution: 4 bytes 常数\n            0x00, 0x48, 0x00, 0x00, // vertresolution: 4 bytes 常数\n            0x00, 0x00, 0x00, 0x00, // reserved: 4 bytes 保留位\n            0x00, 0x01, // frame_count\n            // frame_count表明多少帧压缩视频存储在每个样本。默认是1,每样一帧;它可能超过1每个样本的多个帧数\n            0x04, //\tstrlen compressorname: 32 bytes\t\t\tString[32]\n            // 32个8 bit    第一个8bit表示长度,剩下31个8bit表示内容\n            0x67, 0x31, 0x31, 0x31, // compressorname: 32 bytes    翻译过来是g111\n            0x00, 0x00, 0x00, 0x00, //\n            0x00, 0x00, 0x00, 0x00, //\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00,\n            0x00, 0x18, // depth 颜色深度\n            0xFF, 0xFF // pre_defined = -1\n        ]);\n        return MP4.box(MP4.types.avc1, data, MP4.box(MP4.types.avcC, avcc));\n    }\n\n    // Movie Extends box\n    static mvex(meta) {\n        if (meta.length > 1) { return MP4.box(MP4.types.mvex, MP4.trex(meta[0]), MP4.trex(meta[1])); } else { return MP4.box(MP4.types.mvex, MP4.trex(meta[0])); }\n    }\n\n    // Track Extends box\n    static trex(meta) {\n        const trackId = meta.id;\n        const data = new Uint8Array([\n            0x00, 0x00, 0x00, 0x00, // version(0) + flags\n            (trackId >>> 24) & 0xFF, // track_ID\n            (trackId >>> 16) & 0xFF,\n            (trackId >>> 8) & 0xFF,\n            (trackId) & 0xFF,\n            0x00, 0x00, 0x00, 0x01, // default_sample_description_index\n            0x00, 0x00, 0x00, 0x00, // default_sample_duration\n            0x00, 0x00, 0x00, 0x00, // default_sample_size\n            0x00, 0x01, 0x00, 0x01 // default_sample_flags\n        ]);\n        // if (meta.type !== 'video') {\n        //     data[data.length - 1] = 0x00;\n        // }\n        return MP4.box(MP4.types.trex, data);\n    }\n\n    // Movie fragment box\n    static moof(track, baseMediaDecodeTime) {\n        return MP4.box(MP4.types.moof, MP4.mfhd(track.sequenceNumber), MP4.traf(track, baseMediaDecodeTime));\n    }\n\n    static mfhd(sequenceNumber) {\n        const data = new Uint8Array([\n            0x00, 0x00, 0x00, 0x00,\n            (sequenceNumber >>> 24) & 0xFF, // sequence_number: int32\n            (sequenceNumber >>> 16) & 0xFF,\n            (sequenceNumber >>> 8) & 0xFF,\n            (sequenceNumber) & 0xFF\n        ]);\n        return MP4.box(MP4.types.mfhd, data);\n    }\n\n    // Track fragment box\n    static traf(track, baseMediaDecodeTime) {\n        const trackId = track.id;\n\n        // Track fragment header box\n        const tfhd = MP4.box(MP4.types.tfhd, new Uint8Array([\n            0x00, 0x00, 0x00, 0x00, // version(0) & flags\n            (trackId >>> 24) & 0xFF, // track_ID\n            (trackId >>> 16) & 0xFF,\n            (trackId >>> 8) & 0xFF,\n            (trackId) & 0xFF\n        ]));\n        // Track Fragment Decode Time\n        const tfdt = MP4.box(MP4.types.tfdt, new Uint8Array([\n            0x00, 0x00, 0x00, 0x00, // version(0) & flags\n            (baseMediaDecodeTime >>> 24) & 0xFF, // baseMediaDecodeTime: int32\n            (baseMediaDecodeTime >>> 16) & 0xFF,\n            (baseMediaDecodeTime >>> 8) & 0xFF,\n            (baseMediaDecodeTime) & 0xFF\n        ]));\n        const sdtp = MP4.sdtp(track);\n        const trun = MP4.trun(track, sdtp.byteLength + 16 + 16 + 8 + 16 + 8 + 8);\n\n        return MP4.box(MP4.types.traf, tfhd, tfdt, trun, sdtp);\n    }\n\n    // Sample Dependency Type box\n    static sdtp(track) {\n        const samples = track.samples || [];\n        const sampleCount = samples.length;\n        const data = new Uint8Array(4 + sampleCount);\n        // 0~4 bytes: version(0) & flags\n        for (let i = 0; i < sampleCount; i++) {\n            const flags = samples[i].flags;\n            data[i + 4] = (flags.isLeading << 6) // is_leading: 2 (bit)\n                |\n                (flags.dependsOn << 4) // sample_depends_on\n                |\n                (flags.isDependedOn << 2) // sample_is_depended_on\n                |\n                (flags.hasRedundancy); // sample_has_redundancy\n        }\n        return MP4.box(MP4.types.sdtp, data);\n    }\n\n    // Track fragment run box\n    static trun(track, offset) {\n        const samples = track.samples || [];\n        const sampleCount = samples.length;\n        const dataSize = 12 + 16 * sampleCount;\n        const data = new Uint8Array(dataSize);\n        offset += 8 + dataSize;\n\n        data.set([\n            0x00, 0x00, 0x0F, 0x01, // version(0) & flags\n            (sampleCount >>> 24) & 0xFF, // sample_count\n            (sampleCount >>> 16) & 0xFF,\n            (sampleCount >>> 8) & 0xFF,\n            (sampleCount) & 0xFF,\n            (offset >>> 24) & 0xFF, // data_offset\n            (offset >>> 16) & 0xFF,\n            (offset >>> 8) & 0xFF,\n            (offset) & 0xFF\n        ], 0);\n\n        for (let i = 0; i < sampleCount; i++) {\n\n            const duration = samples[i].duration;\n\n            const size = samples[i].size;\n            const flags = samples[i].flags;\n            const cts = samples[i].cts;\n            data.set([\n                (duration >>> 24) & 0xFF, // sample_duration\n                (duration >>> 16) & 0xFF,\n                (duration >>> 8) & 0xFF,\n                (duration) & 0xFF,\n                (size >>> 24) & 0xFF, // sample_size\n                (size >>> 16) & 0xFF,\n                (size >>> 8) & 0xFF,\n                (size) & 0xFF,\n                (flags.isLeading << 2) | flags.dependsOn, // sample_flags\n                (flags.isDependedOn << 6) | (flags.hasRedundancy << 4) | flags.isNonSync,\n                0x00, 0x00, // sample_degradation_priority\n                (cts >>> 24) & 0xFF, // sample_composition_time_offset\n                (cts >>> 16) & 0xFF,\n                (cts >>> 8) & 0xFF,\n                (cts) & 0xFF\n            ], 12 + 16 * i);\n        }\n        return MP4.box(MP4.types.trun, data);\n    }\n\n    static mdat(data) {\n        return MP4.box(MP4.types.mdat, data);\n    }\n\n}\n\nMP4.init();\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (MP4);//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _chimeeFlv2fmp = __webpack_require__(5);\n\nvar _chimeeFlv2fmp2 = _interopRequireDefault(_chimeeFlv2fmp);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar temp = new _chimeeFlv2fmp2.default(); /* eslint-disable */\n\nwindow.flvParse = {\n    mp4File: null,\n    succ: null,\n    // ftyp_moov:null,\n    tracks: [],\n    baseTime: 0,\n    setFlv: function setFlv(uint8, baseTime) {\n        if (flvParse.baseTime != baseTime) {\n            flvParse.baseTime = baseTime;\n            temp.seek(baseTime);\n        }\n        if (window.mp4Init) {\n            temp.onInitSegment = window.mp4Init;\n        }\n        if (window.onMediaSegment) {\n            temp.onMediaSegment = window.onMediaSegment;\n        }\n        if (window.seekCallBack) {\n            // temp.seekCallBack = window.se\n            temp.seekCallBack = window.seekCallBack;\n        }\n        if (window.onMediaInfo) {\n            temp.onMediaInfo = window.onMediaInfo;\n        }\n        return temp.setflv(uint8.buffer, baseTime);\n\n        // 用来获取moov\n    },\n    setLocFlv: function setLocFlv(uin8) {\n        return temp.setflvloc(uin8);\n    }\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9qcy9mbHZFbnRlci5qcz9iZGJiIl0sIm5hbWVzIjpbInRlbXAiLCJ3aW5kb3ciLCJmbHZQYXJzZSIsIm1wNEZpbGUiLCJzdWNjIiwidHJhY2tzIiwiYmFzZVRpbWUiLCJzZXRGbHYiLCJ1aW50OCIsInNlZWsiLCJtcDRJbml0Iiwib25Jbml0U2VnbWVudCIsIm9uTWVkaWFTZWdtZW50Iiwic2Vla0NhbGxCYWNrIiwib25NZWRpYUluZm8iLCJzZXRmbHYiLCJidWZmZXIiLCJzZXRMb2NGbHYiLCJ1aW44Iiwic2V0Zmx2bG9jIl0sIm1hcHBpbmdzIjoiOztBQUVBOzs7Ozs7QUFFQSxJQUFNQSxPQUFPLDZCQUFiLEMsQ0FKQTs7QUFNQUMsT0FBT0MsUUFBUCxHQUFrQjtBQUNkQyxhQUFTLElBREs7QUFFZEMsVUFBTSxJQUZRO0FBR2Q7QUFDQUMsWUFBUSxFQUpNO0FBS2RDLGNBQVUsQ0FMSTtBQU1kQyxVQU5jLGtCQU1QQyxLQU5PLEVBTUFGLFFBTkEsRUFNVTtBQUNwQixZQUFJSixTQUFTSSxRQUFULElBQXFCQSxRQUF6QixFQUFtQztBQUMvQkoscUJBQVNJLFFBQVQsR0FBb0JBLFFBQXBCO0FBQ0FOLGlCQUFLUyxJQUFMLENBQVVILFFBQVY7QUFDSDtBQUNELFlBQUlMLE9BQU9TLE9BQVgsRUFBb0I7QUFDaEJWLGlCQUFLVyxhQUFMLEdBQXFCVixPQUFPUyxPQUE1QjtBQUNIO0FBQ0QsWUFBSVQsT0FBT1csY0FBWCxFQUEyQjtBQUN2QlosaUJBQUtZLGNBQUwsR0FBc0JYLE9BQU9XLGNBQTdCO0FBQ0g7QUFDRCxZQUFJWCxPQUFPWSxZQUFYLEVBQXlCO0FBQ3JCO0FBQ0FiLGlCQUFLYSxZQUFMLEdBQW9CWixPQUFPWSxZQUEzQjtBQUNIO0FBQ0QsWUFBSVosT0FBT2EsV0FBWCxFQUF3QjtBQUNwQmQsaUJBQUtjLFdBQUwsR0FBbUJiLE9BQU9hLFdBQTFCO0FBQ0g7QUFDRCxlQUFPZCxLQUFLZSxNQUFMLENBQVlQLE1BQU1RLE1BQWxCLEVBQTBCVixRQUExQixDQUFQOztBQUVBO0FBRUgsS0E1QmE7QUE2QmRXLGFBN0JjLHFCQTZCSkMsSUE3QkksRUE2QkU7QUFDWixlQUFPbEIsS0FBS21CLFNBQUwsQ0FBZUQsSUFBZixDQUFQO0FBQ0g7QUEvQmEsQ0FBbEIiLCJmaWxlIjoiNC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlICovXG5cbmltcG9ydCBmMm0gZnJvbSAnY2hpbWVlLWZsdjJmbXA0JztcblxuY29uc3QgdGVtcCA9IG5ldyBmMm0oKTtcblxud2luZG93LmZsdlBhcnNlID0ge1xuICAgIG1wNEZpbGU6IG51bGwsXG4gICAgc3VjYzogbnVsbCxcbiAgICAvLyBmdHlwX21vb3Y6bnVsbCxcbiAgICB0cmFja3M6IFtdLFxuICAgIGJhc2VUaW1lOiAwLFxuICAgIHNldEZsdih1aW50OCwgYmFzZVRpbWUpIHtcbiAgICAgICAgaWYgKGZsdlBhcnNlLmJhc2VUaW1lICE9IGJhc2VUaW1lKSB7XG4gICAgICAgICAgICBmbHZQYXJzZS5iYXNlVGltZSA9IGJhc2VUaW1lO1xuICAgICAgICAgICAgdGVtcC5zZWVrKGJhc2VUaW1lKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAod2luZG93Lm1wNEluaXQpIHtcbiAgICAgICAgICAgIHRlbXAub25Jbml0U2VnbWVudCA9IHdpbmRvdy5tcDRJbml0O1xuICAgICAgICB9XG4gICAgICAgIGlmICh3aW5kb3cub25NZWRpYVNlZ21lbnQpIHtcbiAgICAgICAgICAgIHRlbXAub25NZWRpYVNlZ21lbnQgPSB3aW5kb3cub25NZWRpYVNlZ21lbnQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHdpbmRvdy5zZWVrQ2FsbEJhY2spIHtcbiAgICAgICAgICAgIC8vIHRlbXAuc2Vla0NhbGxCYWNrID0gd2luZG93LnNlXG4gICAgICAgICAgICB0ZW1wLnNlZWtDYWxsQmFjayA9IHdpbmRvdy5zZWVrQ2FsbEJhY2s7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHdpbmRvdy5vbk1lZGlhSW5mbykge1xuICAgICAgICAgICAgdGVtcC5vbk1lZGlhSW5mbyA9IHdpbmRvdy5vbk1lZGlhSW5mbztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGVtcC5zZXRmbHYodWludDguYnVmZmVyLCBiYXNlVGltZSk7XG5cbiAgICAgICAgLy8g55So5p2l6I635Y+WbW9vdlxuXG4gICAgfSxcbiAgICBzZXRMb2NGbHYodWluOCkge1xuICAgICAgICByZXR1cm4gdGVtcC5zZXRmbHZsb2ModWluOCk7XG4gICAgfVxufTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9qcy9mbHZFbnRlci5qcyJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 5 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__lib_flv2fmp4_js__ = __webpack_require__(12);\n\n// module.ex cpu;\nmodule.exports=__WEBPACK_IMPORTED_MODULE_0__lib_flv2fmp4_js__[\"a\" /* default */];\n/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(18)(module)))//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NoaW1lZS1mbHYyZm1wNC9pbmRleC5qcz9kYzdiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUE7QUFDQTtBQUNBLGlGIiwiZmlsZSI6IjUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY3B1IGZyb20gJy4vbGliL2ZsdjJmbXA0LmpzJztcbi8vIG1vZHVsZS5leCBjcHU7XG5tb2R1bGUuZXhwb3J0cz1jcHU7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NoaW1lZS1mbHYyZm1wNC9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gNVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 6 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* eslint-disable */\nfunction decodeUTF8(uint8array) {\n    const out = [];\n    const input = uint8array;\n    let i = 0;\n    const length = uint8array.length;\n\n    while (i < length) {\n        if (input[i] < 0x80) {\n            out.push(String.fromCharCode(input[i]));\n            ++i;\n            continue;\n        } else if (input[i] < 0xC0) {\n            // fallthrough\n        } else if (input[i] < 0xE0) {\n            if (checkContinuation(input, i, 1)) {\n                const ucs4 = (input[i] & 0x1F) << 6 | (input[i + 1] & 0x3F);\n                if (ucs4 >= 0x80) {\n                    out.push(String.fromCharCode(ucs4 & 0xFFFF));\n                    i += 2;\n                    continue;\n                }\n            }\n        } else if (input[i] < 0xF0) {\n            if (checkContinuation(input, i, 2)) {\n                const ucs4 = (input[i] & 0xF) << 12 | (input[i + 1] & 0x3F) << 6 | input[i + 2] & 0x3F;\n                if (ucs4 >= 0x800 && (ucs4 & 0xF800) !== 0xD800) {\n                    out.push(String.fromCharCode(ucs4 & 0xFFFF));\n                    i += 3;\n                    continue;\n                }\n            }\n        } else if (input[i] < 0xF8) {\n            if (checkContinuation(input, i, 3)) {\n                let ucs4 = (input[i] & 0x7) << 18 | (input[i + 1] & 0x3F) << 12 |\n                    (input[i + 2] & 0x3F) << 6 | (input[i + 3] & 0x3F);\n                if (ucs4 > 0x10000 && ucs4 < 0x110000) {\n                    ucs4 -= 0x10000;\n                    out.push(String.fromCharCode((ucs4 >>> 10) | 0xD800));\n                    out.push(String.fromCharCode((ucs4 & 0x3FF) | 0xDC00));\n                    i += 4;\n                    continue;\n                }\n            }\n        }\n        out.push(String.fromCharCode(0xFFFD));\n        ++i;\n    }\n\n    return out.join('');\n}\n\nfunction checkContinuation(uint8array, start, checkLength) {\n    let array = uint8array;\n    if (start + checkLength < array.length) {\n        while (checkLength--) {\n            if ((array[++start] & 0xC0) !== 0x80)\n                return false;\n        }\n        return true;\n    } else {\n        return false;\n    }\n}\n/* harmony default export */ __webpack_exports__[\"a\"] = (decodeUTF8);//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NoaW1lZS1mbHYyZm1wNC9saWIvZGVjb2RlVVRGOC5qcz85ZDVmIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjYuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSAqL1xuZnVuY3Rpb24gZGVjb2RlVVRGOCh1aW50OGFycmF5KSB7XG4gICAgY29uc3Qgb3V0ID0gW107XG4gICAgY29uc3QgaW5wdXQgPSB1aW50OGFycmF5O1xuICAgIGxldCBpID0gMDtcbiAgICBjb25zdCBsZW5ndGggPSB1aW50OGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlIChpIDwgbGVuZ3RoKSB7XG4gICAgICAgIGlmIChpbnB1dFtpXSA8IDB4ODApIHtcbiAgICAgICAgICAgIG91dC5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUoaW5wdXRbaV0pKTtcbiAgICAgICAgICAgICsraTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9IGVsc2UgaWYgKGlucHV0W2ldIDwgMHhDMCkge1xuICAgICAgICAgICAgLy8gZmFsbHRocm91Z2hcbiAgICAgICAgfSBlbHNlIGlmIChpbnB1dFtpXSA8IDB4RTApIHtcbiAgICAgICAgICAgIGlmIChjaGVja0NvbnRpbnVhdGlvbihpbnB1dCwgaSwgMSkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB1Y3M0ID0gKGlucHV0W2ldICYgMHgxRikgPDwgNiB8IChpbnB1dFtpICsgMV0gJiAweDNGKTtcbiAgICAgICAgICAgICAgICBpZiAodWNzNCA+PSAweDgwKSB7XG4gICAgICAgICAgICAgICAgICAgIG91dC5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUodWNzNCAmIDB4RkZGRikpO1xuICAgICAgICAgICAgICAgICAgICBpICs9IDI7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChpbnB1dFtpXSA8IDB4RjApIHtcbiAgICAgICAgICAgIGlmIChjaGVja0NvbnRpbnVhdGlvbihpbnB1dCwgaSwgMikpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB1Y3M0ID0gKGlucHV0W2ldICYgMHhGKSA8PCAxMiB8IChpbnB1dFtpICsgMV0gJiAweDNGKSA8PCA2IHwgaW5wdXRbaSArIDJdICYgMHgzRjtcbiAgICAgICAgICAgICAgICBpZiAodWNzNCA+PSAweDgwMCAmJiAodWNzNCAmIDB4RjgwMCkgIT09IDB4RDgwMCkge1xuICAgICAgICAgICAgICAgICAgICBvdXQucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlKHVjczQgJiAweEZGRkYpKTtcbiAgICAgICAgICAgICAgICAgICAgaSArPSAzO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoaW5wdXRbaV0gPCAweEY4KSB7XG4gICAgICAgICAgICBpZiAoY2hlY2tDb250aW51YXRpb24oaW5wdXQsIGksIDMpKSB7XG4gICAgICAgICAgICAgICAgbGV0IHVjczQgPSAoaW5wdXRbaV0gJiAweDcpIDw8IDE4IHwgKGlucHV0W2kgKyAxXSAmIDB4M0YpIDw8IDEyIHxcbiAgICAgICAgICAgICAgICAgICAgKGlucHV0W2kgKyAyXSAmIDB4M0YpIDw8IDYgfCAoaW5wdXRbaSArIDNdICYgMHgzRik7XG4gICAgICAgICAgICAgICAgaWYgKHVjczQgPiAweDEwMDAwICYmIHVjczQgPCAweDExMDAwMCkge1xuICAgICAgICAgICAgICAgICAgICB1Y3M0IC09IDB4MTAwMDA7XG4gICAgICAgICAgICAgICAgICAgIG91dC5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUoKHVjczQgPj4+IDEwKSB8IDB4RDgwMCkpO1xuICAgICAgICAgICAgICAgICAgICBvdXQucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlKCh1Y3M0ICYgMHgzRkYpIHwgMHhEQzAwKSk7XG4gICAgICAgICAgICAgICAgICAgIGkgKz0gNDtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIG91dC5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUoMHhGRkZEKSk7XG4gICAgICAgICsraTtcbiAgICB9XG5cbiAgICByZXR1cm4gb3V0LmpvaW4oJycpO1xufVxuXG5mdW5jdGlvbiBjaGVja0NvbnRpbnVhdGlvbih1aW50OGFycmF5LCBzdGFydCwgY2hlY2tMZW5ndGgpIHtcbiAgICBsZXQgYXJyYXkgPSB1aW50OGFycmF5O1xuICAgIGlmIChzdGFydCArIGNoZWNrTGVuZ3RoIDwgYXJyYXkubGVuZ3RoKSB7XG4gICAgICAgIHdoaWxlIChjaGVja0xlbmd0aC0tKSB7XG4gICAgICAgICAgICBpZiAoKGFycmF5Wysrc3RhcnRdICYgMHhDMCkgIT09IDB4ODApXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59XG5leHBvcnQgZGVmYXVsdCBkZWNvZGVVVEY4O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jaGltZWUtZmx2MmZtcDQvbGliL2RlY29kZVVURjguanNcbi8vIG1vZHVsZSBpZCA9IDZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 7 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/**\n * reference flv.js\n */\n/* eslint-disable */\n// Exponential-Golomb buffer decoder\nclass ExpGolomb {\n\n    constructor(uint8array) {\n        this.TAG = this.constructor.name;\n\n        this._buffer = uint8array;\n        this._buffer_index = 0;\n        this._total_bytes = uint8array.byteLength;\n        this._total_bits = uint8array.byteLength * 8;\n        this._current_word = 0;\n        this._current_word_bits_left = 0;\n    }\n\n    destroy() {\n        this._buffer = null;\n    }\n\n    _fillCurrentWord() {\n        const buffer_bytes_left = this._total_bytes - this._buffer_index;\n        if (buffer_bytes_left <= 0) { throw new IllegalStateException('ExpGolomb: _fillCurrentWord() but no bytes available'); }\n\n        const bytes_read = Math.min(4, buffer_bytes_left);\n        const word = new Uint8Array(4);\n        word.set(this._buffer.subarray(this._buffer_index, this._buffer_index + bytes_read));\n        this._current_word = new DataView(word.buffer).getUint32(0, false);\n\n        this._buffer_index += bytes_read;\n        this._current_word_bits_left = bytes_read * 8;\n    }\n\n    readBits(bits) {\n        if (bits > 32) { throw new InvalidArgumentException('ExpGolomb: readBits() bits exceeded max 32bits!'); }\n\n        if (bits <= this._current_word_bits_left) {\n            const result = this._current_word >>> (32 - bits);\n            this._current_word <<= bits;\n            this._current_word_bits_left -= bits;\n            return result;\n        }\n\n        let result = this._current_word_bits_left ? this._current_word : 0;\n        result = result >>> (32 - this._current_word_bits_left);\n        const bits_need_left = bits - this._current_word_bits_left;\n\n        this._fillCurrentWord();\n        const bits_read_next = Math.min(bits_need_left, this._current_word_bits_left);\n\n        const result2 = this._current_word >>> (32 - bits_read_next);\n        this._current_word <<= bits_read_next;\n        this._current_word_bits_left -= bits_read_next;\n\n        result = (result << bits_read_next) | result2;\n        return result;\n    }\n\n    readBool() {\n        return this.readBits(1) === 1;\n    }\n\n    readByte() {\n        return this.readBits(8);\n    }\n\n    _skipLeadingZero() {\n        let zero_count;\n        for (zero_count = 0; zero_count < this._current_word_bits_left; zero_count++) {\n            if ((this._current_word & (0x80000000 >>> zero_count)) !== 0) {\n                this._current_word <<= zero_count;\n                this._current_word_bits_left -= zero_count;\n                return zero_count;\n            }\n        }\n        this._fillCurrentWord();\n        return zero_count + this._skipLeadingZero();\n    }\n\n    readUEG() { // unsigned exponential golomb\n        const leading_zeros = this._skipLeadingZero();\n        return this.readBits(leading_zeros + 1) - 1;\n    }\n\n    readSEG() { // signed exponential golomb\n        const value = this.readUEG();\n        if (value & 0x01) {\n            return (value + 1) >>> 1;\n        } else {\n            return -1 * (value >>> 1);\n        }\n    }\n\n}\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (ExpGolomb);//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NoaW1lZS1mbHYyZm1wNC9saWIvZmx2L2V4cC1nb2xvbWIuanM/MTQ2YyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHFDQUFxQyx5RkFBeUY7O0FBRTlIO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHdCQUF3Qix1RkFBdUY7O0FBRS9HO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDRCQUE0QiwyQ0FBMkM7QUFDdkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7O0FBRUEsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEiLCJmaWxlIjoiNy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogcmVmZXJlbmNlIGZsdi5qc1xuICovXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuLy8gRXhwb25lbnRpYWwtR29sb21iIGJ1ZmZlciBkZWNvZGVyXG5jbGFzcyBFeHBHb2xvbWIge1xuXG4gICAgY29uc3RydWN0b3IodWludDhhcnJheSkge1xuICAgICAgICB0aGlzLlRBRyA9IHRoaXMuY29uc3RydWN0b3IubmFtZTtcblxuICAgICAgICB0aGlzLl9idWZmZXIgPSB1aW50OGFycmF5O1xuICAgICAgICB0aGlzLl9idWZmZXJfaW5kZXggPSAwO1xuICAgICAgICB0aGlzLl90b3RhbF9ieXRlcyA9IHVpbnQ4YXJyYXkuYnl0ZUxlbmd0aDtcbiAgICAgICAgdGhpcy5fdG90YWxfYml0cyA9IHVpbnQ4YXJyYXkuYnl0ZUxlbmd0aCAqIDg7XG4gICAgICAgIHRoaXMuX2N1cnJlbnRfd29yZCA9IDA7XG4gICAgICAgIHRoaXMuX2N1cnJlbnRfd29yZF9iaXRzX2xlZnQgPSAwO1xuICAgIH1cblxuICAgIGRlc3Ryb3koKSB7XG4gICAgICAgIHRoaXMuX2J1ZmZlciA9IG51bGw7XG4gICAgfVxuXG4gICAgX2ZpbGxDdXJyZW50V29yZCgpIHtcbiAgICAgICAgY29uc3QgYnVmZmVyX2J5dGVzX2xlZnQgPSB0aGlzLl90b3RhbF9ieXRlcyAtIHRoaXMuX2J1ZmZlcl9pbmRleDtcbiAgICAgICAgaWYgKGJ1ZmZlcl9ieXRlc19sZWZ0IDw9IDApIHsgdGhyb3cgbmV3IElsbGVnYWxTdGF0ZUV4Y2VwdGlvbignRXhwR29sb21iOiBfZmlsbEN1cnJlbnRXb3JkKCkgYnV0IG5vIGJ5dGVzIGF2YWlsYWJsZScpOyB9XG5cbiAgICAgICAgY29uc3QgYnl0ZXNfcmVhZCA9IE1hdGgubWluKDQsIGJ1ZmZlcl9ieXRlc19sZWZ0KTtcbiAgICAgICAgY29uc3Qgd29yZCA9IG5ldyBVaW50OEFycmF5KDQpO1xuICAgICAgICB3b3JkLnNldCh0aGlzLl9idWZmZXIuc3ViYXJyYXkodGhpcy5fYnVmZmVyX2luZGV4LCB0aGlzLl9idWZmZXJfaW5kZXggKyBieXRlc19yZWFkKSk7XG4gICAgICAgIHRoaXMuX2N1cnJlbnRfd29yZCA9IG5ldyBEYXRhVmlldyh3b3JkLmJ1ZmZlcikuZ2V0VWludDMyKDAsIGZhbHNlKTtcblxuICAgICAgICB0aGlzLl9idWZmZXJfaW5kZXggKz0gYnl0ZXNfcmVhZDtcbiAgICAgICAgdGhpcy5fY3VycmVudF93b3JkX2JpdHNfbGVmdCA9IGJ5dGVzX3JlYWQgKiA4O1xuICAgIH1cblxuICAgIHJlYWRCaXRzKGJpdHMpIHtcbiAgICAgICAgaWYgKGJpdHMgPiAzMikgeyB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXhjZXB0aW9uKCdFeHBHb2xvbWI6IHJlYWRCaXRzKCkgYml0cyBleGNlZWRlZCBtYXggMzJiaXRzIScpOyB9XG5cbiAgICAgICAgaWYgKGJpdHMgPD0gdGhpcy5fY3VycmVudF93b3JkX2JpdHNfbGVmdCkge1xuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5fY3VycmVudF93b3JkID4+PiAoMzIgLSBiaXRzKTtcbiAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRfd29yZCA8PD0gYml0cztcbiAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRfd29yZF9iaXRzX2xlZnQgLT0gYml0cztcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgcmVzdWx0ID0gdGhpcy5fY3VycmVudF93b3JkX2JpdHNfbGVmdCA/IHRoaXMuX2N1cnJlbnRfd29yZCA6IDA7XG4gICAgICAgIHJlc3VsdCA9IHJlc3VsdCA+Pj4gKDMyIC0gdGhpcy5fY3VycmVudF93b3JkX2JpdHNfbGVmdCk7XG4gICAgICAgIGNvbnN0IGJpdHNfbmVlZF9sZWZ0ID0gYml0cyAtIHRoaXMuX2N1cnJlbnRfd29yZF9iaXRzX2xlZnQ7XG5cbiAgICAgICAgdGhpcy5fZmlsbEN1cnJlbnRXb3JkKCk7XG4gICAgICAgIGNvbnN0IGJpdHNfcmVhZF9uZXh0ID0gTWF0aC5taW4oYml0c19uZWVkX2xlZnQsIHRoaXMuX2N1cnJlbnRfd29yZF9iaXRzX2xlZnQpO1xuXG4gICAgICAgIGNvbnN0IHJlc3VsdDIgPSB0aGlzLl9jdXJyZW50X3dvcmQgPj4+ICgzMiAtIGJpdHNfcmVhZF9uZXh0KTtcbiAgICAgICAgdGhpcy5fY3VycmVudF93b3JkIDw8PSBiaXRzX3JlYWRfbmV4dDtcbiAgICAgICAgdGhpcy5fY3VycmVudF93b3JkX2JpdHNfbGVmdCAtPSBiaXRzX3JlYWRfbmV4dDtcblxuICAgICAgICByZXN1bHQgPSAocmVzdWx0IDw8IGJpdHNfcmVhZF9uZXh0KSB8IHJlc3VsdDI7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgcmVhZEJvb2woKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlYWRCaXRzKDEpID09PSAxO1xuICAgIH1cblxuICAgIHJlYWRCeXRlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yZWFkQml0cyg4KTtcbiAgICB9XG5cbiAgICBfc2tpcExlYWRpbmdaZXJvKCkge1xuICAgICAgICBsZXQgemVyb19jb3VudDtcbiAgICAgICAgZm9yICh6ZXJvX2NvdW50ID0gMDsgemVyb19jb3VudCA8IHRoaXMuX2N1cnJlbnRfd29yZF9iaXRzX2xlZnQ7IHplcm9fY291bnQrKykge1xuICAgICAgICAgICAgaWYgKCh0aGlzLl9jdXJyZW50X3dvcmQgJiAoMHg4MDAwMDAwMCA+Pj4gemVyb19jb3VudCkpICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fY3VycmVudF93b3JkIDw8PSB6ZXJvX2NvdW50O1xuICAgICAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRfd29yZF9iaXRzX2xlZnQgLT0gemVyb19jb3VudDtcbiAgICAgICAgICAgICAgICByZXR1cm4gemVyb19jb3VudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9maWxsQ3VycmVudFdvcmQoKTtcbiAgICAgICAgcmV0dXJuIHplcm9fY291bnQgKyB0aGlzLl9za2lwTGVhZGluZ1plcm8oKTtcbiAgICB9XG5cbiAgICByZWFkVUVHKCkgeyAvLyB1bnNpZ25lZCBleHBvbmVudGlhbCBnb2xvbWJcbiAgICAgICAgY29uc3QgbGVhZGluZ196ZXJvcyA9IHRoaXMuX3NraXBMZWFkaW5nWmVybygpO1xuICAgICAgICByZXR1cm4gdGhpcy5yZWFkQml0cyhsZWFkaW5nX3plcm9zICsgMSkgLSAxO1xuICAgIH1cblxuICAgIHJlYWRTRUcoKSB7IC8vIHNpZ25lZCBleHBvbmVudGlhbCBnb2xvbWJcbiAgICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLnJlYWRVRUcoKTtcbiAgICAgICAgaWYgKHZhbHVlICYgMHgwMSkge1xuICAgICAgICAgICAgcmV0dXJuICh2YWx1ZSArIDEpID4+PiAxO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIC0xICogKHZhbHVlID4+PiAxKTtcbiAgICAgICAgfVxuICAgIH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBFeHBHb2xvbWI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NoaW1lZS1mbHYyZm1wNC9saWIvZmx2L2V4cC1nb2xvbWIuanNcbi8vIG1vZHVsZSBpZCA9IDdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 8 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__flvTag_js__ = __webpack_require__(9);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__tagdemux__ = __webpack_require__(2);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils_error__ = __webpack_require__(0);\n/* eslint-disable */\n\n\n\nclass FlvParse {\n    constructor() {\n        this.tempUint8 = new Uint8Array();\n        this.arrTag = [];\n        this.index = 0;\n        this.tempArr = [];\n        this.stop = false;\n        this.offset = 0;\n        this.frist = true;\n        this._hasAudio = false;\n        this._hasVideo = false;\n    }\n\n    /**\n     * 接受 外部的flv二进制数据\n     */\n    setFlv(uint8) {\n        this.stop = false;\n        this.arrTag = [];\n        this.index = 0;\n        this.tempUint8 = uint8;\n        if (this.tempUint8.length > 13 && this.tempUint8[0] == 70 && this.tempUint8[1] == 76 && this.tempUint8[2] == 86) {\n            this.probe(this.tempUint8.buffer);\n            this.read(9); // 略掉9个字节的flv header tag\n            this.read(4); // 略掉第一个4字节的 tag size\n            this.parse();\n            this.frist = false;\n            return this.offset;\n        } else if (!this.frist) {\n            return this.parse();\n        } else {\n            return this.offset;\n        }\n    }\n    probe(buffer) {\n        const data = new Uint8Array(buffer);\n        const mismatch = { match: false };\n\n        if (data[0] !== 0x46 || data[1] !== 0x4C || data[2] !== 0x56 || data[3] !== 0x01) {\n            return mismatch;\n        }\n\n        const hasAudio = ((data[4] & 4) >>> 2) !== 0;\n        const hasVideo = (data[4] & 1) !== 0;\n\n        if (!hasAudio && !hasVideo) {\n            return mismatch;\n        }\n        this._hasAudio = __WEBPACK_IMPORTED_MODULE_1__tagdemux__[\"a\" /* default */]._hasAudio = hasAudio;\n        this._hasVideo = __WEBPACK_IMPORTED_MODULE_1__tagdemux__[\"a\" /* default */]._hasVideo = hasVideo;\n        return {\n            match: true,\n            hasAudioTrack: hasAudio,\n            hasVideoTrack: hasVideo\n        };\n    }\n\n    /**\n     * 开始解析\n     */\n    parse() {\n\n        while (this.index < this.tempUint8.length && !this.stop) {\n            this.offset = this.index;\n\n            const t = new __WEBPACK_IMPORTED_MODULE_0__flvTag_js__[\"a\" /* default */]();\n            if (this.tempUint8.length - this.index >= 11) {\n                t.tagType = (this.read(1)[0]); // 取出tag类型\n                t.dataSize = this.read(3); // 取出包体大小\n                t.Timestamp = this.read(4); // 取出解码时间\n                t.StreamID = this.read(3); // 取出stream id\n            } else {\n                this.stop = true;\n                continue;\n            }\n            if (t.tagType == 18 || t.tagType == 8 || t.tagType == 9) {\n\n            } else {\n                throw new __WEBPACK_IMPORTED_MODULE_2__utils_error__[\"a\" /* default */]('wrong tagType' + t.tagType);\n            }\n            if (this.tempUint8.length - this.index >= (this.getBodySum(t.dataSize) + 4)) {\n                t.body = this.read(this.getBodySum(t.dataSize)); // 取出body\n                if (t.tagType == 9 && this._hasVideo) {\n                    this.arrTag.push(t);\n                }\n                if (t.tagType == 8 && this._hasAudio) {\n                    this.arrTag.push(t);\n                }\n                if (t.tagType == 18) {\n                    this.arrTag.push(t);\n                }\n                this.read(4);\n            } else {\n                this.stop = true;\n                continue;\n            }\n            this.offset = this.index;\n        }\n\n        return this.offset;\n    }\n    read(length) {\n        // let u8a = new Uint8Array(length);\n        // u8a.set(this.tempUint8.subarray(this.index, this.index + length), 0);\n        const u8a = this.tempUint8.slice(this.index, this.index + length);\n        this.index += length;\n        return u8a;\n    }\n\n    /**\n     * 计算tag包体大小\n     */\n    getBodySum(arr) {\n        let _str = '';\n        _str += (arr[0].toString(16).length == 1 ? '0' + arr[0].toString(16) : arr[0].toString(16));\n        _str += (arr[1].toString(16).length == 1 ? '0' + arr[1].toString(16) : arr[1].toString(16));\n        _str += (arr[2].toString(16).length == 1 ? '0' + arr[2].toString(16) : arr[2].toString(16));\n        return parseInt(_str, 16);\n    }\n}\n/* harmony default export */ __webpack_exports__[\"a\"] = (new FlvParse());//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NoaW1lZS1mbHYyZm1wNC9saWIvZmx2L2ZsdlBhcnNlLmpzPzY4YTIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjs7QUFFMUI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSw4Q0FBOEM7QUFDOUMsMENBQTBDO0FBQzFDLDJDQUEyQztBQUMzQywwQ0FBMEM7QUFDMUMsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSxnRUFBZ0U7QUFDaEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjguanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSAqL1xuaW1wb3J0IHRhZyBmcm9tICcuL2ZsdlRhZy5qcyc7XG5pbXBvcnQgdGFnZGVtdXggZnJvbSAnLi90YWdkZW11eCc7XG5pbXBvcnQgZXJyb3IgZnJvbSAnLi4vdXRpbHMvZXJyb3InXG5jbGFzcyBGbHZQYXJzZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMudGVtcFVpbnQ4ID0gbmV3IFVpbnQ4QXJyYXkoKTtcbiAgICAgICAgdGhpcy5hcnJUYWcgPSBbXTtcbiAgICAgICAgdGhpcy5pbmRleCA9IDA7XG4gICAgICAgIHRoaXMudGVtcEFyciA9IFtdO1xuICAgICAgICB0aGlzLnN0b3AgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5vZmZzZXQgPSAwO1xuICAgICAgICB0aGlzLmZyaXN0ID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5faGFzQXVkaW8gPSBmYWxzZTtcbiAgICAgICAgdGhpcy5faGFzVmlkZW8gPSBmYWxzZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDmjqXlj5cg5aSW6YOo55qEZmx25LqM6L+b5Yi25pWw5o2uXG4gICAgICovXG4gICAgc2V0Rmx2KHVpbnQ4KSB7XG4gICAgICAgIHRoaXMuc3RvcCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmFyclRhZyA9IFtdO1xuICAgICAgICB0aGlzLmluZGV4ID0gMDtcbiAgICAgICAgdGhpcy50ZW1wVWludDggPSB1aW50ODtcbiAgICAgICAgaWYgKHRoaXMudGVtcFVpbnQ4Lmxlbmd0aCA+IDEzICYmIHRoaXMudGVtcFVpbnQ4WzBdID09IDcwICYmIHRoaXMudGVtcFVpbnQ4WzFdID09IDc2ICYmIHRoaXMudGVtcFVpbnQ4WzJdID09IDg2KSB7XG4gICAgICAgICAgICB0aGlzLnByb2JlKHRoaXMudGVtcFVpbnQ4LmJ1ZmZlcik7XG4gICAgICAgICAgICB0aGlzLnJlYWQoOSk7IC8vIOeVpeaOiTnkuKrlrZfoioLnmoRmbHYgaGVhZGVyIHRhZ1xuICAgICAgICAgICAgdGhpcy5yZWFkKDQpOyAvLyDnlaXmjonnrKzkuIDkuKo05a2X6IqC55qEIHRhZyBzaXplXG4gICAgICAgICAgICB0aGlzLnBhcnNlKCk7XG4gICAgICAgICAgICB0aGlzLmZyaXN0ID0gZmFsc2U7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5vZmZzZXQ7XG4gICAgICAgIH0gZWxzZSBpZiAoIXRoaXMuZnJpc3QpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnBhcnNlKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5vZmZzZXQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcHJvYmUoYnVmZmVyKSB7XG4gICAgICAgIGNvbnN0IGRhdGEgPSBuZXcgVWludDhBcnJheShidWZmZXIpO1xuICAgICAgICBjb25zdCBtaXNtYXRjaCA9IHsgbWF0Y2g6IGZhbHNlIH07XG5cbiAgICAgICAgaWYgKGRhdGFbMF0gIT09IDB4NDYgfHwgZGF0YVsxXSAhPT0gMHg0QyB8fCBkYXRhWzJdICE9PSAweDU2IHx8IGRhdGFbM10gIT09IDB4MDEpIHtcbiAgICAgICAgICAgIHJldHVybiBtaXNtYXRjaDtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGhhc0F1ZGlvID0gKChkYXRhWzRdICYgNCkgPj4+IDIpICE9PSAwO1xuICAgICAgICBjb25zdCBoYXNWaWRlbyA9IChkYXRhWzRdICYgMSkgIT09IDA7XG5cbiAgICAgICAgaWYgKCFoYXNBdWRpbyAmJiAhaGFzVmlkZW8pIHtcbiAgICAgICAgICAgIHJldHVybiBtaXNtYXRjaDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9oYXNBdWRpbyA9IHRhZ2RlbXV4Ll9oYXNBdWRpbyA9IGhhc0F1ZGlvO1xuICAgICAgICB0aGlzLl9oYXNWaWRlbyA9IHRhZ2RlbXV4Ll9oYXNWaWRlbyA9IGhhc1ZpZGVvO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbWF0Y2g6IHRydWUsXG4gICAgICAgICAgICBoYXNBdWRpb1RyYWNrOiBoYXNBdWRpbyxcbiAgICAgICAgICAgIGhhc1ZpZGVvVHJhY2s6IGhhc1ZpZGVvXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog5byA5aeL6Kej5p6QXG4gICAgICovXG4gICAgcGFyc2UoKSB7XG5cbiAgICAgICAgd2hpbGUgKHRoaXMuaW5kZXggPCB0aGlzLnRlbXBVaW50OC5sZW5ndGggJiYgIXRoaXMuc3RvcCkge1xuICAgICAgICAgICAgdGhpcy5vZmZzZXQgPSB0aGlzLmluZGV4O1xuXG4gICAgICAgICAgICBjb25zdCB0ID0gbmV3IHRhZygpO1xuICAgICAgICAgICAgaWYgKHRoaXMudGVtcFVpbnQ4Lmxlbmd0aCAtIHRoaXMuaW5kZXggPj0gMTEpIHtcbiAgICAgICAgICAgICAgICB0LnRhZ1R5cGUgPSAodGhpcy5yZWFkKDEpWzBdKTsgLy8g5Y+W5Ye6dGFn57G75Z6LXG4gICAgICAgICAgICAgICAgdC5kYXRhU2l6ZSA9IHRoaXMucmVhZCgzKTsgLy8g5Y+W5Ye65YyF5L2T5aSn5bCPXG4gICAgICAgICAgICAgICAgdC5UaW1lc3RhbXAgPSB0aGlzLnJlYWQoNCk7IC8vIOWPluWHuuino+eggeaXtumXtFxuICAgICAgICAgICAgICAgIHQuU3RyZWFtSUQgPSB0aGlzLnJlYWQoMyk7IC8vIOWPluWHunN0cmVhbSBpZFxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0b3AgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHQudGFnVHlwZSA9PSAxOCB8fCB0LnRhZ1R5cGUgPT0gOCB8fCB0LnRhZ1R5cGUgPT0gOSkge1xuXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcignd3JvbmcgdGFnVHlwZScgKyB0LnRhZ1R5cGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMudGVtcFVpbnQ4Lmxlbmd0aCAtIHRoaXMuaW5kZXggPj0gKHRoaXMuZ2V0Qm9keVN1bSh0LmRhdGFTaXplKSArIDQpKSB7XG4gICAgICAgICAgICAgICAgdC5ib2R5ID0gdGhpcy5yZWFkKHRoaXMuZ2V0Qm9keVN1bSh0LmRhdGFTaXplKSk7IC8vIOWPluWHumJvZHlcbiAgICAgICAgICAgICAgICBpZiAodC50YWdUeXBlID09IDkgJiYgdGhpcy5faGFzVmlkZW8pIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hcnJUYWcucHVzaCh0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHQudGFnVHlwZSA9PSA4ICYmIHRoaXMuX2hhc0F1ZGlvKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYXJyVGFnLnB1c2godCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0LnRhZ1R5cGUgPT0gMTgpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hcnJUYWcucHVzaCh0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5yZWFkKDQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0b3AgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5vZmZzZXQgPSB0aGlzLmluZGV4O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMub2Zmc2V0O1xuICAgIH1cbiAgICByZWFkKGxlbmd0aCkge1xuICAgICAgICAvLyBsZXQgdThhID0gbmV3IFVpbnQ4QXJyYXkobGVuZ3RoKTtcbiAgICAgICAgLy8gdThhLnNldCh0aGlzLnRlbXBVaW50OC5zdWJhcnJheSh0aGlzLmluZGV4LCB0aGlzLmluZGV4ICsgbGVuZ3RoKSwgMCk7XG4gICAgICAgIGNvbnN0IHU4YSA9IHRoaXMudGVtcFVpbnQ4LnNsaWNlKHRoaXMuaW5kZXgsIHRoaXMuaW5kZXggKyBsZW5ndGgpO1xuICAgICAgICB0aGlzLmluZGV4ICs9IGxlbmd0aDtcbiAgICAgICAgcmV0dXJuIHU4YTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDorqHnrpd0YWfljIXkvZPlpKflsI9cbiAgICAgKi9cbiAgICBnZXRCb2R5U3VtKGFycikge1xuICAgICAgICBsZXQgX3N0ciA9ICcnO1xuICAgICAgICBfc3RyICs9IChhcnJbMF0udG9TdHJpbmcoMTYpLmxlbmd0aCA9PSAxID8gJzAnICsgYXJyWzBdLnRvU3RyaW5nKDE2KSA6IGFyclswXS50b1N0cmluZygxNikpO1xuICAgICAgICBfc3RyICs9IChhcnJbMV0udG9TdHJpbmcoMTYpLmxlbmd0aCA9PSAxID8gJzAnICsgYXJyWzFdLnRvU3RyaW5nKDE2KSA6IGFyclsxXS50b1N0cmluZygxNikpO1xuICAgICAgICBfc3RyICs9IChhcnJbMl0udG9TdHJpbmcoMTYpLmxlbmd0aCA9PSAxID8gJzAnICsgYXJyWzJdLnRvU3RyaW5nKDE2KSA6IGFyclsyXS50b1N0cmluZygxNikpO1xuICAgICAgICByZXR1cm4gcGFyc2VJbnQoX3N0ciwgMTYpO1xuICAgIH1cbn1cbmV4cG9ydCBkZWZhdWx0IG5ldyBGbHZQYXJzZSgpO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jaGltZWUtZmx2MmZtcDQvbGliL2Zsdi9mbHZQYXJzZS5qc1xuLy8gbW9kdWxlIGlkID0gOFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 9 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* eslint-disable */\nclass FlvTag {\n    constructor() {\n        this.tagType = -1;\n        this.dataSize = -1;\n        this.Timestamp = -1;\n        this.StreamID = -1;\n        this.body = -1;\n        this.time = -1;\n        this.arr = [];\n    }\n    getTime() {\n        // this.Timestamp.pop();\n        this.arr = [];\n        for (let i = 0; i < this.Timestamp.length; i++) {\n            this.arr.push((this.Timestamp[i].toString(16).length == 1 ? '0' + this.Timestamp[i].toString(16) : this.Timestamp[i].toString(16)));\n        }\n        this.arr.pop();\n        const time = this.arr.join('');\n        this.time = parseInt(time, 16);\n        return parseInt(time, 16);\n    }\n}\n/* harmony export (immutable) */ __webpack_exports__[\"a\"] = FlvTag;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NoaW1lZS1mbHYyZm1wNC9saWIvZmx2L2ZsdlRhZy5qcz9mYWFhIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsMkJBQTJCO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQyIsImZpbGUiOiI5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEZsdlRhZyB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMudGFnVHlwZSA9IC0xO1xuICAgICAgICB0aGlzLmRhdGFTaXplID0gLTE7XG4gICAgICAgIHRoaXMuVGltZXN0YW1wID0gLTE7XG4gICAgICAgIHRoaXMuU3RyZWFtSUQgPSAtMTtcbiAgICAgICAgdGhpcy5ib2R5ID0gLTE7XG4gICAgICAgIHRoaXMudGltZSA9IC0xO1xuICAgICAgICB0aGlzLmFyciA9IFtdO1xuICAgIH1cbiAgICBnZXRUaW1lKCkge1xuICAgICAgICAvLyB0aGlzLlRpbWVzdGFtcC5wb3AoKTtcbiAgICAgICAgdGhpcy5hcnIgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLlRpbWVzdGFtcC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdGhpcy5hcnIucHVzaCgodGhpcy5UaW1lc3RhbXBbaV0udG9TdHJpbmcoMTYpLmxlbmd0aCA9PSAxID8gJzAnICsgdGhpcy5UaW1lc3RhbXBbaV0udG9TdHJpbmcoMTYpIDogdGhpcy5UaW1lc3RhbXBbaV0udG9TdHJpbmcoMTYpKSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5hcnIucG9wKCk7XG4gICAgICAgIGNvbnN0IHRpbWUgPSB0aGlzLmFyci5qb2luKCcnKTtcbiAgICAgICAgdGhpcy50aW1lID0gcGFyc2VJbnQodGltZSwgMTYpO1xuICAgICAgICByZXR1cm4gcGFyc2VJbnQodGltZSwgMTYpO1xuICAgIH1cbn1cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY2hpbWVlLWZsdjJmbXA0L2xpYi9mbHYvZmx2VGFnLmpzXG4vLyBtb2R1bGUgaWQgPSA5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 10 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__decodeUTF8__ = __webpack_require__(6);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__sps_parser__ = __webpack_require__(1);\n/* eslint-disable */\n\n\nconst le = (function() {\n    const buf = new ArrayBuffer(2);\n    (new DataView(buf)).setInt16(0, 256, true); // little-endian write\n    return (new Int16Array(buf))[0] === 256; // platform-spec read, if equal then LE\n})();\nclass flvDemux {\n\n    constructor() {\n\n    }\n    static parseObject(arrayBuffer, dataOffset, dataSize) {\n\n        const name = flvDemux.parseString(arrayBuffer, dataOffset, dataSize);\n        const value = flvDemux.parseScript(arrayBuffer, dataOffset + name.size);\n        const isObjectEnd = value.objectEnd;\n\n        return {\n            data: {\n                name: name.data,\n                value: value.data\n            },\n            size: value.size,\n            objectEnd: isObjectEnd\n        };\n    }\n\n    static parseVariable(arrayBuffer, dataOffset, dataSize) {\n        return flvDemux.parseObject(arrayBuffer, dataOffset, dataSize);\n    }\n    static parseLongString(arrayBuffer, dataOffset, dataSize) {\n\n        const v = new DataView(arrayBuffer, dataOffset);\n        const length = v.getUint32(0, !le);\n\n        let str;\n        if (length > 0) {\n            str = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__decodeUTF8__[\"a\" /* default */])(new Uint8Array(arrayBuffer, dataOffset + 4, length));\n        } else {\n            str = '';\n        }\n\n        return {\n            data: str,\n            size: 4 + length\n        };\n    }\n    static parseDate(arrayBuffer, dataOffset, dataSize) {\n\n        const v = new DataView(arrayBuffer, dataOffset);\n        let timestamp = v.getFloat64(0, !le);\n        const localTimeOffset = v.getInt16(8, !le);\n        timestamp += localTimeOffset * 60 * 1000; // get UTC time\n\n        return {\n            data: new Date(timestamp),\n            size: 8 + 2\n        };\n    }\n    static parseString(arrayBuffer, dataOffset, dataSize) {\n        const v = new DataView(arrayBuffer, dataOffset);\n        const length = v.getUint16(0, !le);\n        let str;\n        if (length > 0) {\n            str = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__decodeUTF8__[\"a\" /* default */])(new Uint8Array(arrayBuffer, dataOffset + 2, length));\n        } else {\n            str = '';\n        }\n        return {\n            data: str,\n            size: 2 + length\n        };\n    }\n\n    /**\n     * 解析metadata\n     */\n    static parseMetadata(arr) {\n        const name = flvDemux.parseScript(arr, 0);\n        const value = flvDemux.parseScript(arr, name.size, arr.length - name.size);\n        // return {}\n        const data = {};\n        data[name.data] = value.data;\n        return data;\n    }\n\n    static parseScript(arr, offset, dataSize) {\n        let dataOffset = offset;\n        const object = {};\n        const uint8 = new Uint8Array(arr);\n        const buffer = uint8.buffer;\n        const dv = new DataView(buffer, 0, dataSize);\n        let value = null;\n        let objectEnd = false;\n        const type = (dv.getUint8(dataOffset));\n        dataOffset += 1;\n\n        switch (type) {\n            case 0: // Number(Double) type\n                value = dv.getFloat64(dataOffset, !le);\n                dataOffset += 8;\n                break;\n            case 1:\n                { // Boolean type\n                    const b = dv.getUint8(dataOffset);\n                    value = !!b;\n                    dataOffset += 1;\n                    break;\n                }\n            case 2:\n                { // String type\n                    // dataOffset += 1;\n                    const amfstr = flvDemux.parseString(buffer, dataOffset);\n                    value = amfstr.data;\n                    dataOffset += amfstr.size;\n                    break;\n                }\n            case 3:\n\n                { // Object(s) type\n                    value = {};\n                    let terminal = 0; // workaround for malformed Objects which has missing ScriptDataObjectEnd\n                    if ((dv.getUint32(dataSize - 4, !le) & 0x00FFFFFF) === 9) {\n                        terminal = 3;\n                    }\n                    while (dataOffset < dataSize - 4) { // 4 === type(UI8) + ScriptDataObjectEnd(UI24)\n                        const amfobj = flvDemux.parseObject(buffer, dataOffset, dataSize - offset - terminal);\n\n                        if (amfobj.objectEnd) { break; }\n                        value[amfobj.data.name] = amfobj.data.value;\n                        // dataOffset += amfobj.size;\n                        dataOffset = amfobj.size;\n                    }\n                    if (dataOffset <= dataSize - 3) {\n                        const marker = v.getUint32(dataOffset - 1, !le) & 0x00FFFFFF;\n                        if (marker === 9) {\n                            dataOffset += 3;\n                        }\n                    }\n                    break;\n                }\n            case 8:\n                { // ECMA array type (Mixed array)\n                    value = {};\n                    // dataOffset += 1;\n                    dataOffset += 4; // ECMAArrayLength(UI32)\n                    let terminal = 0; // workaround for malformed MixedArrays which has missing ScriptDataObjectEnd\n                    if ((dv.getUint32(dataSize - 4, !le) & 0x00FFFFFF) === 9) {\n                        terminal = 3;\n                    }\n                    while (dataOffset < dataSize - 8) { // 8 === type(UI8) + ECMAArrayLength(UI32) + ScriptDataVariableEnd(UI24)\n                        const amfvar = flvDemux.parseVariable(buffer, dataOffset);\n\n                        if (amfvar.objectEnd) { break; }\n                        value[amfvar.data.name] = amfvar.data.value;\n                        dataOffset = amfvar.size;\n                    }\n                    if (dataOffset <= dataSize - 3) {\n                        const marker = dv.getUint32(dataOffset - 1, !le) & 0x00FFFFFF;\n                        if (marker === 9) {\n                            dataOffset += 3;\n                        }\n                    }\n                    break;\n                }\n            case 9: // ScriptDataObjectEnd\n                value = undefined;\n                dataOffset = 1;\n                objectEnd = true;\n                break;\n            case 10:\n                { // Strict array type\n                    // ScriptDataValue[n]. NOTE: according to video_file_format_spec_v10_1.pdf\n                    value = [];\n                    const strictArrayLength = dv.getUint32(dataOffset, !le);\n                    dataOffset += 4;\n                    for (let i = 0; i < strictArrayLength; i++) {\n                        const val = flvDemux.parseScript(buffer, dataOffset);\n                        value.push(val.data);\n                        dataOffset = val.size;\n                    }\n                    break;\n                }\n            case 11:\n                { // Date type\n                    const date = flvDemux.parseDate(buffer, dataOffset + 1, dataSize - 1);\n                    value = date.data;\n                    dataOffset += date.size;\n                    break;\n                }\n            case 12:\n                { // Long string type\n                    const amfLongStr = flvDemux.parseString(buffer, dataOffset + 1, dataSize - 1);\n                    value = amfLongStr.data;\n                    dataOffset += amfLongStr.size;\n                    break;\n                }\n            default:\n                // ignore and skip\n                dataOffset = dataSize;\n                console.log('AMF', 'Unsupported AMF value type ' + type);\n        }\n        return {\n            data: value,\n            size: dataOffset,\n        };\n    }\n}\n/* harmony export (immutable) */ __webpack_exports__[\"a\"] = flvDemux;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 11 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/**\n * reference flv.js\n */\n/* eslint-disable */\nclass MediaInfo {\n\n    constructor() {\n        this.mimeType = null;\n        this.duration = null;\n\n        this.hasAudio = null;\n        this.hasVideo = null;\n        this.audioCodec = null;\n        this.videoCodec = null;\n        this.audioDataRate = null;\n        this.videoDataRate = null;\n\n        this.audioSampleRate = null;\n        this.audioChannelCount = null;\n\n        this.width = null;\n        this.height = null;\n        this.fps = null;\n        this.profile = null;\n        this.level = null;\n        this.chromaFormat = null;\n        this.sarNum = null;\n        this.sarDen = null;\n\n        this.metadata = null;\n        this.segments = null; // MediaInfo[]\n        this.segmentCount = null;\n        this.hasKeyframesIndex = null;\n        this.keyframesIndex = null;\n    }\n\n    isComplete() {\n        const audioInfoComplete = (this.hasAudio === false) ||\n            (this.hasAudio === true &&\n                this.audioCodec != null &&\n                this.audioSampleRate != null &&\n                this.audioChannelCount != null);\n\n        const videoInfoComplete = (this.hasVideo === false) ||\n            (this.hasVideo === true &&\n                this.videoCodec != null &&\n                this.width != null &&\n                this.height != null &&\n                this.fps != null &&\n                this.profile != null &&\n                this.level != null &&\n                this.chromaFormat != null &&\n                this.sarNum != null &&\n                this.sarDen != null);\n\n        // keyframesIndex may not be present\n        return this.mimeType != null &&\n            this.duration != null &&\n            this.metadata != null &&\n            this.hasKeyframesIndex != null &&\n            audioInfoComplete &&\n            videoInfoComplete;\n    }\n\n    isSeekable() {\n        return this.hasKeyframesIndex === true;\n    }\n\n\n\n}\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (MediaInfo);//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NoaW1lZS1mbHYyZm1wNC9saWIvZmx2L21lZGlhLWluZm8uanM/YjVmMiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsNkJBQTZCO0FBQzdCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOzs7O0FBSUE7O0FBRUEiLCJmaWxlIjoiMTEuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIHJlZmVyZW5jZSBmbHYuanNcbiAqL1xuLyogZXNsaW50LWRpc2FibGUgKi9cbmNsYXNzIE1lZGlhSW5mbyB7XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5taW1lVHlwZSA9IG51bGw7XG4gICAgICAgIHRoaXMuZHVyYXRpb24gPSBudWxsO1xuXG4gICAgICAgIHRoaXMuaGFzQXVkaW8gPSBudWxsO1xuICAgICAgICB0aGlzLmhhc1ZpZGVvID0gbnVsbDtcbiAgICAgICAgdGhpcy5hdWRpb0NvZGVjID0gbnVsbDtcbiAgICAgICAgdGhpcy52aWRlb0NvZGVjID0gbnVsbDtcbiAgICAgICAgdGhpcy5hdWRpb0RhdGFSYXRlID0gbnVsbDtcbiAgICAgICAgdGhpcy52aWRlb0RhdGFSYXRlID0gbnVsbDtcblxuICAgICAgICB0aGlzLmF1ZGlvU2FtcGxlUmF0ZSA9IG51bGw7XG4gICAgICAgIHRoaXMuYXVkaW9DaGFubmVsQ291bnQgPSBudWxsO1xuXG4gICAgICAgIHRoaXMud2lkdGggPSBudWxsO1xuICAgICAgICB0aGlzLmhlaWdodCA9IG51bGw7XG4gICAgICAgIHRoaXMuZnBzID0gbnVsbDtcbiAgICAgICAgdGhpcy5wcm9maWxlID0gbnVsbDtcbiAgICAgICAgdGhpcy5sZXZlbCA9IG51bGw7XG4gICAgICAgIHRoaXMuY2hyb21hRm9ybWF0ID0gbnVsbDtcbiAgICAgICAgdGhpcy5zYXJOdW0gPSBudWxsO1xuICAgICAgICB0aGlzLnNhckRlbiA9IG51bGw7XG5cbiAgICAgICAgdGhpcy5tZXRhZGF0YSA9IG51bGw7XG4gICAgICAgIHRoaXMuc2VnbWVudHMgPSBudWxsOyAvLyBNZWRpYUluZm9bXVxuICAgICAgICB0aGlzLnNlZ21lbnRDb3VudCA9IG51bGw7XG4gICAgICAgIHRoaXMuaGFzS2V5ZnJhbWVzSW5kZXggPSBudWxsO1xuICAgICAgICB0aGlzLmtleWZyYW1lc0luZGV4ID0gbnVsbDtcbiAgICB9XG5cbiAgICBpc0NvbXBsZXRlKCkge1xuICAgICAgICBjb25zdCBhdWRpb0luZm9Db21wbGV0ZSA9ICh0aGlzLmhhc0F1ZGlvID09PSBmYWxzZSkgfHxcbiAgICAgICAgICAgICh0aGlzLmhhc0F1ZGlvID09PSB0cnVlICYmXG4gICAgICAgICAgICAgICAgdGhpcy5hdWRpb0NvZGVjICE9IG51bGwgJiZcbiAgICAgICAgICAgICAgICB0aGlzLmF1ZGlvU2FtcGxlUmF0ZSAhPSBudWxsICYmXG4gICAgICAgICAgICAgICAgdGhpcy5hdWRpb0NoYW5uZWxDb3VudCAhPSBudWxsKTtcblxuICAgICAgICBjb25zdCB2aWRlb0luZm9Db21wbGV0ZSA9ICh0aGlzLmhhc1ZpZGVvID09PSBmYWxzZSkgfHxcbiAgICAgICAgICAgICh0aGlzLmhhc1ZpZGVvID09PSB0cnVlICYmXG4gICAgICAgICAgICAgICAgdGhpcy52aWRlb0NvZGVjICE9IG51bGwgJiZcbiAgICAgICAgICAgICAgICB0aGlzLndpZHRoICE9IG51bGwgJiZcbiAgICAgICAgICAgICAgICB0aGlzLmhlaWdodCAhPSBudWxsICYmXG4gICAgICAgICAgICAgICAgdGhpcy5mcHMgIT0gbnVsbCAmJlxuICAgICAgICAgICAgICAgIHRoaXMucHJvZmlsZSAhPSBudWxsICYmXG4gICAgICAgICAgICAgICAgdGhpcy5sZXZlbCAhPSBudWxsICYmXG4gICAgICAgICAgICAgICAgdGhpcy5jaHJvbWFGb3JtYXQgIT0gbnVsbCAmJlxuICAgICAgICAgICAgICAgIHRoaXMuc2FyTnVtICE9IG51bGwgJiZcbiAgICAgICAgICAgICAgICB0aGlzLnNhckRlbiAhPSBudWxsKTtcblxuICAgICAgICAvLyBrZXlmcmFtZXNJbmRleCBtYXkgbm90IGJlIHByZXNlbnRcbiAgICAgICAgcmV0dXJuIHRoaXMubWltZVR5cGUgIT0gbnVsbCAmJlxuICAgICAgICAgICAgdGhpcy5kdXJhdGlvbiAhPSBudWxsICYmXG4gICAgICAgICAgICB0aGlzLm1ldGFkYXRhICE9IG51bGwgJiZcbiAgICAgICAgICAgIHRoaXMuaGFzS2V5ZnJhbWVzSW5kZXggIT0gbnVsbCAmJlxuICAgICAgICAgICAgYXVkaW9JbmZvQ29tcGxldGUgJiZcbiAgICAgICAgICAgIHZpZGVvSW5mb0NvbXBsZXRlO1xuICAgIH1cblxuICAgIGlzU2Vla2FibGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmhhc0tleWZyYW1lc0luZGV4ID09PSB0cnVlO1xuICAgIH1cblxuXG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgTWVkaWFJbmZvO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jaGltZWUtZmx2MmZtcDQvbGliL2Zsdi9tZWRpYS1pbmZvLmpzXG4vLyBtb2R1bGUgaWQgPSAxMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 12 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__flv_flvParse__ = __webpack_require__(8);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__flv_tagdemux__ = __webpack_require__(2);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__mp4_mp4remux__ = __webpack_require__(3);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__mp4_mp4moof__ = __webpack_require__(15);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_chimee_helper__ = __webpack_require__(17);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_chimee_helper___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_chimee_helper__);\n/* eslint-disable */\n\n\n\n\n\nclass flv2fmp4 {\n\n    /**\n     * Creates an instance of flv2fmp4.\n     * config 里面有_isLive属性,是否是直播\n     * @param {any} config\n     *\n     * @memberof flv2fmp4\n     */\n    constructor(config) {\n        this._config = { _isLive: false };\n        this._config = Object.assign(this._config, config);\n\n        // 外部方法赋值\n        this.onInitSegment = null;\n        this.onMediaSegment = null;\n        this.onMediaInfo = null;\n        this.seekCallBack = null;\n\n        // 内部使用\n        this.loadmetadata = false;\n        this.ftyp_moov = null;\n        this.metaSuccRun = false;\n        this.metas = [];\n        this.parseChunk = null;\n        this.hasVideo = false;\n        this.hasAudio = false;\n        this._error=null;\n        // 临时记录seek时间\n        this._pendingResolveSeekPoint = -1;\n\n        // 临时记录flv数据起始时间\n        this._tempBaseTime = 0;\n\n        // 处理flv数据入口\n        this.setflvBase = this.setflvBasefrist;\n\n        __WEBPACK_IMPORTED_MODULE_1__flv_tagdemux__[\"a\" /* default */]._onTrackMetadata = this.Metadata.bind(this);\n        __WEBPACK_IMPORTED_MODULE_1__flv_tagdemux__[\"a\" /* default */]._onMediaInfo = this.metaSucc.bind(this);\n        __WEBPACK_IMPORTED_MODULE_1__flv_tagdemux__[\"a\" /* default */]._onDataAvailable = this.onDataAvailable.bind(this);\n        __WEBPACK_IMPORTED_MODULE_1__flv_tagdemux__[\"a\" /* default */]._onError=this.error.bind(this);\n        this.m4mof = new __WEBPACK_IMPORTED_MODULE_3__mp4_mp4moof__[\"a\" /* default */](this._config);\n        this.m4mof.onMediaSegment = this.onMdiaSegment.bind(this);\n    }\n    seek(baseTime) {\n        this.setflvBase = this.setflvBasefrist;\n        if (baseTime == undefined || baseTime == 0) {\n            baseTime = 0;\n            this._pendingResolveSeekPoint = -1;\n        }\n        if (this._tempBaseTime != baseTime) {\n            this._tempBaseTime = baseTime;\n            __WEBPACK_IMPORTED_MODULE_1__flv_tagdemux__[\"a\" /* default */]._timestampBase = baseTime;\n            this.m4mof.seek(baseTime);\n            this.m4mof.insertDiscontinuity();\n            this._pendingResolveSeekPoint = baseTime;\n        }\n    }\n\n    /**\n     * 不要主动调用这个接口!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n     * 第一次接受数据,和seek时候接受数据入口,\n     *\n     * @param {any} arraybuff\n     * @param {any} baseTime\n     * @returns\n     *\n     * @memberof flv2fmp4\n     */\n    setflvBasefrist(arraybuff, baseTime) {\n        let offset = 0;\n        try {\n            offset = __WEBPACK_IMPORTED_MODULE_0__flv_flvParse__[\"a\" /* default */].setFlv(new Uint8Array(arraybuff));\n        } catch (error) {\n            this.error(error);\n        }\n\n        if (__WEBPACK_IMPORTED_MODULE_0__flv_flvParse__[\"a\" /* default */].arrTag.length > 0) {\n            this.hasAudio = __WEBPACK_IMPORTED_MODULE_0__flv_flvParse__[\"a\" /* default */]._hasAudio;\n            this.hasVideo = __WEBPACK_IMPORTED_MODULE_0__flv_flvParse__[\"a\" /* default */]._hasVideo;\n            if (this._tempBaseTime != 0 && this._tempBaseTime == __WEBPACK_IMPORTED_MODULE_0__flv_flvParse__[\"a\" /* default */].arrTag[0].getTime()) {\n                __WEBPACK_IMPORTED_MODULE_1__flv_tagdemux__[\"a\" /* default */]._timestampBase = 0;\n            }\n            try {\n                __WEBPACK_IMPORTED_MODULE_1__flv_tagdemux__[\"a\" /* default */].moofTag(__WEBPACK_IMPORTED_MODULE_0__flv_flvParse__[\"a\" /* default */].arrTag);\n            } catch (error) {\n                this.error(error);\n            }\n\n            this.setflvBase = this.setflvBaseUsually;\n        }\n\n        return offset;\n    }\n\n    /**\n     * 不要主动调用这个接口!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n     * 后续接受数据接口\n     * @param {any} arraybuff\n     * @param {any} baseTime\n     * @returns\n     *\n     * @memberof flv2fmp4\n     */\n    setflvBaseUsually(arraybuff, baseTime) {\n        let offset = 0;\n        try {\n            offset = __WEBPACK_IMPORTED_MODULE_0__flv_flvParse__[\"a\" /* default */].setFlv(new Uint8Array(arraybuff));\n        } catch (error) {\n            this.error(error);\n        }\n        if (__WEBPACK_IMPORTED_MODULE_0__flv_flvParse__[\"a\" /* default */].arrTag.length > 0) {\n            try {\n                __WEBPACK_IMPORTED_MODULE_1__flv_tagdemux__[\"a\" /* default */].moofTag(__WEBPACK_IMPORTED_MODULE_0__flv_flvParse__[\"a\" /* default */].arrTag);\n            } catch (error) {\n                this.error(error);\n            }\n        }\n\n        return offset;\n    }\n\n    /**\n     * 不要主动调用这个接口!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n     * moof回调\n     *\n     * @param {any} track\n     * @param {any} value\n     *\n     * @memberof flv2fmp4\n     */\n    onMdiaSegment(track, value) {\n\n        if (this.onMediaSegment) {\n            this.onMediaSegment(new Uint8Array(value.data));\n        }\n        if (this._pendingResolveSeekPoint != -1 && track == 'video') {\n            let seekpoint = this._pendingResolveSeekPoint;\n            this._pendingResolveSeekPoint = -1;\n            if (this.seekCallBack) {\n                this.seekCallBack(seekpoint);\n            }\n        }\n    }\n\n    /**\n     *\n     * 音频和视频的初始化tag\n     *\n     * @param {any} type\n     * @param {any} meta\n     *\n     * @memberof flv2fmp4\n     */\n    Metadata(type, meta) {\n        switch (type) {\n            case 'video':\n                this.metas.push(meta);\n                this.m4mof._videoMeta = meta;\n                if (this.hasVideo && !this.hasAudio) {\n                    this.metaSucc();\n                    return;\n                }\n                break;\n            case 'audio':\n                this.metas.push(meta);\n                this.m4mof._audioMeta = meta;\n                if (!this.hasVideo && this.hasAudio) {\n                    this.metaSucc();\n                    return;\n                }\n                break;\n        }\n        if (this.hasVideo && this.hasAudio && this.metaSuccRun && this.metas.length > 1) {\n            this.metaSucc();\n        }\n    }\n\n    /**\n     * metadata解读成功后触发及第一个视频tag和第一个音频tag\n     *\n     * @param {any} mi\n     * @returns\n     *\n     * @memberof flv2fmp4\n     */\n    metaSucc(mi) {\n        if (this.onMediaInfo) {\n            this.onMediaInfo(mi, { hasAudio: this.hasAudio, hasVideo: this.hasVideo });\n        }\n        // 获取ftyp和moov\n        if (this.metas.length == 0) {\n            this.metaSuccRun = true;\n            return;\n        }\n\n        this.ftyp_moov = __WEBPACK_IMPORTED_MODULE_2__mp4_mp4remux__[\"a\" /* default */].generateInitSegment(this.metas);\n        if (this.onInitSegment && this.loadmetadata == false) {\n\n            this.onInitSegment(this.ftyp_moov);\n            this.loadmetadata = true;\n        }\n    }\n\n    onDataAvailable(audiotrack, videotrack) {\n        try{\n            this.m4mof.remux(audiotrack, videotrack);\n        }catch(e){\n            this.error(e);\n        }\n        \n    }\n\n    /**\n     * 传入flv的二进制数据\n     * 统一入口\n     * @param {any} arraybuff\n     * @param {any} baseTime flv数据开始时间\n     * @returns\n     *\n     * @memberof flv2fmp4\n     */\n    setflv(arraybuff, baseTime) {\n        return this.setflvBase(arraybuff, baseTime);\n    }\n\n    /**\n     *\n     * 本地调试代码,不用理会\n     * @param {any} arraybuff\n     * @returns\n     *\n     * @memberof flv2fmp4\n     */\n    setflvloc(arraybuff) {\n        const offset = __WEBPACK_IMPORTED_MODULE_0__flv_flvParse__[\"a\" /* default */].setFlv(new Uint8Array(arraybuff));\n\n        if (__WEBPACK_IMPORTED_MODULE_0__flv_flvParse__[\"a\" /* default */].arrTag.length > 0) {\n            return __WEBPACK_IMPORTED_MODULE_0__flv_flvParse__[\"a\" /* default */].arrTag;\n        }\n    }\n\n\n    /**\n     * \n     *  异常抛出处理\n     * @param {any} e \n     * @memberof flv2fmp4\n     */\n    error(e) {\n        if(this._error){\n            this._error(e);\n        }\n    }\n    \n}\n\n/**\n * 封装的对外类,有些方法不想对外暴露,所以封装这么一个类\n *\n * @class foreign\n */\nclass foreign extends __WEBPACK_IMPORTED_MODULE_4_chimee_helper__[\"CustEvent\"] {\n    constructor(config) {\n        super();\n        this.f2m = new flv2fmp4(config);\n        this.f2m._error=this.error;\n        // 外部方法赋值\n        this._onInitSegment = null;\n        this._onMediaSegment = null;\n        this._onMediaInfo = null;\n        this._seekCallBack = null;\n    }\n\n    error(e){\n        this.emit('error',e.type);\n    }\n    /**\n     *\n     * 跳转\n     * @param {any} basetime  跳转时间\n     *\n     * @memberof foreign\n     */\n    seek(basetime) {\n        this.f2m.seek(basetime);\n    }\n\n    /**\n     * 传入flv的二进制数据\n     * 统一入口\n     * @param {any} arraybuff\n     * @returns\n     *\n     * @memberof flv2fmp4\n     */\n    setflv(arraybuff) {\n        return this.f2m.setflv(arraybuff, 0);\n    }\n\n    /**\n     *\n     * 本地调试代码,不用理会\n     * @param {any} arraybuff\n     * @returns\n     *\n     * @memberof flv2fmp4\n     */\n    setflvloc(arraybuff) {\n        return this.f2m.setflvloc(arraybuff);\n    }\n\n    /**\n     * 赋值初始化seg接受方法\n     *\n     *\n     * @memberof foreign\n     */\n    set onInitSegment(fun) {\n        this._onInitSegment = fun;\n        this.f2m.onInitSegment = fun;\n    }\n\n    /**\n     * 赋值moof接受方法\n     *\n     *\n     * @memberof foreign\n     */\n    set onMediaSegment(fun) {\n        this._onMediaSegment = fun;\n        this.f2m.onMediaSegment = fun;\n    }\n\n    /**\n     * 赋值metadata接受方法\n     *\n     *\n     * @memberof foreign\n     */\n    set onMediaInfo(fun) {\n        this._onMediaInfo = fun;\n        this.f2m.onMediaInfo = fun;\n    }\n\n    /**\n     * 赋值是否跳转回调接受方法\n     *\n     *\n     * @memberof foreign\n     */\n    set seekCallBack(fun) {\n        this._seekCallBack = fun;\n        this.f2m.seekCallBack = fun;\n    }\n}\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (foreign);//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 13 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/**\n * reference flv.js\n */\n/* eslint-disable */\nclass AAC {\n\n    static getSilentFrame(channelCount) {\n        if (channelCount === 1) {\n            return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x23, 0x80]);\n        } else if (channelCount === 2) {\n            return new Uint8Array([0x21, 0x00, 0x49, 0x90, 0x02, 0x19, 0x00, 0x23, 0x80]);\n        } else if (channelCount === 3) {\n            return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64, 0x00, 0x8e]);\n        } else if (channelCount === 4) {\n            return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64, 0x00, 0x80, 0x2c, 0x80, 0x08, 0x02, 0x38]);\n        } else if (channelCount === 5) {\n            return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64, 0x00, 0x82, 0x30, 0x04, 0x99, 0x00, 0x21, 0x90, 0x02, 0x38]);\n        } else if (channelCount === 6) {\n            return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64, 0x00, 0x82, 0x30, 0x04, 0x99, 0x00, 0x21, 0x90, 0x02, 0x00, 0xb2, 0x00, 0x20, 0x08, 0xe0]);\n        }\n        return null;\n    }\n\n}\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (AAC);//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NoaW1lZS1mbHYyZm1wNC9saWIvbXA0L2FhYy1zaWxlbnQuanM/NGQxZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLFNBQVM7QUFDVDtBQUNBLFNBQVM7QUFDVDtBQUNBLFNBQVM7QUFDVDtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSIsImZpbGUiOiIxMy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogcmVmZXJlbmNlIGZsdi5qc1xuICovXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuY2xhc3MgQUFDIHtcblxuICAgIHN0YXRpYyBnZXRTaWxlbnRGcmFtZShjaGFubmVsQ291bnQpIHtcbiAgICAgICAgaWYgKGNoYW5uZWxDb3VudCA9PT0gMSkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KFsweDAwLCAweGM4LCAweDAwLCAweDgwLCAweDIzLCAweDgwXSk7XG4gICAgICAgIH0gZWxzZSBpZiAoY2hhbm5lbENvdW50ID09PSAyKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoWzB4MjEsIDB4MDAsIDB4NDksIDB4OTAsIDB4MDIsIDB4MTksIDB4MDAsIDB4MjMsIDB4ODBdKTtcbiAgICAgICAgfSBlbHNlIGlmIChjaGFubmVsQ291bnQgPT09IDMpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShbMHgwMCwgMHhjOCwgMHgwMCwgMHg4MCwgMHgyMCwgMHg4NCwgMHgwMSwgMHgyNiwgMHg0MCwgMHgwOCwgMHg2NCwgMHgwMCwgMHg4ZV0pO1xuICAgICAgICB9IGVsc2UgaWYgKGNoYW5uZWxDb3VudCA9PT0gNCkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KFsweDAwLCAweGM4LCAweDAwLCAweDgwLCAweDIwLCAweDg0LCAweDAxLCAweDI2LCAweDQwLCAweDA4LCAweDY0LCAweDAwLCAweDgwLCAweDJjLCAweDgwLCAweDA4LCAweDAyLCAweDM4XSk7XG4gICAgICAgIH0gZWxzZSBpZiAoY2hhbm5lbENvdW50ID09PSA1KSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoWzB4MDAsIDB4YzgsIDB4MDAsIDB4ODAsIDB4MjAsIDB4ODQsIDB4MDEsIDB4MjYsIDB4NDAsIDB4MDgsIDB4NjQsIDB4MDAsIDB4ODIsIDB4MzAsIDB4MDQsIDB4OTksIDB4MDAsIDB4MjEsIDB4OTAsIDB4MDIsIDB4MzhdKTtcbiAgICAgICAgfSBlbHNlIGlmIChjaGFubmVsQ291bnQgPT09IDYpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShbMHgwMCwgMHhjOCwgMHgwMCwgMHg4MCwgMHgyMCwgMHg4NCwgMHgwMSwgMHgyNiwgMHg0MCwgMHgwOCwgMHg2NCwgMHgwMCwgMHg4MiwgMHgzMCwgMHgwNCwgMHg5OSwgMHgwMCwgMHgyMSwgMHg5MCwgMHgwMiwgMHgwMCwgMHhiMiwgMHgwMCwgMHgyMCwgMHgwOCwgMHhlMF0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBBQUM7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NoaW1lZS1mbHYyZm1wNC9saWIvbXA0L2FhYy1zaWxlbnQuanNcbi8vIG1vZHVsZSBpZCA9IDEzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 14 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/**\n * reference flv.js\n */\n/* eslint-disable */\n// Represents an media sample (audio / video)\nclass SampleInfo {\n\n    constructor(dts, pts, duration, originalDts, isSync) {\n        this.dts = dts;\n        this.pts = pts;\n        this.duration = duration;\n        this.originalDts = originalDts;\n        this.isSyncPoint = isSync;\n        this.fileposition = null;\n    }\n\n}\n/* harmony export (immutable) */ __webpack_exports__[\"c\"] = SampleInfo;\n\n\n// Media Segment concept is defined in Media Source Extensions spec.\n// Particularly in ISO BMFF format, an Media Segment contains a moof box followed by a mdat box.\nclass MediaSegmentInfo {\n\n    constructor() {\n        this.beginDts = 0;\n        this.endDts = 0;\n        this.beginPts = 0;\n        this.endPts = 0;\n        this.originalBeginDts = 0;\n        this.originalEndDts = 0;\n        this.syncPoints = []; // SampleInfo[n], for video IDR frames only\n        this.firstSample = null; // SampleInfo\n        this.lastSample = null; // SampleInfo\n    }\n\n    appendSyncPoint(sampleInfo) { // also called Random Access Point\n        sampleInfo.isSyncPoint = true;\n        this.syncPoints.push(sampleInfo);\n    }\n\n}\n/* harmony export (immutable) */ __webpack_exports__[\"b\"] = MediaSegmentInfo;\n\n\n// Ordered list for recording video IDR frames, sorted by originalDts\nclass IDRSampleList {\n\n    constructor() {\n        this._list = [];\n    }\n\n    clear() {\n        this._list = [];\n    }\n\n    appendArray(syncPoints) {\n        const list = this._list;\n\n        if (syncPoints.length === 0) {\n            return;\n        }\n\n        if (list.length > 0 && syncPoints[0].originalDts < list[list.length - 1].originalDts) {\n            this.clear();\n        }\n\n        Array.prototype.push.apply(list, syncPoints);\n    }\n\n    getLastSyncPointBeforeDts(dts) {\n        if (this._list.length == 0) {\n            return null;\n        }\n\n        const list = this._list;\n        let idx = 0;\n        const last = list.length - 1;\n        let mid = 0;\n        let lbound = 0;\n        let ubound = last;\n\n        if (dts < list[0].dts) {\n            idx = 0;\n            lbound = ubound + 1;\n        }\n\n        while (lbound <= ubound) {\n            mid = lbound + Math.floor((ubound - lbound) / 2);\n            if (mid === last || (dts >= list[mid].dts && dts < list[mid + 1].dts)) {\n                idx = mid;\n                break;\n            } else if (list[mid].dts < dts) {\n                lbound = mid + 1;\n            } else {\n                ubound = mid - 1;\n            }\n        }\n        return this._list[idx];\n    }\n\n}\n/* unused harmony export IDRSampleList */\n\n\n// Data structure for recording information of media segments in single track.\nclass MediaSegmentInfoList {\n\n    constructor(type) {\n        this._type = type;\n        this._list = [];\n        this._lastAppendLocation = -1; // cached last insert location\n    }\n\n    get type() {\n        return this._type;\n    }\n\n    get length() {\n        return this._list.length;\n    }\n\n    isEmpty() {\n        return this._list.length === 0;\n    }\n\n    clear() {\n        this._list = [];\n        this._lastAppendLocation = -1;\n    }\n\n    _searchNearestSegmentBefore(originalBeginDts) {\n        const list = this._list;\n        if (list.length === 0) {\n            return -2;\n        }\n        const last = list.length - 1;\n        let mid = 0;\n        let lbound = 0;\n        let ubound = last;\n\n        let idx = 0;\n\n        if (originalBeginDts < list[0].originalBeginDts) {\n            idx = -1;\n            return idx;\n        }\n\n        while (lbound <= ubound) {\n            mid = lbound + Math.floor((ubound - lbound) / 2);\n            if (mid === last || (originalBeginDts > list[mid].lastSample.originalDts &&\n                    (originalBeginDts < list[mid + 1].originalBeginDts))) {\n                idx = mid;\n                break;\n            } else if (list[mid].originalBeginDts < originalBeginDts) {\n                lbound = mid + 1;\n            } else {\n                ubound = mid - 1;\n            }\n        }\n        return idx;\n    }\n\n    _searchNearestSegmentAfter(originalBeginDts) {\n        return this._searchNearestSegmentBefore(originalBeginDts) + 1;\n    }\n\n    append(mediaSegmentInfo) {\n        const list = this._list;\n        const msi = mediaSegmentInfo;\n        const lastAppendIdx = this._lastAppendLocation;\n        let insertIdx = 0;\n\n        if (lastAppendIdx !== -1 && lastAppendIdx < list.length &&\n            msi.originalBeginDts >= list[lastAppendIdx].lastSample.originalDts &&\n            ((lastAppendIdx === list.length - 1) ||\n                (lastAppendIdx < list.length - 1 &&\n                    msi.originalBeginDts < list[lastAppendIdx + 1].originalBeginDts))) {\n            insertIdx = lastAppendIdx + 1; // use cached location idx\n        } else {\n            if (list.length > 0) {\n                insertIdx = this._searchNearestSegmentBefore(msi.originalBeginDts) + 1;\n            }\n        }\n\n        this._lastAppendLocation = insertIdx;\n        this._list.splice(insertIdx, 0, msi);\n    }\n\n    getLastSegmentBefore(originalBeginDts) {\n        const idx = this._searchNearestSegmentBefore(originalBeginDts);\n        if (idx >= 0) {\n            return this._list[idx];\n        } else { // -1\n            return null;\n        }\n    }\n\n    getLastSampleBefore(originalBeginDts) {\n        const segment = this.getLastSegmentBefore(originalBeginDts);\n        if (segment != null) {\n            return segment.lastSample;\n        } else {\n            return null;\n        }\n    }\n\n    getLastSyncPointBefore(originalBeginDts) {\n        let segmentIdx = this._searchNearestSegmentBefore(originalBeginDts);\n        let syncPoints = this._list[segmentIdx].syncPoints;\n        while (syncPoints.length === 0 && segmentIdx > 0) {\n            segmentIdx--;\n            syncPoints = this._list[segmentIdx].syncPoints;\n        }\n        if (syncPoints.length > 0) {\n            return syncPoints[syncPoints.length - 1];\n        } else {\n            return null;\n        }\n    }\n\n}\n/* harmony export (immutable) */ __webpack_exports__[\"a\"] = MediaSegmentInfoList;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 15 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__aac_silent_js__ = __webpack_require__(13);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_browser_js__ = __webpack_require__(16);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__mp4remux__ = __webpack_require__(3);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__media_segment_info_js__ = __webpack_require__(14);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__utils_error__ = __webpack_require__(0);\n/**\n * reference flv.js\n */\n/* eslint-disable */\n\n\n\n\n\n// Fragmented mp4 remuxer\nclass MP4Remuxer {\n\n    constructor(config) {\n        this.TAG = this.constructor.name;\n\n        this._config = config;\n        this._isLive = (config.isLive === true);\n\n        this._dtsBase = -1;\n        this._dtsBaseInited = false;\n        this._audioDtsBase = Infinity;\n        this._videoDtsBase = Infinity;\n        this._audioNextDts = undefined;\n        this._videoNextDts = undefined;\n\n        this._audioMeta = null;\n        this._videoMeta = null;\n\n        this._audioSegmentInfoList = new __WEBPACK_IMPORTED_MODULE_3__media_segment_info_js__[\"a\" /* MediaSegmentInfoList */]('audio');\n        this._videoSegmentInfoList = new __WEBPACK_IMPORTED_MODULE_3__media_segment_info_js__[\"a\" /* MediaSegmentInfoList */]('video');\n\n        this._onInitSegment = null;\n        this._onMediaSegment = null;\n\n        // Workaround for chrome < 50: Always force first sample as a Random Access Point in media segment\n        // see https://bugs.chromium.org/p/chromium/issues/detail?id=229412\n        this._forceFirstIDR = !!((__WEBPACK_IMPORTED_MODULE_1__utils_browser_js__[\"a\" /* default */].chrome &&\n            (__WEBPACK_IMPORTED_MODULE_1__utils_browser_js__[\"a\" /* default */].version.major < 50 ||\n                (__WEBPACK_IMPORTED_MODULE_1__utils_browser_js__[\"a\" /* default */].version.major === 50 && __WEBPACK_IMPORTED_MODULE_1__utils_browser_js__[\"a\" /* default */].version.build < 2661))));\n\n        // Workaround for IE11/Edge: Fill silent aac frame after keyframe-seeking\n        // Make audio beginDts equals with video beginDts, in order to fix seek freeze\n        this._fillSilentAfterSeek = (__WEBPACK_IMPORTED_MODULE_1__utils_browser_js__[\"a\" /* default */].msedge || __WEBPACK_IMPORTED_MODULE_1__utils_browser_js__[\"a\" /* default */].msie);\n    }\n\n    destroy() {\n        this._dtsBase = -1;\n        this._dtsBaseInited = false;\n        this._audioMeta = null;\n        this._videoMeta = null;\n        this._audioSegmentInfoList.clear();\n        this._audioSegmentInfoList = null;\n        this._videoSegmentInfoList.clear();\n        this._videoSegmentInfoList = null;\n        this._onInitSegment = null;\n        this._onMediaSegment = null;\n    }\n\n    bindDataSource(producer) {\n        producer.onDataAvailable = this.remux.bind(this);\n        producer.onTrackMetadata = this._onTrackMetadataReceived.bind(this);\n        return this;\n    }\n\n    /* prototype: function onInitSegment(type: string, initSegment: ArrayBuffer): void\n       InitSegment: {\n           type: string,\n           data: ArrayBuffer,\n           codec: string,\n           container: string\n       }\n    */\n    get onInitSegment() {\n        return this._onInitSegment;\n    }\n\n    set onInitSegment(callback) {\n        this._onInitSegment = callback;\n    }\n\n    /* prototype: function onMediaSegment(type: string, mediaSegment: MediaSegment): void\n       MediaSegment: {\n           type: string,\n           data: ArrayBuffer,\n           sampleCount: int32\n           info: MediaSegmentInfo\n       }\n    */\n    get onMediaSegment() {\n        return this._onMediaSegment;\n    }\n\n    set onMediaSegment(callback) {\n        this._onMediaSegment = callback;\n    }\n\n    insertDiscontinuity() {\n        this._audioNextDts = this._videoNextDts = undefined;\n    }\n\n    seek(originalDts) {\n        this._videoSegmentInfoList.clear();\n        this._audioSegmentInfoList.clear();\n    }\n\n    remux(audioTrack, videoTrack) {\n        if (!this._onMediaSegment) {\n            throw new __WEBPACK_IMPORTED_MODULE_4__utils_error__[\"a\" /* default */]('MP4Remuxer: onMediaSegment callback must be specificed!');\n        }\n        if (!this._dtsBaseInited) {\n            this._calculateDtsBase(audioTrack, videoTrack);\n        }\n        this._remuxVideo(videoTrack);\n        this._remuxAudio(audioTrack);\n    }\n\n    _onTrackMetadataReceived(type, metadata) {\n        let metabox = null;\n\n        if (type === 'audio') {\n            this._audioMeta = metadata;\n            metabox = __WEBPACK_IMPORTED_MODULE_2__mp4remux__[\"a\" /* default */].generateInitSegment(metadata);\n            console.log('msg+audio', metadata);\n        } else if (type === 'video') {\n            this._videoMeta = metadata;\n            metabox = __WEBPACK_IMPORTED_MODULE_2__mp4remux__[\"a\" /* default */].generateInitSegment(metadata);\n            console.log('msg+video', metadata);\n        } else {\n            return;\n        }\n\n        // dispatch metabox (Initialization Segment)\n        if (!this._onInitSegment) {\n            throw new __WEBPACK_IMPORTED_MODULE_4__utils_error__[\"a\" /* default */]('MP4Remuxer: onInitSegment callback must be specified!');\n        }\n        this._onInitSegment(type, {\n            type,\n            data: metabox.buffer,\n            codec: metadata.codec,\n            container: `${type}/mp4`\n        });\n    }\n\n    _calculateDtsBase(audioTrack, videoTrack) {\n        if (this._dtsBaseInited) {\n            return;\n        }\n\n        if (audioTrack.samples && audioTrack.samples.length) {\n            this._audioDtsBase = audioTrack.samples[0].dts;\n        }\n        if (videoTrack.samples && videoTrack.samples.length) {\n            this._videoDtsBase = videoTrack.samples[0].dts;\n        }\n\n        this._dtsBase = Math.min(this._audioDtsBase, this._videoDtsBase);\n        this._dtsBaseInited = true;\n    }\n\n    _remuxAudio(audioTrack) {\n        const track = audioTrack;\n        const samples = track.samples;\n        let dtsCorrection;\n        let firstDts = -1,\n            lastDts = -1,\n            lastPts = -1;\n\n        let remuxSilentFrame = false;\n        let silentFrameDuration = -1;\n\n        if (!samples || samples.length === 0) {\n            return;\n        }\n\n        let bytes = 8 + track.length;\n        let mdatbox = new Uint8Array(bytes);\n        mdatbox[0] = (bytes >>> 24) & 0xFF;\n        mdatbox[1] = (bytes >>> 16) & 0xFF;\n        mdatbox[2] = (bytes >>> 8) & 0xFF;\n        mdatbox[3] = (bytes) & 0xFF;\n\n        mdatbox.set(__WEBPACK_IMPORTED_MODULE_2__mp4remux__[\"a\" /* default */].types.mdat, 4);\n\n        let offset = 8; // size + type\n        const mp4Samples = [];\n\n        while (samples.length) {\n            const aacSample = samples.shift();\n            const unit = aacSample.unit;\n            const originalDts = aacSample.dts - this._dtsBase;\n\n            if (dtsCorrection == undefined) {\n                if (this._audioNextDts == undefined) {\n                    if (this._audioSegmentInfoList.isEmpty()) {\n                        dtsCorrection = 0;\n                        if (this._fillSilentAfterSeek && !this._videoSegmentInfoList.isEmpty()) {\n                            remuxSilentFrame = true;\n                        }\n                    } else {\n                        const lastSample = this._audioSegmentInfoList.getLastSampleBefore(originalDts);\n                        if (lastSample != null) {\n                            let distance = (originalDts - (lastSample.originalDts + lastSample.duration));\n                            if (distance <= 3) {\n                                distance = 0;\n                            }\n                            const expectedDts = lastSample.dts + lastSample.duration + distance;\n                            dtsCorrection = originalDts - expectedDts;\n                        } else { // lastSample == null\n                            dtsCorrection = 0;\n                        }\n                    }\n                } else {\n                    dtsCorrection = originalDts - this._audioNextDts;\n                }\n            }\n\n            let dts = originalDts - dtsCorrection;\n            if (remuxSilentFrame) {\n                // align audio segment beginDts to match with current video segment's beginDts\n                const videoSegment = this._videoSegmentInfoList.getLastSegmentBefore(originalDts);\n                if (videoSegment != null && videoSegment.beginDts < dts) {\n                    silentFrameDuration = dts - videoSegment.beginDts;\n                    dts = videoSegment.beginDts;\n                } else {\n                    remuxSilentFrame = false;\n                }\n            }\n            if (firstDts === -1) {\n                firstDts = dts;\n            }\n\n            if (remuxSilentFrame) {\n                remuxSilentFrame = false;\n                samples.unshift(aacSample);\n\n                const frame = this._generateSilentAudio(dts, silentFrameDuration);\n                if (frame == null) {\n                    continue;\n                }\n                const mp4Sample = frame.mp4Sample;\n                const unit = frame.unit;\n\n                mp4Samples.push(mp4Sample);\n\n                // re-allocate mdatbox buffer with new size, to fit with this silent frame\n                bytes += unit.byteLength;\n                mdatbox = new Uint8Array(bytes);\n                mdatbox[0] = (bytes >>> 24) & 0xFF;\n                mdatbox[1] = (bytes >>> 16) & 0xFF;\n                mdatbox[2] = (bytes >>> 8) & 0xFF;\n                mdatbox[3] = (bytes) & 0xFF;\n                mdatbox.set(__WEBPACK_IMPORTED_MODULE_2__mp4remux__[\"a\" /* default */].types.mdat, 4);\n\n                // fill data now\n                mdatbox.set(unit, offset);\n                offset += unit.byteLength;\n                continue;\n            }\n\n            let sampleDuration = 0;\n\n            if (samples.length >= 1) {\n                const nextDts = samples[0].dts - this._dtsBase - dtsCorrection;\n                sampleDuration = nextDts - dts;\n            } else {\n                if (mp4Samples.length >= 1) { // use second last sample duration\n                    sampleDuration = mp4Samples[mp4Samples.length - 1].duration;\n                } else { // the only one sample, use reference sample duration\n                    sampleDuration = this._audioMeta.refSampleDuration;\n                }\n            }\n\n            const mp4Sample = {\n                dts,\n                pts: dts,\n                cts: 0,\n                size: unit.byteLength,\n                duration: sampleDuration,\n                originalDts,\n                flags: {\n                    isLeading: 0,\n                    dependsOn: 1,\n                    isDependedOn: 0,\n                    hasRedundancy: 0\n                }\n            };\n            mp4Samples.push(mp4Sample);\n            mdatbox.set(unit, offset);\n            offset += unit.byteLength;\n        }\n        const latest = mp4Samples[mp4Samples.length - 1];\n        lastDts = latest.dts + latest.duration;\n        this._audioNextDts = lastDts;\n\n        // fill media segment info & add to info list\n        const info = new __WEBPACK_IMPORTED_MODULE_3__media_segment_info_js__[\"b\" /* MediaSegmentInfo */]();\n        info.beginDts = firstDts;\n        info.endDts = lastDts;\n        info.beginPts = firstDts;\n        info.endPts = lastDts;\n        info.originalBeginDts = mp4Samples[0].originalDts;\n        info.originalEndDts = latest.originalDts + latest.duration;\n        info.firstSample = new __WEBPACK_IMPORTED_MODULE_3__media_segment_info_js__[\"c\" /* SampleInfo */](mp4Samples[0].dts,\n            mp4Samples[0].pts,\n            mp4Samples[0].duration,\n            mp4Samples[0].originalDts,\n            false);\n        info.lastSample = new __WEBPACK_IMPORTED_MODULE_3__media_segment_info_js__[\"c\" /* SampleInfo */](latest.dts,\n            latest.pts,\n            latest.duration,\n            latest.originalDts,\n            false);\n        if (!this._isLive) {\n            this._audioSegmentInfoList.append(info);\n        }\n\n        track.samples = mp4Samples;\n        track.sequenceNumber += track.addcoefficient;\n\n        const moofbox = __WEBPACK_IMPORTED_MODULE_2__mp4remux__[\"a\" /* default */].moof(track, firstDts);\n        track.samples = [];\n        track.length = 0;\n\n        this._onMediaSegment('audio', {\n            type: 'audio',\n            data: this._mergeBoxes(moofbox, mdatbox).buffer,\n            sampleCount: mp4Samples.length,\n            info\n        });\n    }\n\n    _generateSilentAudio(dts, frameDuration) {\n        console.log(this.TAG, `GenerateSilentAudio: dts = ${dts}, duration = ${frameDuration}`);\n\n        const unit = __WEBPACK_IMPORTED_MODULE_0__aac_silent_js__[\"a\" /* default */].getSilentFrame(this._audioMeta.channelCount);\n        if (unit == null) {\n            console.log(this.TAG, `Cannot generate silent aac frame for channelCount = ${this._audioMeta.channelCount}`);\n            return null;\n        }\n\n        const mp4Sample = {\n            dts,\n            pts: dts,\n            cts: 0,\n            size: unit.byteLength,\n            duration: frameDuration,\n            originalDts: dts,\n            flags: {\n                isLeading: 0,\n                dependsOn: 1,\n                isDependedOn: 0,\n                hasRedundancy: 0\n            }\n        };\n\n        return {\n            unit,\n            mp4Sample\n        };\n    }\n\n    _remuxVideo(videoTrack) {\n        const track = videoTrack;\n        const samples = track.samples;\n        let dtsCorrection;\n        let firstDts = -1,\n            lastDts = -1;\n        let firstPts = -1,\n            lastPts = -1;\n\n        if (!samples || samples.length === 0) {\n            return;\n        }\n\n        const bytes = 8 + videoTrack.length;\n        const mdatbox = new Uint8Array(bytes);\n        mdatbox[0] = (bytes >>> 24) & 0xFF;\n        mdatbox[1] = (bytes >>> 16) & 0xFF;\n        mdatbox[2] = (bytes >>> 8) & 0xFF;\n        mdatbox[3] = (bytes) & 0xFF;\n        mdatbox.set(__WEBPACK_IMPORTED_MODULE_2__mp4remux__[\"a\" /* default */].types.mdat, 4);\n\n        let offset = 8;\n        const mp4Samples = [];\n        const info = new __WEBPACK_IMPORTED_MODULE_3__media_segment_info_js__[\"b\" /* MediaSegmentInfo */]();\n\n        while (samples.length) {\n            const avcSample = samples.shift();\n            const keyframe = avcSample.isKeyframe;\n            const originalDts = avcSample.dts - this._dtsBase;\n\n            if (dtsCorrection == undefined) {\n                if (this._videoNextDts == undefined) {\n                    if (this._videoSegmentInfoList.isEmpty()) {\n                        dtsCorrection = 0;\n                    } else {\n                        const lastSample = this._videoSegmentInfoList.getLastSampleBefore(originalDts);\n                        if (lastSample != null) {\n                            let distance = (originalDts - (lastSample.originalDts + lastSample.duration));\n                            if (distance <= 3) {\n                                distance = 0;\n                            }\n                            const expectedDts = lastSample.dts + lastSample.duration + distance;\n                            dtsCorrection = originalDts - expectedDts;\n                        } else { // lastSample == null\n                            dtsCorrection = 0;\n                        }\n                    }\n                } else {\n                    dtsCorrection = originalDts - this._videoNextDts;\n                }\n            }\n\n            const dts = originalDts - dtsCorrection;\n            const cts = avcSample.cts;\n            const pts = dts + cts;\n\n            if (firstDts === -1) {\n                firstDts = dts;\n                firstPts = pts;\n            }\n\n            // fill mdat box\n            let sampleSize = 0;\n            while (avcSample.units.length) {\n                const unit = avcSample.units.shift();\n                const data = unit.data;\n                mdatbox.set(data, offset);\n                offset += data.byteLength;\n                sampleSize += data.byteLength;\n            }\n\n            let sampleDuration = 0;\n\n            if (samples.length >= 1) {\n                const nextDts = samples[0].dts - this._dtsBase - dtsCorrection;\n                sampleDuration = nextDts - dts;\n            } else {\n                if (mp4Samples.length >= 1) { // lastest sample, use second last duration\n                    sampleDuration = mp4Samples[mp4Samples.length - 1].duration;\n                } else { // the only one sample, use reference duration\n                    sampleDuration = this._videoMeta.refSampleDuration;\n                }\n            }\n\n            if (keyframe) {\n                const syncPoint = new __WEBPACK_IMPORTED_MODULE_3__media_segment_info_js__[\"c\" /* SampleInfo */](dts, pts, sampleDuration, avcSample.dts, true);\n                syncPoint.fileposition = avcSample.fileposition;\n                info.appendSyncPoint(syncPoint);\n            }\n\n            const mp4Sample = {\n                dts,\n                pts,\n                cts,\n                size: sampleSize,\n                isKeyframe: keyframe,\n                duration: sampleDuration,\n                originalDts,\n                flags: {\n                    isLeading: 0,\n                    dependsOn: keyframe ? 2 : 1,\n                    isDependedOn: keyframe ? 1 : 0,\n                    hasRedundancy: 0,\n                    isNonSync: keyframe ? 0 : 1\n                }\n            };\n\n            mp4Samples.push(mp4Sample);\n        }\n        const latest = mp4Samples[mp4Samples.length - 1];\n        lastDts = latest.dts + latest.duration;\n        lastPts = latest.pts + latest.duration;\n        this._videoNextDts = lastDts;\n\n        // fill media segment info & add to info list\n        info.beginDts = firstDts;\n        info.endDts = lastDts;\n        info.beginPts = firstPts;\n        info.endPts = lastPts;\n        info.originalBeginDts = mp4Samples[0].originalDts;\n        info.originalEndDts = latest.originalDts + latest.duration;\n        info.firstSample = new __WEBPACK_IMPORTED_MODULE_3__media_segment_info_js__[\"c\" /* SampleInfo */](mp4Samples[0].dts,\n            mp4Samples[0].pts,\n            mp4Samples[0].duration,\n            mp4Samples[0].originalDts,\n            mp4Samples[0].isKeyframe);\n        info.lastSample = new __WEBPACK_IMPORTED_MODULE_3__media_segment_info_js__[\"c\" /* SampleInfo */](latest.dts,\n            latest.pts,\n            latest.duration,\n            latest.originalDts,\n            latest.isKeyframe);\n        if (!this._isLive) {\n            this._videoSegmentInfoList.append(info);\n        }\n\n        track.samples = mp4Samples;\n        track.sequenceNumber += track.addcoefficient;\n\n        // workaround for chrome < 50: force first sample as a random access point\n        // see https://bugs.chromium.org/p/chromium/issues/detail?id=229412\n        if (this._forceFirstIDR) {\n            const flags = mp4Samples[0].flags;\n            flags.dependsOn = 2;\n            flags.isNonSync = 0;\n        }\n\n        const moofbox = __WEBPACK_IMPORTED_MODULE_2__mp4remux__[\"a\" /* default */].moof(track, firstDts);\n        track.samples = [];\n        track.length = 0;\n\n        this._onMediaSegment('video', {\n            type: 'video',\n            data: this._mergeBoxes(moofbox, mdatbox).buffer,\n            sampleCount: mp4Samples.length,\n            info\n        });\n    }\n\n    _mergeBoxes(moof, mdat) {\n        const result = new Uint8Array(moof.byteLength + mdat.byteLength);\n        result.set(moof, 0);\n        result.set(mdat, moof.byteLength);\n        return result;\n    }\n\n}\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (MP4Remuxer);//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 16 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/**\n * reference flv.js\n */\n/* eslint-disable */\nconst Browser = {};\n\nfunction detect() {\n    // modified from jquery-browser-plugin\n\n    const ua = self.navigator.userAgent.toLowerCase();\n\n    const match = /(edge)\\/([\\w.]+)/.exec(ua) ||\n        /(opr)[\\/]([\\w.]+)/.exec(ua) ||\n        /(chrome)[ \\/]([\\w.]+)/.exec(ua) ||\n        /(iemobile)[\\/]([\\w.]+)/.exec(ua) ||\n        /(version)(applewebkit)[ \\/]([\\w.]+).*(safari)[ \\/]([\\w.]+)/.exec(ua) ||\n        /(webkit)[ \\/]([\\w.]+).*(version)[ \\/]([\\w.]+).*(safari)[ \\/]([\\w.]+)/.exec(ua) ||\n        /(webkit)[ \\/]([\\w.]+)/.exec(ua) ||\n        /(opera)(?:.*version|)[ \\/]([\\w.]+)/.exec(ua) ||\n        /(msie) ([\\w.]+)/.exec(ua) ||\n        ua.indexOf('trident') >= 0 && /(rv)(?::| )([\\w.]+)/.exec(ua) ||\n        ua.indexOf('compatible') < 0 && /(mozilla)(?:.*? rv:([\\w.]+)|)/.exec(ua) || [];\n\n    const platform_match = /(ipad)/.exec(ua) ||\n        /(ipod)/.exec(ua) ||\n        /(windows phone)/.exec(ua) ||\n        /(iphone)/.exec(ua) ||\n        /(kindle)/.exec(ua) ||\n        /(android)/.exec(ua) ||\n        /(windows)/.exec(ua) ||\n        /(mac)/.exec(ua) ||\n        /(linux)/.exec(ua) ||\n        /(cros)/.exec(ua) || [];\n\n    const matched = {\n        browser: match[5] || match[3] || match[1] || '',\n        version: match[2] || match[4] || '0',\n        majorVersion: match[4] || match[2] || '0',\n        platform: platform_match[0] || ''\n    };\n\n    const browser = {};\n    if (matched.browser) {\n        browser[matched.browser] = true;\n\n        const versionArray = matched.majorVersion.split('.');\n        browser.version = {\n            major: parseInt(matched.majorVersion, 10),\n            string: matched.version\n        };\n        if (versionArray.length > 1) {\n            browser.version.minor = parseInt(versionArray[1], 10);\n        }\n        if (versionArray.length > 2) {\n            browser.version.build = parseInt(versionArray[2], 10);\n        }\n    }\n\n    if (matched.platform) {\n        browser[matched.platform] = true;\n    }\n\n    if (browser.chrome || browser.opr || browser.safari) {\n        browser.webkit = true;\n    }\n\n    // MSIE. IE11 has 'rv' identifer\n    if (browser.rv || browser.iemobile) {\n        if (browser.rv) {\n            delete browser.rv;\n        }\n        const msie = 'msie';\n        matched.browser = msie;\n        browser[msie] = true;\n    }\n\n    // Microsoft Edge\n    if (browser.edge) {\n        delete browser.edge;\n        const msedge = 'msedge';\n        matched.browser = msedge;\n        browser[msedge] = true;\n    }\n\n    // Opera 15+\n    if (browser.opr) {\n        const opera = 'opera';\n        matched.browser = opera;\n        browser[opera] = true;\n    }\n\n    // Stock android browsers are marked as Safari\n    if (browser.safari && browser.android) {\n        const android = 'android';\n        matched.browser = android;\n        browser[android] = true;\n    }\n\n    browser.name = matched.browser;\n    browser.platform = matched.platform;\n\n    for (const key in Browser) {\n        if (Browser.hasOwnProperty(key)) {\n            delete Browser[key];\n        }\n    }\n    Object.assign(Browser, browser);\n}\n\ndetect();\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Browser);//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NoaW1lZS1mbHYyZm1wNC9saWIvdXRpbHMvYnJvd3Nlci5qcz81NWZmIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSIsImZpbGUiOiIxNi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogcmVmZXJlbmNlIGZsdi5qc1xuICovXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuY29uc3QgQnJvd3NlciA9IHt9O1xuXG5mdW5jdGlvbiBkZXRlY3QoKSB7XG4gICAgLy8gbW9kaWZpZWQgZnJvbSBqcXVlcnktYnJvd3Nlci1wbHVnaW5cblxuICAgIGNvbnN0IHVhID0gc2VsZi5uYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCk7XG5cbiAgICBjb25zdCBtYXRjaCA9IC8oZWRnZSlcXC8oW1xcdy5dKykvLmV4ZWModWEpIHx8XG4gICAgICAgIC8ob3ByKVtcXC9dKFtcXHcuXSspLy5leGVjKHVhKSB8fFxuICAgICAgICAvKGNocm9tZSlbIFxcL10oW1xcdy5dKykvLmV4ZWModWEpIHx8XG4gICAgICAgIC8oaWVtb2JpbGUpW1xcL10oW1xcdy5dKykvLmV4ZWModWEpIHx8XG4gICAgICAgIC8odmVyc2lvbikoYXBwbGV3ZWJraXQpWyBcXC9dKFtcXHcuXSspLiooc2FmYXJpKVsgXFwvXShbXFx3Ll0rKS8uZXhlYyh1YSkgfHxcbiAgICAgICAgLyh3ZWJraXQpWyBcXC9dKFtcXHcuXSspLioodmVyc2lvbilbIFxcL10oW1xcdy5dKykuKihzYWZhcmkpWyBcXC9dKFtcXHcuXSspLy5leGVjKHVhKSB8fFxuICAgICAgICAvKHdlYmtpdClbIFxcL10oW1xcdy5dKykvLmV4ZWModWEpIHx8XG4gICAgICAgIC8ob3BlcmEpKD86Lip2ZXJzaW9ufClbIFxcL10oW1xcdy5dKykvLmV4ZWModWEpIHx8XG4gICAgICAgIC8obXNpZSkgKFtcXHcuXSspLy5leGVjKHVhKSB8fFxuICAgICAgICB1YS5pbmRleE9mKCd0cmlkZW50JykgPj0gMCAmJiAvKHJ2KSg/Ojp8ICkoW1xcdy5dKykvLmV4ZWModWEpIHx8XG4gICAgICAgIHVhLmluZGV4T2YoJ2NvbXBhdGlibGUnKSA8IDAgJiYgLyhtb3ppbGxhKSg/Oi4qPyBydjooW1xcdy5dKyl8KS8uZXhlYyh1YSkgfHwgW107XG5cbiAgICBjb25zdCBwbGF0Zm9ybV9tYXRjaCA9IC8oaXBhZCkvLmV4ZWModWEpIHx8XG4gICAgICAgIC8oaXBvZCkvLmV4ZWModWEpIHx8XG4gICAgICAgIC8od2luZG93cyBwaG9uZSkvLmV4ZWModWEpIHx8XG4gICAgICAgIC8oaXBob25lKS8uZXhlYyh1YSkgfHxcbiAgICAgICAgLyhraW5kbGUpLy5leGVjKHVhKSB8fFxuICAgICAgICAvKGFuZHJvaWQpLy5leGVjKHVhKSB8fFxuICAgICAgICAvKHdpbmRvd3MpLy5leGVjKHVhKSB8fFxuICAgICAgICAvKG1hYykvLmV4ZWModWEpIHx8XG4gICAgICAgIC8obGludXgpLy5leGVjKHVhKSB8fFxuICAgICAgICAvKGNyb3MpLy5leGVjKHVhKSB8fCBbXTtcblxuICAgIGNvbnN0IG1hdGNoZWQgPSB7XG4gICAgICAgIGJyb3dzZXI6IG1hdGNoWzVdIHx8IG1hdGNoWzNdIHx8IG1hdGNoWzFdIHx8ICcnLFxuICAgICAgICB2ZXJzaW9uOiBtYXRjaFsyXSB8fCBtYXRjaFs0XSB8fCAnMCcsXG4gICAgICAgIG1ham9yVmVyc2lvbjogbWF0Y2hbNF0gfHwgbWF0Y2hbMl0gfHwgJzAnLFxuICAgICAgICBwbGF0Zm9ybTogcGxhdGZvcm1fbWF0Y2hbMF0gfHwgJydcbiAgICB9O1xuXG4gICAgY29uc3QgYnJvd3NlciA9IHt9O1xuICAgIGlmIChtYXRjaGVkLmJyb3dzZXIpIHtcbiAgICAgICAgYnJvd3NlclttYXRjaGVkLmJyb3dzZXJdID0gdHJ1ZTtcblxuICAgICAgICBjb25zdCB2ZXJzaW9uQXJyYXkgPSBtYXRjaGVkLm1ham9yVmVyc2lvbi5zcGxpdCgnLicpO1xuICAgICAgICBicm93c2VyLnZlcnNpb24gPSB7XG4gICAgICAgICAgICBtYWpvcjogcGFyc2VJbnQobWF0Y2hlZC5tYWpvclZlcnNpb24sIDEwKSxcbiAgICAgICAgICAgIHN0cmluZzogbWF0Y2hlZC52ZXJzaW9uXG4gICAgICAgIH07XG4gICAgICAgIGlmICh2ZXJzaW9uQXJyYXkubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgYnJvd3Nlci52ZXJzaW9uLm1pbm9yID0gcGFyc2VJbnQodmVyc2lvbkFycmF5WzFdLCAxMCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZlcnNpb25BcnJheS5sZW5ndGggPiAyKSB7XG4gICAgICAgICAgICBicm93c2VyLnZlcnNpb24uYnVpbGQgPSBwYXJzZUludCh2ZXJzaW9uQXJyYXlbMl0sIDEwKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlmIChtYXRjaGVkLnBsYXRmb3JtKSB7XG4gICAgICAgIGJyb3dzZXJbbWF0Y2hlZC5wbGF0Zm9ybV0gPSB0cnVlO1xuICAgIH1cblxuICAgIGlmIChicm93c2VyLmNocm9tZSB8fCBicm93c2VyLm9wciB8fCBicm93c2VyLnNhZmFyaSkge1xuICAgICAgICBicm93c2VyLndlYmtpdCA9IHRydWU7XG4gICAgfVxuXG4gICAgLy8gTVNJRS4gSUUxMSBoYXMgJ3J2JyBpZGVudGlmZXJcbiAgICBpZiAoYnJvd3Nlci5ydiB8fCBicm93c2VyLmllbW9iaWxlKSB7XG4gICAgICAgIGlmIChicm93c2VyLnJ2KSB7XG4gICAgICAgICAgICBkZWxldGUgYnJvd3Nlci5ydjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBtc2llID0gJ21zaWUnO1xuICAgICAgICBtYXRjaGVkLmJyb3dzZXIgPSBtc2llO1xuICAgICAgICBicm93c2VyW21zaWVdID0gdHJ1ZTtcbiAgICB9XG5cbiAgICAvLyBNaWNyb3NvZnQgRWRnZVxuICAgIGlmIChicm93c2VyLmVkZ2UpIHtcbiAgICAgICAgZGVsZXRlIGJyb3dzZXIuZWRnZTtcbiAgICAgICAgY29uc3QgbXNlZGdlID0gJ21zZWRnZSc7XG4gICAgICAgIG1hdGNoZWQuYnJvd3NlciA9IG1zZWRnZTtcbiAgICAgICAgYnJvd3Nlclttc2VkZ2VdID0gdHJ1ZTtcbiAgICB9XG5cbiAgICAvLyBPcGVyYSAxNStcbiAgICBpZiAoYnJvd3Nlci5vcHIpIHtcbiAgICAgICAgY29uc3Qgb3BlcmEgPSAnb3BlcmEnO1xuICAgICAgICBtYXRjaGVkLmJyb3dzZXIgPSBvcGVyYTtcbiAgICAgICAgYnJvd3NlcltvcGVyYV0gPSB0cnVlO1xuICAgIH1cblxuICAgIC8vIFN0b2NrIGFuZHJvaWQgYnJvd3NlcnMgYXJlIG1hcmtlZCBhcyBTYWZhcmlcbiAgICBpZiAoYnJvd3Nlci5zYWZhcmkgJiYgYnJvd3Nlci5hbmRyb2lkKSB7XG4gICAgICAgIGNvbnN0IGFuZHJvaWQgPSAnYW5kcm9pZCc7XG4gICAgICAgIG1hdGNoZWQuYnJvd3NlciA9IGFuZHJvaWQ7XG4gICAgICAgIGJyb3dzZXJbYW5kcm9pZF0gPSB0cnVlO1xuICAgIH1cblxuICAgIGJyb3dzZXIubmFtZSA9IG1hdGNoZWQuYnJvd3NlcjtcbiAgICBicm93c2VyLnBsYXRmb3JtID0gbWF0Y2hlZC5wbGF0Zm9ybTtcblxuICAgIGZvciAoY29uc3Qga2V5IGluIEJyb3dzZXIpIHtcbiAgICAgICAgaWYgKEJyb3dzZXIuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgICAgZGVsZXRlIEJyb3dzZXJba2V5XTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBPYmplY3QuYXNzaWduKEJyb3dzZXIsIGJyb3dzZXIpO1xufVxuXG5kZXRlY3QoKTtcblxuZXhwb3J0IGRlZmF1bHQgQnJvd3NlcjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY2hpbWVlLWZsdjJmbXA0L2xpYi91dGlscy9icm93c2VyLmpzXG4vLyBtb2R1bGUgaWQgPSAxNlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

eval("\n/**\n * chimee-helper v0.1.8\n * (c) 2017 toxic-johann\n * Released under MIT\n */\n\n(function (global, factory) {\n\t true ? factory(exports) :\n\ttypeof define === 'function' && define.amd ? define(['exports'], factory) :\n\t(factory((global.chimeeHelper = global.chimeeHelper || {})));\n}(this, (function (exports) { 'use strict';\n\nfunction unwrapExports (x) {\n\treturn x && x.__esModule ? x['default'] : x;\n}\n\nfunction createCommonjsModule(fn, module) {\n\treturn module = { exports: {} }, fn(module, module.exports), module.exports;\n}\n\n// 7.1.4 ToInteger\nvar ceil  = Math.ceil;\nvar floor = Math.floor;\nvar _toInteger = function(it){\n  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);\n};\n\n// 7.2.1 RequireObjectCoercible(argument)\nvar _defined = function(it){\n  if(it == undefined)throw TypeError(\"Can't call method on  \" + it);\n  return it;\n};\n\n// true  -> String#at\n// false -> String#codePointAt\nvar _stringAt = function(TO_STRING){\n  return function(that, pos){\n    var s = String(_defined(that))\n      , i = _toInteger(pos)\n      , l = s.length\n      , a, b;\n    if(i < 0 || i >= l)return TO_STRING ? '' : undefined;\n    a = s.charCodeAt(i);\n    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff\n      ? TO_STRING ? s.charAt(i) : a\n      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;\n  };\n};\n\nvar _library = true;\n\nvar _global = createCommonjsModule(function (module) {\n// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\nvar global = module.exports = typeof window != 'undefined' && window.Math == Math\n  ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();\nif(typeof __g == 'number')__g = global; // eslint-disable-line no-undef\n});\n\nvar _core = createCommonjsModule(function (module) {\nvar core = module.exports = {version: '2.4.0'};\nif(typeof __e == 'number')__e = core; // eslint-disable-line no-undef\n});\n\nvar _aFunction = function(it){\n  if(typeof it != 'function')throw TypeError(it + ' is not a function!');\n  return it;\n};\n\n// optional / simple context binding\n\nvar _ctx = function(fn, that, length){\n  _aFunction(fn);\n  if(that === undefined)return fn;\n  switch(length){\n    case 1: return function(a){\n      return fn.call(that, a);\n    };\n    case 2: return function(a, b){\n      return fn.call(that, a, b);\n    };\n    case 3: return function(a, b, c){\n      return fn.call(that, a, b, c);\n    };\n  }\n  return function(/* ...args */){\n    return fn.apply(that, arguments);\n  };\n};\n\nvar _isObject = function(it){\n  return typeof it === 'object' ? it !== null : typeof it === 'function';\n};\n\nvar _anObject = function(it){\n  if(!_isObject(it))throw TypeError(it + ' is not an object!');\n  return it;\n};\n\nvar _fails = function(exec){\n  try {\n    return !!exec();\n  } catch(e){\n    return true;\n  }\n};\n\n// Thank's IE8 for his funny defineProperty\nvar _descriptors = !_fails(function(){\n  return Object.defineProperty({}, 'a', {get: function(){ return 7; }}).a != 7;\n});\n\nvar document$1 = _global.document;\nvar is = _isObject(document$1) && _isObject(document$1.createElement);\nvar _domCreate = function(it){\n  return is ? document$1.createElement(it) : {};\n};\n\nvar _ie8DomDefine = !_descriptors && !_fails(function(){\n  return Object.defineProperty(_domCreate('div'), 'a', {get: function(){ return 7; }}).a != 7;\n});\n\n// 7.1.1 ToPrimitive(input [, PreferredType])\n\n// instead of the ES6 spec version, we didn't implement @@toPrimitive case\n// and the second argument - flag - preferred type is a string\nvar _toPrimitive = function(it, S){\n  if(!_isObject(it))return it;\n  var fn, val;\n  if(S && typeof (fn = it.toString) == 'function' && !_isObject(val = fn.call(it)))return val;\n  if(typeof (fn = it.valueOf) == 'function' && !_isObject(val = fn.call(it)))return val;\n  if(!S && typeof (fn = it.toString) == 'function' && !_isObject(val = fn.call(it)))return val;\n  throw TypeError(\"Can't convert object to primitive value\");\n};\n\nvar dP             = Object.defineProperty;\n\nvar f = _descriptors ? Object.defineProperty : function defineProperty(O, P, Attributes){\n  _anObject(O);\n  P = _toPrimitive(P, true);\n  _anObject(Attributes);\n  if(_ie8DomDefine)try {\n    return dP(O, P, Attributes);\n  } catch(e){ /* empty */ }\n  if('get' in Attributes || 'set' in Attributes)throw TypeError('Accessors not supported!');\n  if('value' in Attributes)O[P] = Attributes.value;\n  return O;\n};\n\nvar _objectDp = {\n\tf: f\n};\n\nvar _propertyDesc = function(bitmap, value){\n  return {\n    enumerable  : !(bitmap & 1),\n    configurable: !(bitmap & 2),\n    writable    : !(bitmap & 4),\n    value       : value\n  };\n};\n\nvar _hide = _descriptors ? function(object, key, value){\n  return _objectDp.f(object, key, _propertyDesc(1, value));\n} : function(object, key, value){\n  object[key] = value;\n  return object;\n};\n\nvar PROTOTYPE = 'prototype';\n\nvar $export = function(type, name, source){\n  var IS_FORCED = type & $export.F\n    , IS_GLOBAL = type & $export.G\n    , IS_STATIC = type & $export.S\n    , IS_PROTO  = type & $export.P\n    , IS_BIND   = type & $export.B\n    , IS_WRAP   = type & $export.W\n    , exports   = IS_GLOBAL ? _core : _core[name] || (_core[name] = {})\n    , expProto  = exports[PROTOTYPE]\n    , target    = IS_GLOBAL ? _global : IS_STATIC ? _global[name] : (_global[name] || {})[PROTOTYPE]\n    , key, own, out;\n  if(IS_GLOBAL)source = name;\n  for(key in source){\n    // contains in native\n    own = !IS_FORCED && target && target[key] !== undefined;\n    if(own && key in exports)continue;\n    // export native or passed\n    out = own ? target[key] : source[key];\n    // prevent global pollution for namespaces\n    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]\n    // bind timers to global for call from export context\n    : IS_BIND && own ? _ctx(out, _global)\n    // wrap global constructors for prevent change them in library\n    : IS_WRAP && target[key] == out ? (function(C){\n      var F = function(a, b, c){\n        if(this instanceof C){\n          switch(arguments.length){\n            case 0: return new C;\n            case 1: return new C(a);\n            case 2: return new C(a, b);\n          } return new C(a, b, c);\n        } return C.apply(this, arguments);\n      };\n      F[PROTOTYPE] = C[PROTOTYPE];\n      return F;\n    // make static versions for prototype methods\n    })(out) : IS_PROTO && typeof out == 'function' ? _ctx(Function.call, out) : out;\n    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%\n    if(IS_PROTO){\n      (exports.virtual || (exports.virtual = {}))[key] = out;\n      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%\n      if(type & $export.R && expProto && !expProto[key])_hide(expProto, key, out);\n    }\n  }\n};\n// type bitmap\n$export.F = 1;   // forced\n$export.G = 2;   // global\n$export.S = 4;   // static\n$export.P = 8;   // proto\n$export.B = 16;  // bind\n$export.W = 32;  // wrap\n$export.U = 64;  // safe\n$export.R = 128; // real proto method for `library` \nvar _export = $export;\n\nvar _redefine = _hide;\n\nvar hasOwnProperty = {}.hasOwnProperty;\nvar _has = function(it, key){\n  return hasOwnProperty.call(it, key);\n};\n\nvar _iterators = {};\n\nvar toString = {}.toString;\n\nvar _cof = function(it){\n  return toString.call(it).slice(8, -1);\n};\n\n// fallback for non-array-like ES3 and non-enumerable old V8 strings\n\nvar _iobject = Object('z').propertyIsEnumerable(0) ? Object : function(it){\n  return _cof(it) == 'String' ? it.split('') : Object(it);\n};\n\n// to indexed object, toObject with fallback for non-array-like ES3 strings\n\nvar _toIobject = function(it){\n  return _iobject(_defined(it));\n};\n\n// 7.1.15 ToLength\nvar min       = Math.min;\nvar _toLength = function(it){\n  return it > 0 ? min(_toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991\n};\n\nvar max       = Math.max;\nvar min$1       = Math.min;\nvar _toIndex = function(index, length){\n  index = _toInteger(index);\n  return index < 0 ? max(index + length, 0) : min$1(index, length);\n};\n\n// false -> Array#indexOf\n// true  -> Array#includes\n\nvar _arrayIncludes = function(IS_INCLUDES){\n  return function($this, el, fromIndex){\n    var O      = _toIobject($this)\n      , length = _toLength(O.length)\n      , index  = _toIndex(fromIndex, length)\n      , value;\n    // Array#includes uses SameValueZero equality algorithm\n    if(IS_INCLUDES && el != el)while(length > index){\n      value = O[index++];\n      if(value != value)return true;\n    // Array#toIndex ignores holes, Array#includes - not\n    } else for(;length > index; index++)if(IS_INCLUDES || index in O){\n      if(O[index] === el)return IS_INCLUDES || index || 0;\n    } return !IS_INCLUDES && -1;\n  };\n};\n\nvar SHARED = '__core-js_shared__';\nvar store  = _global[SHARED] || (_global[SHARED] = {});\nvar _shared = function(key){\n  return store[key] || (store[key] = {});\n};\n\nvar id = 0;\nvar px = Math.random();\nvar _uid = function(key){\n  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));\n};\n\nvar shared = _shared('keys');\nvar _sharedKey = function(key){\n  return shared[key] || (shared[key] = _uid(key));\n};\n\nvar arrayIndexOf = _arrayIncludes(false);\nvar IE_PROTO$1     = _sharedKey('IE_PROTO');\n\nvar _objectKeysInternal = function(object, names){\n  var O      = _toIobject(object)\n    , i      = 0\n    , result = []\n    , key;\n  for(key in O)if(key != IE_PROTO$1)_has(O, key) && result.push(key);\n  // Don't enum bug & hidden keys\n  while(names.length > i)if(_has(O, key = names[i++])){\n    ~arrayIndexOf(result, key) || result.push(key);\n  }\n  return result;\n};\n\n// IE 8- don't enum bug keys\nvar _enumBugKeys = (\n  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'\n).split(',');\n\n// 19.1.2.14 / 15.2.3.14 Object.keys(O)\n\n\nvar _objectKeys = Object.keys || function keys(O){\n  return _objectKeysInternal(O, _enumBugKeys);\n};\n\nvar _objectDps = _descriptors ? Object.defineProperties : function defineProperties(O, Properties){\n  _anObject(O);\n  var keys   = _objectKeys(Properties)\n    , length = keys.length\n    , i = 0\n    , P;\n  while(length > i)_objectDp.f(O, P = keys[i++], Properties[P]);\n  return O;\n};\n\nvar _html = _global.document && document.documentElement;\n\n// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])\nvar IE_PROTO    = _sharedKey('IE_PROTO');\nvar Empty       = function(){ /* empty */ };\nvar PROTOTYPE$1   = 'prototype';\n\n// Create object with fake `null` prototype: use iframe Object with cleared prototype\nvar createDict = function(){\n  // Thrash, waste and sodomy: IE GC bug\n  var iframe = _domCreate('iframe')\n    , i      = _enumBugKeys.length\n    , lt     = '<'\n    , gt     = '>'\n    , iframeDocument;\n  iframe.style.display = 'none';\n  _html.appendChild(iframe);\n  iframe.src = 'javascript:'; // eslint-disable-line no-script-url\n  // createDict = iframe.contentWindow.Object;\n  // html.removeChild(iframe);\n  iframeDocument = iframe.contentWindow.document;\n  iframeDocument.open();\n  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);\n  iframeDocument.close();\n  createDict = iframeDocument.F;\n  while(i--)delete createDict[PROTOTYPE$1][_enumBugKeys[i]];\n  return createDict();\n};\n\nvar _objectCreate = Object.create || function create(O, Properties){\n  var result;\n  if(O !== null){\n    Empty[PROTOTYPE$1] = _anObject(O);\n    result = new Empty;\n    Empty[PROTOTYPE$1] = null;\n    // add \"__proto__\" for Object.getPrototypeOf polyfill\n    result[IE_PROTO] = O;\n  } else result = createDict();\n  return Properties === undefined ? result : _objectDps(result, Properties);\n};\n\nvar _wks = createCommonjsModule(function (module) {\nvar store      = _shared('wks')\n  , Symbol     = _global.Symbol\n  , USE_SYMBOL = typeof Symbol == 'function';\n\nvar $exports = module.exports = function(name){\n  return store[name] || (store[name] =\n    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : _uid)('Symbol.' + name));\n};\n\n$exports.store = store;\n});\n\nvar def = _objectDp.f;\nvar TAG = _wks('toStringTag');\n\nvar _setToStringTag = function(it, tag, stat){\n  if(it && !_has(it = stat ? it : it.prototype, TAG))def(it, TAG, {configurable: true, value: tag});\n};\n\nvar IteratorPrototype = {};\n\n// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()\n_hide(IteratorPrototype, _wks('iterator'), function(){ return this; });\n\nvar _iterCreate = function(Constructor, NAME, next){\n  Constructor.prototype = _objectCreate(IteratorPrototype, {next: _propertyDesc(1, next)});\n  _setToStringTag(Constructor, NAME + ' Iterator');\n};\n\n// 7.1.13 ToObject(argument)\n\nvar _toObject = function(it){\n  return Object(_defined(it));\n};\n\n// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)\nvar IE_PROTO$2    = _sharedKey('IE_PROTO');\nvar ObjectProto = Object.prototype;\n\nvar _objectGpo = Object.getPrototypeOf || function(O){\n  O = _toObject(O);\n  if(_has(O, IE_PROTO$2))return O[IE_PROTO$2];\n  if(typeof O.constructor == 'function' && O instanceof O.constructor){\n    return O.constructor.prototype;\n  } return O instanceof Object ? ObjectProto : null;\n};\n\nvar ITERATOR       = _wks('iterator');\nvar BUGGY          = !([].keys && 'next' in [].keys());\nvar FF_ITERATOR    = '@@iterator';\nvar KEYS           = 'keys';\nvar VALUES         = 'values';\n\nvar returnThis = function(){ return this; };\n\nvar _iterDefine = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED){\n  _iterCreate(Constructor, NAME, next);\n  var getMethod = function(kind){\n    if(!BUGGY && kind in proto)return proto[kind];\n    switch(kind){\n      case KEYS: return function keys(){ return new Constructor(this, kind); };\n      case VALUES: return function values(){ return new Constructor(this, kind); };\n    } return function entries(){ return new Constructor(this, kind); };\n  };\n  var TAG        = NAME + ' Iterator'\n    , DEF_VALUES = DEFAULT == VALUES\n    , VALUES_BUG = false\n    , proto      = Base.prototype\n    , $native    = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT]\n    , $default   = $native || getMethod(DEFAULT)\n    , $entries   = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined\n    , $anyNative = NAME == 'Array' ? proto.entries || $native : $native\n    , methods, key, IteratorPrototype;\n  // Fix native\n  if($anyNative){\n    IteratorPrototype = _objectGpo($anyNative.call(new Base));\n    if(IteratorPrototype !== Object.prototype){\n      // Set @@toStringTag to native iterators\n      _setToStringTag(IteratorPrototype, TAG, true);\n      // fix for some old engines\n      if(!_library && !_has(IteratorPrototype, ITERATOR))_hide(IteratorPrototype, ITERATOR, returnThis);\n    }\n  }\n  // fix Array#{values, @@iterator}.name in V8 / FF\n  if(DEF_VALUES && $native && $native.name !== VALUES){\n    VALUES_BUG = true;\n    $default = function values(){ return $native.call(this); };\n  }\n  // Define iterator\n  if((!_library || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])){\n    _hide(proto, ITERATOR, $default);\n  }\n  // Plug for library\n  _iterators[NAME] = $default;\n  _iterators[TAG]  = returnThis;\n  if(DEFAULT){\n    methods = {\n      values:  DEF_VALUES ? $default : getMethod(VALUES),\n      keys:    IS_SET     ? $default : getMethod(KEYS),\n      entries: $entries\n    };\n    if(FORCED)for(key in methods){\n      if(!(key in proto))_redefine(proto, key, methods[key]);\n    } else _export(_export.P + _export.F * (BUGGY || VALUES_BUG), NAME, methods);\n  }\n  return methods;\n};\n\nvar $at  = _stringAt(true);\n\n// 21.1.3.27 String.prototype[@@iterator]()\n_iterDefine(String, 'String', function(iterated){\n  this._t = String(iterated); // target\n  this._i = 0;                // next index\n// 21.1.5.2.1 %StringIteratorPrototype%.next()\n}, function(){\n  var O     = this._t\n    , index = this._i\n    , point;\n  if(index >= O.length)return {value: undefined, done: true};\n  point = $at(O, index);\n  this._i += point.length;\n  return {value: point, done: false};\n});\n\n// call something on iterator step with safe closing on error\n\nvar _iterCall = function(iterator, fn, value, entries){\n  try {\n    return entries ? fn(_anObject(value)[0], value[1]) : fn(value);\n  // 7.4.6 IteratorClose(iterator, completion)\n  } catch(e){\n    var ret = iterator['return'];\n    if(ret !== undefined)_anObject(ret.call(iterator));\n    throw e;\n  }\n};\n\n// check on default Array iterator\nvar ITERATOR$1   = _wks('iterator');\nvar ArrayProto = Array.prototype;\n\nvar _isArrayIter = function(it){\n  return it !== undefined && (_iterators.Array === it || ArrayProto[ITERATOR$1] === it);\n};\n\nvar _createProperty = function(object, index, value){\n  if(index in object)_objectDp.f(object, index, _propertyDesc(0, value));\n  else object[index] = value;\n};\n\n// getting tag from 19.1.3.6 Object.prototype.toString()\nvar TAG$1 = _wks('toStringTag');\nvar ARG = _cof(function(){ return arguments; }()) == 'Arguments';\n\n// fallback for IE11 Script Access Denied error\nvar tryGet = function(it, key){\n  try {\n    return it[key];\n  } catch(e){ /* empty */ }\n};\n\nvar _classof = function(it){\n  var O, T, B;\n  return it === undefined ? 'Undefined' : it === null ? 'Null'\n    // @@toStringTag case\n    : typeof (T = tryGet(O = Object(it), TAG$1)) == 'string' ? T\n    // builtinTag case\n    : ARG ? _cof(O)\n    // ES3 arguments fallback\n    : (B = _cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;\n};\n\nvar ITERATOR$2  = _wks('iterator');\nvar core_getIteratorMethod = _core.getIteratorMethod = function(it){\n  if(it != undefined)return it[ITERATOR$2]\n    || it['@@iterator']\n    || _iterators[_classof(it)];\n};\n\nvar ITERATOR$3     = _wks('iterator');\nvar SAFE_CLOSING = false;\n\ntry {\n  var riter = [7][ITERATOR$3]();\n  riter['return'] = function(){ SAFE_CLOSING = true; };\n  Array.from(riter, function(){ throw 2; });\n} catch(e){ /* empty */ }\n\nvar _iterDetect = function(exec, skipClosing){\n  if(!skipClosing && !SAFE_CLOSING)return false;\n  var safe = false;\n  try {\n    var arr  = [7]\n      , iter = arr[ITERATOR$3]();\n    iter.next = function(){ return {done: safe = true}; };\n    arr[ITERATOR$3] = function(){ return iter; };\n    exec(arr);\n  } catch(e){ /* empty */ }\n  return safe;\n};\n\n_export(_export.S + _export.F * !_iterDetect(function(iter){ Array.from(iter); }), 'Array', {\n  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)\n  from: function from(arrayLike/*, mapfn = undefined, thisArg = undefined*/){\n    var O       = _toObject(arrayLike)\n      , C       = typeof this == 'function' ? this : Array\n      , aLen    = arguments.length\n      , mapfn   = aLen > 1 ? arguments[1] : undefined\n      , mapping = mapfn !== undefined\n      , index   = 0\n      , iterFn  = core_getIteratorMethod(O)\n      , length, result, step, iterator;\n    if(mapping)mapfn = _ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);\n    // if object isn't iterable or it's array with default iterator - use simple case\n    if(iterFn != undefined && !(C == Array && _isArrayIter(iterFn))){\n      for(iterator = iterFn.call(O), result = new C; !(step = iterator.next()).done; index++){\n        _createProperty(result, index, mapping ? _iterCall(iterator, mapfn, [step.value, index], true) : step.value);\n      }\n    } else {\n      length = _toLength(O.length);\n      for(result = new C(length); length > index; index++){\n        _createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);\n      }\n    }\n    result.length = index;\n    return result;\n  }\n});\n\nvar from$1 = _core.Array.from;\n\nvar from = createCommonjsModule(function (module) {\nmodule.exports = { \"default\": from$1, __esModule: true };\n});\n\nvar _Array$from = unwrapExports(from);\n\nvar toConsumableArray = createCommonjsModule(function (module, exports) {\n\"use strict\";\n\nexports.__esModule = true;\n\n\n\nvar _from2 = _interopRequireDefault(from);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = function (arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return (0, _from2.default)(arr);\n  }\n};\n});\n\nvar _toConsumableArray = unwrapExports(toConsumableArray);\n\nvar _addToUnscopables = function(){ /* empty */ };\n\nvar _iterStep = function(done, value){\n  return {value: value, done: !!done};\n};\n\n// 22.1.3.4 Array.prototype.entries()\n// 22.1.3.13 Array.prototype.keys()\n// 22.1.3.29 Array.prototype.values()\n// 22.1.3.30 Array.prototype[@@iterator]()\nvar es6_array_iterator = _iterDefine(Array, 'Array', function(iterated, kind){\n  this._t = _toIobject(iterated); // target\n  this._i = 0;                   // next index\n  this._k = kind;                // kind\n// 22.1.5.2.1 %ArrayIteratorPrototype%.next()\n}, function(){\n  var O     = this._t\n    , kind  = this._k\n    , index = this._i++;\n  if(!O || index >= O.length){\n    this._t = undefined;\n    return _iterStep(1);\n  }\n  if(kind == 'keys'  )return _iterStep(0, index);\n  if(kind == 'values')return _iterStep(0, O[index]);\n  return _iterStep(0, [index, O[index]]);\n}, 'values');\n\n// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)\n_iterators.Arguments = _iterators.Array;\n\n_addToUnscopables('keys');\n_addToUnscopables('values');\n_addToUnscopables('entries');\n\nvar TO_STRING_TAG = _wks('toStringTag');\n\nfor(var collections = ['NodeList', 'DOMTokenList', 'MediaList', 'StyleSheetList', 'CSSRuleList'], i = 0; i < 5; i++){\n  var NAME       = collections[i]\n    , Collection = _global[NAME]\n    , proto      = Collection && Collection.prototype;\n  if(proto && !proto[TO_STRING_TAG])_hide(proto, TO_STRING_TAG, NAME);\n  _iterators[NAME] = _iterators.Array;\n}\n\nvar f$1 = _wks;\n\nvar _wksExt = {\n\tf: f$1\n};\n\nvar iterator$2 = _wksExt.f('iterator');\n\nvar iterator = createCommonjsModule(function (module) {\nmodule.exports = { \"default\": iterator$2, __esModule: true };\n});\n\nvar _meta = createCommonjsModule(function (module) {\nvar META     = _uid('meta')\n  , setDesc  = _objectDp.f\n  , id       = 0;\nvar isExtensible = Object.isExtensible || function(){\n  return true;\n};\nvar FREEZE = !_fails(function(){\n  return isExtensible(Object.preventExtensions({}));\n});\nvar setMeta = function(it){\n  setDesc(it, META, {value: {\n    i: 'O' + ++id, // object ID\n    w: {}          // weak collections IDs\n  }});\n};\nvar fastKey = function(it, create){\n  // return primitive with prefix\n  if(!_isObject(it))return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;\n  if(!_has(it, META)){\n    // can't set metadata to uncaught frozen object\n    if(!isExtensible(it))return 'F';\n    // not necessary to add metadata\n    if(!create)return 'E';\n    // add missing metadata\n    setMeta(it);\n  // return object ID\n  } return it[META].i;\n};\nvar getWeak = function(it, create){\n  if(!_has(it, META)){\n    // can't set metadata to uncaught frozen object\n    if(!isExtensible(it))return true;\n    // not necessary to add metadata\n    if(!create)return false;\n    // add missing metadata\n    setMeta(it);\n  // return hash weak collections IDs\n  } return it[META].w;\n};\n// add metadata on freeze-family methods calling\nvar onFreeze = function(it){\n  if(FREEZE && meta.NEED && isExtensible(it) && !_has(it, META))setMeta(it);\n  return it;\n};\nvar meta = module.exports = {\n  KEY:      META,\n  NEED:     false,\n  fastKey:  fastKey,\n  getWeak:  getWeak,\n  onFreeze: onFreeze\n};\n});\n\nvar defineProperty = _objectDp.f;\nvar _wksDefine = function(name){\n  var $Symbol = _core.Symbol || (_core.Symbol = _library ? {} : _global.Symbol || {});\n  if(name.charAt(0) != '_' && !(name in $Symbol))defineProperty($Symbol, name, {value: _wksExt.f(name)});\n};\n\nvar _keyof = function(object, el){\n  var O      = _toIobject(object)\n    , keys   = _objectKeys(O)\n    , length = keys.length\n    , index  = 0\n    , key;\n  while(length > index)if(O[key = keys[index++]] === el)return key;\n};\n\nvar f$2 = Object.getOwnPropertySymbols;\n\nvar _objectGops = {\n\tf: f$2\n};\n\nvar f$3 = {}.propertyIsEnumerable;\n\nvar _objectPie = {\n\tf: f$3\n};\n\n// all enumerable object keys, includes symbols\n\nvar _enumKeys = function(it){\n  var result     = _objectKeys(it)\n    , getSymbols = _objectGops.f;\n  if(getSymbols){\n    var symbols = getSymbols(it)\n      , isEnum  = _objectPie.f\n      , i       = 0\n      , key;\n    while(symbols.length > i)if(isEnum.call(it, key = symbols[i++]))result.push(key);\n  } return result;\n};\n\n// 7.2.2 IsArray(argument)\n\nvar _isArray = Array.isArray || function isArray(arg){\n  return _cof(arg) == 'Array';\n};\n\n// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)\nvar hiddenKeys = _enumBugKeys.concat('length', 'prototype');\n\nvar f$5 = Object.getOwnPropertyNames || function getOwnPropertyNames(O){\n  return _objectKeysInternal(O, hiddenKeys);\n};\n\nvar _objectGopn = {\n\tf: f$5\n};\n\n// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window\nvar gOPN$1      = _objectGopn.f;\nvar toString$1  = {}.toString;\n\nvar windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames\n  ? Object.getOwnPropertyNames(window) : [];\n\nvar getWindowNames = function(it){\n  try {\n    return gOPN$1(it);\n  } catch(e){\n    return windowNames.slice();\n  }\n};\n\nvar f$4 = function getOwnPropertyNames(it){\n  return windowNames && toString$1.call(it) == '[object Window]' ? getWindowNames(it) : gOPN$1(_toIobject(it));\n};\n\nvar _objectGopnExt = {\n\tf: f$4\n};\n\nvar gOPD$1           = Object.getOwnPropertyDescriptor;\n\nvar f$6 = _descriptors ? gOPD$1 : function getOwnPropertyDescriptor(O, P){\n  O = _toIobject(O);\n  P = _toPrimitive(P, true);\n  if(_ie8DomDefine)try {\n    return gOPD$1(O, P);\n  } catch(e){ /* empty */ }\n  if(_has(O, P))return _propertyDesc(!_objectPie.f.call(O, P), O[P]);\n};\n\nvar _objectGopd = {\n\tf: f$6\n};\n\n// ECMAScript 6 symbols shim\nvar META           = _meta.KEY;\nvar gOPD           = _objectGopd.f;\nvar dP$2             = _objectDp.f;\nvar gOPN           = _objectGopnExt.f;\nvar $Symbol        = _global.Symbol;\nvar $JSON          = _global.JSON;\nvar _stringify     = $JSON && $JSON.stringify;\nvar PROTOTYPE$2      = 'prototype';\nvar HIDDEN         = _wks('_hidden');\nvar TO_PRIMITIVE   = _wks('toPrimitive');\nvar isEnum         = {}.propertyIsEnumerable;\nvar SymbolRegistry = _shared('symbol-registry');\nvar AllSymbols     = _shared('symbols');\nvar OPSymbols      = _shared('op-symbols');\nvar ObjectProto$1    = Object[PROTOTYPE$2];\nvar USE_NATIVE     = typeof $Symbol == 'function';\nvar QObject        = _global.QObject;\n// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173\nvar setter = !QObject || !QObject[PROTOTYPE$2] || !QObject[PROTOTYPE$2].findChild;\n\n// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687\nvar setSymbolDesc = _descriptors && _fails(function(){\n  return _objectCreate(dP$2({}, 'a', {\n    get: function(){ return dP$2(this, 'a', {value: 7}).a; }\n  })).a != 7;\n}) ? function(it, key, D){\n  var protoDesc = gOPD(ObjectProto$1, key);\n  if(protoDesc)delete ObjectProto$1[key];\n  dP$2(it, key, D);\n  if(protoDesc && it !== ObjectProto$1)dP$2(ObjectProto$1, key, protoDesc);\n} : dP$2;\n\nvar wrap = function(tag){\n  var sym = AllSymbols[tag] = _objectCreate($Symbol[PROTOTYPE$2]);\n  sym._k = tag;\n  return sym;\n};\n\nvar isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function(it){\n  return typeof it == 'symbol';\n} : function(it){\n  return it instanceof $Symbol;\n};\n\nvar $defineProperty = function defineProperty(it, key, D){\n  if(it === ObjectProto$1)$defineProperty(OPSymbols, key, D);\n  _anObject(it);\n  key = _toPrimitive(key, true);\n  _anObject(D);\n  if(_has(AllSymbols, key)){\n    if(!D.enumerable){\n      if(!_has(it, HIDDEN))dP$2(it, HIDDEN, _propertyDesc(1, {}));\n      it[HIDDEN][key] = true;\n    } else {\n      if(_has(it, HIDDEN) && it[HIDDEN][key])it[HIDDEN][key] = false;\n      D = _objectCreate(D, {enumerable: _propertyDesc(0, false)});\n    } return setSymbolDesc(it, key, D);\n  } return dP$2(it, key, D);\n};\nvar $defineProperties = function defineProperties(it, P){\n  _anObject(it);\n  var keys = _enumKeys(P = _toIobject(P))\n    , i    = 0\n    , l = keys.length\n    , key;\n  while(l > i)$defineProperty(it, key = keys[i++], P[key]);\n  return it;\n};\nvar $create = function create(it, P){\n  return P === undefined ? _objectCreate(it) : $defineProperties(_objectCreate(it), P);\n};\nvar $propertyIsEnumerable = function propertyIsEnumerable(key){\n  var E = isEnum.call(this, key = _toPrimitive(key, true));\n  if(this === ObjectProto$1 && _has(AllSymbols, key) && !_has(OPSymbols, key))return false;\n  return E || !_has(this, key) || !_has(AllSymbols, key) || _has(this, HIDDEN) && this[HIDDEN][key] ? E : true;\n};\nvar $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key){\n  it  = _toIobject(it);\n  key = _toPrimitive(key, true);\n  if(it === ObjectProto$1 && _has(AllSymbols, key) && !_has(OPSymbols, key))return;\n  var D = gOPD(it, key);\n  if(D && _has(AllSymbols, key) && !(_has(it, HIDDEN) && it[HIDDEN][key]))D.enumerable = true;\n  return D;\n};\nvar $getOwnPropertyNames = function getOwnPropertyNames(it){\n  var names  = gOPN(_toIobject(it))\n    , result = []\n    , i      = 0\n    , key;\n  while(names.length > i){\n    if(!_has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META)result.push(key);\n  } return result;\n};\nvar $getOwnPropertySymbols = function getOwnPropertySymbols(it){\n  var IS_OP  = it === ObjectProto$1\n    , names  = gOPN(IS_OP ? OPSymbols : _toIobject(it))\n    , result = []\n    , i      = 0\n    , key;\n  while(names.length > i){\n    if(_has(AllSymbols, key = names[i++]) && (IS_OP ? _has(ObjectProto$1, key) : true))result.push(AllSymbols[key]);\n  } return result;\n};\n\n// 19.4.1.1 Symbol([description])\nif(!USE_NATIVE){\n  $Symbol = function Symbol(){\n    if(this instanceof $Symbol)throw TypeError('Symbol is not a constructor!');\n    var tag = _uid(arguments.length > 0 ? arguments[0] : undefined);\n    var $set = function(value){\n      if(this === ObjectProto$1)$set.call(OPSymbols, value);\n      if(_has(this, HIDDEN) && _has(this[HIDDEN], tag))this[HIDDEN][tag] = false;\n      setSymbolDesc(this, tag, _propertyDesc(1, value));\n    };\n    if(_descriptors && setter)setSymbolDesc(ObjectProto$1, tag, {configurable: true, set: $set});\n    return wrap(tag);\n  };\n  _redefine($Symbol[PROTOTYPE$2], 'toString', function toString(){\n    return this._k;\n  });\n\n  _objectGopd.f = $getOwnPropertyDescriptor;\n  _objectDp.f   = $defineProperty;\n  _objectGopn.f = _objectGopnExt.f = $getOwnPropertyNames;\n  _objectPie.f  = $propertyIsEnumerable;\n  _objectGops.f = $getOwnPropertySymbols;\n\n  if(_descriptors && !_library){\n    _redefine(ObjectProto$1, 'propertyIsEnumerable', $propertyIsEnumerable, true);\n  }\n\n  _wksExt.f = function(name){\n    return wrap(_wks(name));\n  };\n}\n\n_export(_export.G + _export.W + _export.F * !USE_NATIVE, {Symbol: $Symbol});\n\nfor(var symbols = (\n  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14\n  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'\n).split(','), i$1 = 0; symbols.length > i$1; )_wks(symbols[i$1++]);\n\nfor(var symbols = _objectKeys(_wks.store), i$1 = 0; symbols.length > i$1; )_wksDefine(symbols[i$1++]);\n\n_export(_export.S + _export.F * !USE_NATIVE, 'Symbol', {\n  // 19.4.2.1 Symbol.for(key)\n  'for': function(key){\n    return _has(SymbolRegistry, key += '')\n      ? SymbolRegistry[key]\n      : SymbolRegistry[key] = $Symbol(key);\n  },\n  // 19.4.2.5 Symbol.keyFor(sym)\n  keyFor: function keyFor(key){\n    if(isSymbol(key))return _keyof(SymbolRegistry, key);\n    throw TypeError(key + ' is not a symbol!');\n  },\n  useSetter: function(){ setter = true; },\n  useSimple: function(){ setter = false; }\n});\n\n_export(_export.S + _export.F * !USE_NATIVE, 'Object', {\n  // 19.1.2.2 Object.create(O [, Properties])\n  create: $create,\n  // 19.1.2.4 Object.defineProperty(O, P, Attributes)\n  defineProperty: $defineProperty,\n  // 19.1.2.3 Object.defineProperties(O, Properties)\n  defineProperties: $defineProperties,\n  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)\n  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,\n  // 19.1.2.7 Object.getOwnPropertyNames(O)\n  getOwnPropertyNames: $getOwnPropertyNames,\n  // 19.1.2.8 Object.getOwnPropertySymbols(O)\n  getOwnPropertySymbols: $getOwnPropertySymbols\n});\n\n// 24.3.2 JSON.stringify(value [, replacer [, space]])\n$JSON && _export(_export.S + _export.F * (!USE_NATIVE || _fails(function(){\n  var S = $Symbol();\n  // MS Edge converts symbol values to JSON as {}\n  // WebKit converts symbol values to JSON as null\n  // V8 throws on boxed symbols\n  return _stringify([S]) != '[null]' || _stringify({a: S}) != '{}' || _stringify(Object(S)) != '{}';\n})), 'JSON', {\n  stringify: function stringify(it){\n    if(it === undefined || isSymbol(it))return; // IE8 returns string on undefined\n    var args = [it]\n      , i    = 1\n      , replacer, $replacer;\n    while(arguments.length > i)args.push(arguments[i++]);\n    replacer = args[1];\n    if(typeof replacer == 'function')$replacer = replacer;\n    if($replacer || !_isArray(replacer))replacer = function(key, value){\n      if($replacer)value = $replacer.call(this, key, value);\n      if(!isSymbol(value))return value;\n    };\n    args[1] = replacer;\n    return _stringify.apply($JSON, args);\n  }\n});\n\n// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)\n$Symbol[PROTOTYPE$2][TO_PRIMITIVE] || _hide($Symbol[PROTOTYPE$2], TO_PRIMITIVE, $Symbol[PROTOTYPE$2].valueOf);\n// 19.4.3.5 Symbol.prototype[@@toStringTag]\n_setToStringTag($Symbol, 'Symbol');\n// 20.2.1.9 Math[@@toStringTag]\n_setToStringTag(Math, 'Math', true);\n// 24.3.3 JSON[@@toStringTag]\n_setToStringTag(_global.JSON, 'JSON', true);\n\n_wksDefine('asyncIterator');\n\n_wksDefine('observable');\n\nvar index = _core.Symbol;\n\nvar symbol = createCommonjsModule(function (module) {\nmodule.exports = { \"default\": index, __esModule: true };\n});\n\nvar _typeof_1 = createCommonjsModule(function (module, exports) {\n\"use strict\";\n\nexports.__esModule = true;\n\n\n\nvar _iterator2 = _interopRequireDefault(iterator);\n\n\n\nvar _symbol2 = _interopRequireDefault(symbol);\n\nvar _typeof = typeof _symbol2.default === \"function\" && typeof _iterator2.default === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof _symbol2.default === \"function\" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? \"symbol\" : typeof obj; };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = typeof _symbol2.default === \"function\" && _typeof(_iterator2.default) === \"symbol\" ? function (obj) {\n  return typeof obj === \"undefined\" ? \"undefined\" : _typeof(obj);\n} : function (obj) {\n  return obj && typeof _symbol2.default === \"function\" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? \"symbol\" : typeof obj === \"undefined\" ? \"undefined\" : _typeof(obj);\n};\n});\n\nvar _typeof = unwrapExports(_typeof_1);\n\n// most Object methods by ES6 should accept primitives\n\nvar _objectSap = function(KEY, exec){\n  var fn  = (_core.Object || {})[KEY] || Object[KEY]\n    , exp = {};\n  exp[KEY] = exec(fn);\n  _export(_export.S + _export.F * _fails(function(){ fn(1); }), 'Object', exp);\n};\n\n// 19.1.2.14 Object.keys(O)\n\n\n_objectSap('keys', function(){\n  return function keys(it){\n    return _objectKeys(_toObject(it));\n  };\n});\n\nvar keys$1 = _core.Object.keys;\n\nvar keys = createCommonjsModule(function (module) {\nmodule.exports = { \"default\": keys$1, __esModule: true };\n});\n\nvar _Object$keys = unwrapExports(keys);\n\n// 20.1.2.3 Number.isInteger(number)\nvar floor$1    = Math.floor;\nvar _isInteger = function isInteger(it){\n  return !_isObject(it) && isFinite(it) && floor$1(it) === it;\n};\n\n// 20.1.2.3 Number.isInteger(number)\n\n\n_export(_export.S, 'Number', {isInteger: _isInteger});\n\nvar isInteger$2 = _core.Number.isInteger;\n\nvar isInteger$1 = createCommonjsModule(function (module) {\nmodule.exports = { \"default\": isInteger$2, __esModule: true };\n});\n\nvar _Number$isInteger = unwrapExports(isInteger$1);\n\nvar _stringWs = '\\x09\\x0A\\x0B\\x0C\\x0D\\x20\\xA0\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003' +\n  '\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\u2028\\u2029\\uFEFF';\n\nvar space   = '[' + _stringWs + ']';\nvar non     = '\\u200b\\u0085';\nvar ltrim   = RegExp('^' + space + space + '*');\nvar rtrim   = RegExp(space + space + '*$');\n\nvar exporter = function(KEY, exec, ALIAS){\n  var exp   = {};\n  var FORCE = _fails(function(){\n    return !!_stringWs[KEY]() || non[KEY]() != non;\n  });\n  var fn = exp[KEY] = FORCE ? exec(trim) : _stringWs[KEY];\n  if(ALIAS)exp[ALIAS] = fn;\n  _export(_export.P + _export.F * FORCE, 'String', exp);\n};\n\n// 1 -> String#trimLeft\n// 2 -> String#trimRight\n// 3 -> String#trim\nvar trim = exporter.trim = function(string, TYPE){\n  string = String(_defined(string));\n  if(TYPE & 1)string = string.replace(ltrim, '');\n  if(TYPE & 2)string = string.replace(rtrim, '');\n  return string;\n};\n\nvar _stringTrim = exporter;\n\nvar $parseFloat = _global.parseFloat;\nvar $trim       = _stringTrim.trim;\n\nvar _parseFloat$3 = 1 / $parseFloat(_stringWs + '-0') !== -Infinity ? function parseFloat(str){\n  var string = $trim(String(str), 3)\n    , result = $parseFloat(string);\n  return result === 0 && string.charAt(0) == '-' ? -0 : result;\n} : $parseFloat;\n\n// 20.1.2.12 Number.parseFloat(string)\n_export(_export.S + _export.F * (Number.parseFloat != _parseFloat$3), 'Number', {parseFloat: _parseFloat$3});\n\nvar _parseFloat$1 = parseFloat;\n\nvar _parseFloat = createCommonjsModule(function (module) {\nmodule.exports = { \"default\": _parseFloat$1, __esModule: true };\n});\n\nvar _Number$parseFloat = unwrapExports(_parseFloat);\n\n/**\n * toxic-predicate-functions v0.1.2\n * (c) 2017 toxic-johann\n * Released under MIT\n */\n\n/**\n * is void element or not ? Means it will return true when val is undefined or null\n * @param  {Anything}  obj\n * @return {Boolean}   return true when val is undefined or null\n */\nfunction isVoid(obj) {\n  return obj === undefined || obj === null;\n}\n/**\n * to check whether a variable is array\n * @param {Anything} arr\n * @return {Boolean} true when it is a boolean\n */\nfunction isArray(arr) {\n  return Array.isArray(arr);\n}\n\n/**\n * 判断是否为function\n * @param  {Anything}  obj [description]\n * @return {Boolean}     [description]\n */\nfunction isFunction(obj) {\n  return typeof obj === 'function';\n}\n\n/**\n * 判断是否是对象\n * @param  {Anything}  obj 传入对象\n * @return {Boolean}     [description]\n */\nfunction isObject$1(obj) {\n  // incase of arrow function and array\n  return Object(obj) === obj && String(obj) === '[object Object]' && !isFunction(obj) && !isArray(obj);\n}\n/**\n * to tell you if it's a real number\n * @param  {Anything}  obj\n * @return {Boolean}   return true when it's a number\n */\nfunction isNumber(obj) {\n  return typeof obj === 'number';\n}\n/**\n * to tell you if the val can be transfer into data\n * @param  {Anything}  obj [description]\n * @return {Boolean}     [description]\n */\nfunction isNumeric(obj) {\n  return !isArray(obj) && obj - _Number$parseFloat(obj) + 1 >= 0;\n}\n/**\n * 判断是否为整数\n * @param  {Anything}  obj [description]\n * @return {Boolean}     [description]\n */\nfunction isInteger(num) {\n  return _Number$isInteger(num);\n}\n\n/**\n * 判断是否为空\n * @param  {Anything}  obj [description]\n * @return {Boolean}     [description]\n * @example\n * \"\", {}, [], 0, null, undefined, false 为空\n */\nfunction isEmpty(obj) {\n  if (isArray(obj)) {\n    return obj.length === 0;\n  } else if (isObject$1(obj)) {\n    return _Object$keys(obj).length === 0;\n  } else {\n    return !obj;\n  }\n}\n/**\n * 判断是否为事件\n * @param  {Anything}  obj [description]\n * @return {Boolean}     [description]\n */\nfunction isEvent(obj) {\n  return obj instanceof Event || obj.originalEvent instanceof Event;\n}\n/**\n * 判断是否为blob\n * @param  {Anything}  obj [description]\n * @return {Boolean}     [description]\n */\nfunction isBlob(obj) {\n  return obj instanceof Blob;\n}\n/**\n * 判断是否为file上传的文件\n * @param  {Anything}  obj [description]\n * @return {Boolean}     [description]\n */\nfunction isFile(obj) {\n  return isBlob(obj) && isString(obj.name);\n}\n/**\n * 判断是否为日期对象\n * @param  {Anything}  obj [description]\n * @return {Boolean}     [description]\n */\nfunction isDate(obj) {\n  return Object.prototype.toString.call(obj) === '[object Date]';\n}\n/**\n * 判断是否是string\n * @param  {Anything}  str [description]\n * @return {Boolean}     [description]\n */\nfunction isString(str) {\n  return typeof str === 'string' || str instanceof String;\n}\n/**\n * is Boolean or not\n * @param  {Anything} bool\n * @return {Boolean}\n */\nfunction isBoolean(bool) {\n  return typeof bool === 'boolean';\n}\n/**\n * is a promise or not\n * @param {Anything} obj\n * @return {boolean}\n */\nfunction isPromise(obj) {\n  return !!obj && ((typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object' || typeof obj === 'function') && typeof obj.then === 'function';\n}\n/**\n * is Primitive type or not, whick means it will return true when data is number/string/boolean/undefined/null\n * @param  {Anyting}  val\n * @return {Boolean}  true when type is number/string/boolean/undefined/null\n */\nfunction isPrimitive(val) {\n  return isVoid(val) || isBoolean(val) || isString(val) || isNumber(val);\n}\n/**\n * 判断是否为url且必须要带有协议头\n * @param  {Anything}  str [description]\n * @return {Boolean}     [description]\n */\nfunction isUrl(str) {\n  return isString(str) && !!str.match(/^((https?|ftp|rtsp|mms):\\/\\/)(([0-9a-z_!~*'().&=+$%-]+: )?[0-9a-z_!~*'().&=+$%-]+@)?(([0-9]{1,3}\\.){3}[0-9]{1,3}|([0-9a-z_!~*'()-]+\\.)*([0-9a-z][0-9a-z-]{0,61})?[0-9a-z]\\.[a-z]{2,6}|localhost)(:[0-9]{1,4})?((\\/?)|(\\/[0-9a-z_!~*'().;?:@&=+$,%#-]+)+\\/?)$/i);\n}\n/**\n * to test if a HTML node\n * @param  {Anything}  obj [description]\n * @return {Boolean}     [description]\n */\nfunction isNode(obj) {\n  return !!((typeof Node === 'undefined' ? 'undefined' : _typeof(Node)) === 'object' ? obj instanceof Node : obj && (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object' && typeof obj.nodeType === 'number' && typeof obj.nodeName === 'string');\n}\n/**\n * to test if a HTML element\n * @param  {Anything}  obj [description]\n * @return {Boolean}     [description]\n */\nfunction isElement(obj) {\n  return !!((typeof HTMLElement === 'undefined' ? 'undefined' : _typeof(HTMLElement)) === 'object' ? obj instanceof HTMLElement : obj && (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object' && obj !== null && obj.nodeType === 1 && typeof obj.nodeName === 'string');\n}\n/**\n * check if node A is node B's parent or not\n * @param  {Node}  parent\n * @param  {Node}  child\n * @return {Boolean}\n */\nfunction isChildNode(parent, child) {\n  if (!isNode(parent) || !isNode(child)) {\n    return false;\n  }\n  return child.parentNode === parent;\n}\n/**\n * check if node B is node A's posterrity or not\n * @param  {Node}  parent\n * @param  {Node}  child\n * @return {Boolean}\n */\nfunction isPosterityNode(parent, child) {\n  if (!isNode(parent) || !isNode(child)) {\n    return false;\n  }\n  while (child.parentNode) {\n    child = child.parentNode;\n    if (child === parent) {\n      return true;\n    }\n  }\n  return false;\n}\n/**\n * check if the string is an HTMLString\n * @param  {string}  str only accept string\n * @return {Boolean}\n */\nfunction isHTMLString(str) {\n  return (/<[^>]+?>/.test(str)\n  );\n}\n/**\n * check if is an error\n * @param {anything} val\n * @return {boolean}\n */\nfunction isError(val) {\n  return val instanceof Error;\n}\n\n/**\n * toxic-utils v0.1.3\n * (c) 2017 toxic-johann\n * Released under MIT\n */\n\n/**\n * 生成深度遍历函数的处理器，常用于生成深度拷贝等\n * @param  {Function} fn 遍历到深度变量的时候的操作\n * @return {Function}     可用的操作函数\n */\nfunction genTraversalHandler(fn) {\n  function recursiveFn(source, target, key) {\n    if (isArray(source) || isObject$1(source)) {\n      target = target || (isObject$1(source) ? {} : []);\n      for (var _key in source) {\n        target[_key] = recursiveFn(source[_key], target[_key], _key);\n      }\n      return target;\n    }\n    return fn(source, target, key);\n  }\n  return recursiveFn;\n}\nvar _deepAssign = genTraversalHandler(function (val) {\n  return val;\n});\n/**\n * 对象克隆\n * @param  {Array|Object} source 传其他值会直接返回\n * @return {clone-target}        [description]\n */\nfunction deepClone(source) {\n  if (isPrimitive(source)) {\n    throw new TypeError('deepClone only accept non primitive type');\n  }\n  return _deepAssign(source);\n}\n/**\n * merge multiple objects\n * @param  {...Object} args [description]\n * @return {merge-object}         [description]\n */\nfunction deepAssign() {\n  for (var _len = arguments.length, args = Array(_len), _key2 = 0; _key2 < _len; _key2++) {\n    args[_key2] = arguments[_key2];\n  }\n\n  if (args.length < 2) {\n    throw new Error('deepAssign accept two and more argument');\n  }\n  for (var i = args.length - 1; i > -1; i--) {\n    if (isPrimitive(args[i])) {\n      throw new TypeError('deepAssign only accept non primitive type');\n    }\n  }\n  var target = args.shift();\n  args.forEach(function (source) {\n    return _deepAssign(source, target);\n  });\n  return target;\n}\n\n/**\n * camelize any string, e.g hello world -> helloWorld\n * @param  {string} str only accept string!\n * @return {string}     camelize string\n */\nfunction camelize(str, isBig) {\n  return str.replace(/(^|[^a-zA-Z]+)([a-zA-Z])/g, function (match, spilt, initials, index) {\n    return !isBig && index === 0 ? initials.toLowerCase() : initials.toUpperCase();\n  });\n}\n/**\n * hypenate any string e.g hello world -> hello-world\n * @param  {string} str only accept string\n * @return {string}\n */\nfunction hypenate(str) {\n  return camelize(str).replace(/([A-Z])/g, function (match) {\n    return '-' + match.toLowerCase();\n  });\n}\n\n/**\n * bind the function with some context. we have some fallback strategy here\n * @param {function} fn the function which we need to bind the context on\n * @param {any} context the context object\n */\nfunction bind(fn, context) {\n  if (fn.bind) {\n    return fn.bind(context);\n  } else if (fn.apply) {\n    return function __autobind__() {\n      for (var _len2 = arguments.length, args = Array(_len2), _key3 = 0; _key3 < _len2; _key3++) {\n        args[_key3] = arguments[_key3];\n      }\n\n      return fn.apply(context, args);\n    };\n  } else {\n    return function __autobind__() {\n      for (var _len3 = arguments.length, args = Array(_len3), _key4 = 0; _key4 < _len3; _key4++) {\n        args[_key4] = arguments[_key4];\n      }\n\n      return fn.call.apply(fn, [context].concat(_toConsumableArray(args)));\n    };\n  }\n}\n\n// **********************  计算类    ************************\n// 计算获取某种东西或者计算出某种东西\n// ********************************************************\n// 生成uuid\nfunction uuid() {\n  return S4() + S4() + '-' + S4() + '-' + S4() + '-' + S4() + '-' + S4() + S4() + S4();\n}\n// 生成四个随机数\nfunction S4() {\n  return ((1 + Math.random()) * 0x10000 | 0).toString(16).substring(1);\n}\n// 生成任意长度的随机数\nfunction rand(length) {\n  var str = '';\n  while (str.length < length) {\n    str += S4();\n  }\n  return str.slice(0, length);\n}\n\n// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)\n_export(_export.S + _export.F * !_descriptors, 'Object', {defineProperty: _objectDp.f});\n\nvar $Object = _core.Object;\nvar defineProperty$2 = function defineProperty(it, key, desc){\n  return $Object.defineProperty(it, key, desc);\n};\n\nvar defineProperty$1 = createCommonjsModule(function (module) {\nmodule.exports = { \"default\": defineProperty$2, __esModule: true };\n});\n\nvar _Object$defineProperty = unwrapExports(defineProperty$1);\n\nvar _anInstance = function(it, Constructor, name, forbiddenField){\n  if(!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)){\n    throw TypeError(name + ': incorrect invocation!');\n  } return it;\n};\n\nvar _forOf = createCommonjsModule(function (module) {\nvar BREAK       = {}\n  , RETURN      = {};\nvar exports = module.exports = function(iterable, entries, fn, that, ITERATOR){\n  var iterFn = ITERATOR ? function(){ return iterable; } : core_getIteratorMethod(iterable)\n    , f      = _ctx(fn, that, entries ? 2 : 1)\n    , index  = 0\n    , length, step, iterator, result;\n  if(typeof iterFn != 'function')throw TypeError(iterable + ' is not iterable!');\n  // fast case for arrays with default iterator\n  if(_isArrayIter(iterFn))for(length = _toLength(iterable.length); length > index; index++){\n    result = entries ? f(_anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);\n    if(result === BREAK || result === RETURN)return result;\n  } else for(iterator = iterFn.call(iterable); !(step = iterator.next()).done; ){\n    result = _iterCall(iterator, f, step.value, entries);\n    if(result === BREAK || result === RETURN)return result;\n  }\n};\nexports.BREAK  = BREAK;\nexports.RETURN = RETURN;\n});\n\n// 7.3.20 SpeciesConstructor(O, defaultConstructor)\nvar SPECIES   = _wks('species');\nvar _speciesConstructor = function(O, D){\n  var C = _anObject(O).constructor, S;\n  return C === undefined || (S = _anObject(C)[SPECIES]) == undefined ? D : _aFunction(S);\n};\n\n// fast apply, http://jsperf.lnkit.com/fast-apply/5\nvar _invoke = function(fn, args, that){\n  var un = that === undefined;\n  switch(args.length){\n    case 0: return un ? fn()\n                      : fn.call(that);\n    case 1: return un ? fn(args[0])\n                      : fn.call(that, args[0]);\n    case 2: return un ? fn(args[0], args[1])\n                      : fn.call(that, args[0], args[1]);\n    case 3: return un ? fn(args[0], args[1], args[2])\n                      : fn.call(that, args[0], args[1], args[2]);\n    case 4: return un ? fn(args[0], args[1], args[2], args[3])\n                      : fn.call(that, args[0], args[1], args[2], args[3]);\n  } return              fn.apply(that, args);\n};\n\nvar process$1            = _global.process;\nvar setTask            = _global.setImmediate;\nvar clearTask          = _global.clearImmediate;\nvar MessageChannel     = _global.MessageChannel;\nvar counter            = 0;\nvar queue              = {};\nvar ONREADYSTATECHANGE = 'onreadystatechange';\nvar defer;\nvar channel;\nvar port;\nvar run = function(){\n  var id = +this;\n  if(queue.hasOwnProperty(id)){\n    var fn = queue[id];\n    delete queue[id];\n    fn();\n  }\n};\nvar listener = function(event){\n  run.call(event.data);\n};\n// Node.js 0.9+ & IE10+ has setImmediate, otherwise:\nif(!setTask || !clearTask){\n  setTask = function setImmediate(fn){\n    var args = [], i = 1;\n    while(arguments.length > i)args.push(arguments[i++]);\n    queue[++counter] = function(){\n      _invoke(typeof fn == 'function' ? fn : Function(fn), args);\n    };\n    defer(counter);\n    return counter;\n  };\n  clearTask = function clearImmediate(id){\n    delete queue[id];\n  };\n  // Node.js 0.8-\n  if(_cof(process$1) == 'process'){\n    defer = function(id){\n      process$1.nextTick(_ctx(run, id, 1));\n    };\n  // Browsers with MessageChannel, includes WebWorkers\n  } else if(MessageChannel){\n    channel = new MessageChannel;\n    port    = channel.port2;\n    channel.port1.onmessage = listener;\n    defer = _ctx(port.postMessage, port, 1);\n  // Browsers with postMessage, skip WebWorkers\n  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'\n  } else if(_global.addEventListener && typeof postMessage == 'function' && !_global.importScripts){\n    defer = function(id){\n      _global.postMessage(id + '', '*');\n    };\n    _global.addEventListener('message', listener, false);\n  // IE8-\n  } else if(ONREADYSTATECHANGE in _domCreate('script')){\n    defer = function(id){\n      _html.appendChild(_domCreate('script'))[ONREADYSTATECHANGE] = function(){\n        _html.removeChild(this);\n        run.call(id);\n      };\n    };\n  // Rest old browsers\n  } else {\n    defer = function(id){\n      setTimeout(_ctx(run, id, 1), 0);\n    };\n  }\n}\nvar _task = {\n  set:   setTask,\n  clear: clearTask\n};\n\nvar macrotask = _task.set;\nvar Observer  = _global.MutationObserver || _global.WebKitMutationObserver;\nvar process$2   = _global.process;\nvar Promise   = _global.Promise;\nvar isNode$2    = _cof(process$2) == 'process';\n\nvar _microtask = function(){\n  var head, last, notify;\n\n  var flush = function(){\n    var parent, fn;\n    if(isNode$2 && (parent = process$2.domain))parent.exit();\n    while(head){\n      fn   = head.fn;\n      head = head.next;\n      try {\n        fn();\n      } catch(e){\n        if(head)notify();\n        else last = undefined;\n        throw e;\n      }\n    } last = undefined;\n    if(parent)parent.enter();\n  };\n\n  // Node.js\n  if(isNode$2){\n    notify = function(){\n      process$2.nextTick(flush);\n    };\n  // browsers with MutationObserver\n  } else if(Observer){\n    var toggle = true\n      , node   = document.createTextNode('');\n    new Observer(flush).observe(node, {characterData: true}); // eslint-disable-line no-new\n    notify = function(){\n      node.data = toggle = !toggle;\n    };\n  // environments with maybe non-completely correct, but existent Promise\n  } else if(Promise && Promise.resolve){\n    var promise = Promise.resolve();\n    notify = function(){\n      promise.then(flush);\n    };\n  // for other environments - macrotask based on:\n  // - setImmediate\n  // - MessageChannel\n  // - window.postMessag\n  // - onreadystatechange\n  // - setTimeout\n  } else {\n    notify = function(){\n      // strange IE + webpack dev server bug - use .call(global)\n      macrotask.call(_global, flush);\n    };\n  }\n\n  return function(fn){\n    var task = {fn: fn, next: undefined};\n    if(last)last.next = task;\n    if(!head){\n      head = task;\n      notify();\n    } last = task;\n  };\n};\n\nvar _redefineAll = function(target, src, safe){\n  for(var key in src){\n    if(safe && target[key])target[key] = src[key];\n    else _hide(target, key, src[key]);\n  } return target;\n};\n\nvar SPECIES$1     = _wks('species');\n\nvar _setSpecies = function(KEY){\n  var C = typeof _core[KEY] == 'function' ? _core[KEY] : _global[KEY];\n  if(_descriptors && C && !C[SPECIES$1])_objectDp.f(C, SPECIES$1, {\n    configurable: true,\n    get: function(){ return this; }\n  });\n};\n\nvar task               = _task.set;\nvar microtask          = _microtask();\nvar PROMISE            = 'Promise';\nvar TypeError$1          = _global.TypeError;\nvar process            = _global.process;\nvar $Promise           = _global[PROMISE];\nvar process            = _global.process;\nvar isNode$1             = _classof(process) == 'process';\nvar empty              = function(){ /* empty */ };\nvar Internal;\nvar GenericPromiseCapability;\nvar Wrapper;\n\nvar USE_NATIVE$1 = !!function(){\n  try {\n    // correct subclassing with @@species support\n    var promise     = $Promise.resolve(1)\n      , FakePromise = (promise.constructor = {})[_wks('species')] = function(exec){ exec(empty, empty); };\n    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test\n    return (isNode$1 || typeof PromiseRejectionEvent == 'function') && promise.then(empty) instanceof FakePromise;\n  } catch(e){ /* empty */ }\n}();\n\n// helpers\nvar sameConstructor = function(a, b){\n  // with library wrapper special case\n  return a === b || a === $Promise && b === Wrapper;\n};\nvar isThenable = function(it){\n  var then;\n  return _isObject(it) && typeof (then = it.then) == 'function' ? then : false;\n};\nvar newPromiseCapability = function(C){\n  return sameConstructor($Promise, C)\n    ? new PromiseCapability(C)\n    : new GenericPromiseCapability(C);\n};\nvar PromiseCapability = GenericPromiseCapability = function(C){\n  var resolve, reject;\n  this.promise = new C(function($$resolve, $$reject){\n    if(resolve !== undefined || reject !== undefined)throw TypeError$1('Bad Promise constructor');\n    resolve = $$resolve;\n    reject  = $$reject;\n  });\n  this.resolve = _aFunction(resolve);\n  this.reject  = _aFunction(reject);\n};\nvar perform = function(exec){\n  try {\n    exec();\n  } catch(e){\n    return {error: e};\n  }\n};\nvar notify = function(promise, isReject){\n  if(promise._n)return;\n  promise._n = true;\n  var chain = promise._c;\n  microtask(function(){\n    var value = promise._v\n      , ok    = promise._s == 1\n      , i     = 0;\n    var run = function(reaction){\n      var handler = ok ? reaction.ok : reaction.fail\n        , resolve = reaction.resolve\n        , reject  = reaction.reject\n        , domain  = reaction.domain\n        , result, then;\n      try {\n        if(handler){\n          if(!ok){\n            if(promise._h == 2)onHandleUnhandled(promise);\n            promise._h = 1;\n          }\n          if(handler === true)result = value;\n          else {\n            if(domain)domain.enter();\n            result = handler(value);\n            if(domain)domain.exit();\n          }\n          if(result === reaction.promise){\n            reject(TypeError$1('Promise-chain cycle'));\n          } else if(then = isThenable(result)){\n            then.call(result, resolve, reject);\n          } else resolve(result);\n        } else reject(value);\n      } catch(e){\n        reject(e);\n      }\n    };\n    while(chain.length > i)run(chain[i++]); // variable length - can't use forEach\n    promise._c = [];\n    promise._n = false;\n    if(isReject && !promise._h)onUnhandled(promise);\n  });\n};\nvar onUnhandled = function(promise){\n  task.call(_global, function(){\n    var value = promise._v\n      , abrupt, handler, console;\n    if(isUnhandled(promise)){\n      abrupt = perform(function(){\n        if(isNode$1){\n          process.emit('unhandledRejection', value, promise);\n        } else if(handler = _global.onunhandledrejection){\n          handler({promise: promise, reason: value});\n        } else if((console = _global.console) && console.error){\n          console.error('Unhandled promise rejection', value);\n        }\n      });\n      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should\n      promise._h = isNode$1 || isUnhandled(promise) ? 2 : 1;\n    } promise._a = undefined;\n    if(abrupt)throw abrupt.error;\n  });\n};\nvar isUnhandled = function(promise){\n  if(promise._h == 1)return false;\n  var chain = promise._a || promise._c\n    , i     = 0\n    , reaction;\n  while(chain.length > i){\n    reaction = chain[i++];\n    if(reaction.fail || !isUnhandled(reaction.promise))return false;\n  } return true;\n};\nvar onHandleUnhandled = function(promise){\n  task.call(_global, function(){\n    var handler;\n    if(isNode$1){\n      process.emit('rejectionHandled', promise);\n    } else if(handler = _global.onrejectionhandled){\n      handler({promise: promise, reason: promise._v});\n    }\n  });\n};\nvar $reject = function(value){\n  var promise = this;\n  if(promise._d)return;\n  promise._d = true;\n  promise = promise._w || promise; // unwrap\n  promise._v = value;\n  promise._s = 2;\n  if(!promise._a)promise._a = promise._c.slice();\n  notify(promise, true);\n};\nvar $resolve = function(value){\n  var promise = this\n    , then;\n  if(promise._d)return;\n  promise._d = true;\n  promise = promise._w || promise; // unwrap\n  try {\n    if(promise === value)throw TypeError$1(\"Promise can't be resolved itself\");\n    if(then = isThenable(value)){\n      microtask(function(){\n        var wrapper = {_w: promise, _d: false}; // wrap\n        try {\n          then.call(value, _ctx($resolve, wrapper, 1), _ctx($reject, wrapper, 1));\n        } catch(e){\n          $reject.call(wrapper, e);\n        }\n      });\n    } else {\n      promise._v = value;\n      promise._s = 1;\n      notify(promise, false);\n    }\n  } catch(e){\n    $reject.call({_w: promise, _d: false}, e); // wrap\n  }\n};\n\n// constructor polyfill\nif(!USE_NATIVE$1){\n  // 25.4.3.1 Promise(executor)\n  $Promise = function Promise(executor){\n    _anInstance(this, $Promise, PROMISE, '_h');\n    _aFunction(executor);\n    Internal.call(this);\n    try {\n      executor(_ctx($resolve, this, 1), _ctx($reject, this, 1));\n    } catch(err){\n      $reject.call(this, err);\n    }\n  };\n  Internal = function Promise(executor){\n    this._c = [];             // <- awaiting reactions\n    this._a = undefined;      // <- checked in isUnhandled reactions\n    this._s = 0;              // <- state\n    this._d = false;          // <- done\n    this._v = undefined;      // <- value\n    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled\n    this._n = false;          // <- notify\n  };\n  Internal.prototype = _redefineAll($Promise.prototype, {\n    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)\n    then: function then(onFulfilled, onRejected){\n      var reaction    = newPromiseCapability(_speciesConstructor(this, $Promise));\n      reaction.ok     = typeof onFulfilled == 'function' ? onFulfilled : true;\n      reaction.fail   = typeof onRejected == 'function' && onRejected;\n      reaction.domain = isNode$1 ? process.domain : undefined;\n      this._c.push(reaction);\n      if(this._a)this._a.push(reaction);\n      if(this._s)notify(this, false);\n      return reaction.promise;\n    },\n    // 25.4.5.1 Promise.prototype.catch(onRejected)\n    'catch': function(onRejected){\n      return this.then(undefined, onRejected);\n    }\n  });\n  PromiseCapability = function(){\n    var promise  = new Internal;\n    this.promise = promise;\n    this.resolve = _ctx($resolve, promise, 1);\n    this.reject  = _ctx($reject, promise, 1);\n  };\n}\n\n_export(_export.G + _export.W + _export.F * !USE_NATIVE$1, {Promise: $Promise});\n_setToStringTag($Promise, PROMISE);\n_setSpecies(PROMISE);\nWrapper = _core[PROMISE];\n\n// statics\n_export(_export.S + _export.F * !USE_NATIVE$1, PROMISE, {\n  // 25.4.4.5 Promise.reject(r)\n  reject: function reject(r){\n    var capability = newPromiseCapability(this)\n      , $$reject   = capability.reject;\n    $$reject(r);\n    return capability.promise;\n  }\n});\n_export(_export.S + _export.F * (_library || !USE_NATIVE$1), PROMISE, {\n  // 25.4.4.6 Promise.resolve(x)\n  resolve: function resolve(x){\n    // instanceof instead of internal slot check because we should fix it without replacement native Promise core\n    if(x instanceof $Promise && sameConstructor(x.constructor, this))return x;\n    var capability = newPromiseCapability(this)\n      , $$resolve  = capability.resolve;\n    $$resolve(x);\n    return capability.promise;\n  }\n});\n_export(_export.S + _export.F * !(USE_NATIVE$1 && _iterDetect(function(iter){\n  $Promise.all(iter)['catch'](empty);\n})), PROMISE, {\n  // 25.4.4.1 Promise.all(iterable)\n  all: function all(iterable){\n    var C          = this\n      , capability = newPromiseCapability(C)\n      , resolve    = capability.resolve\n      , reject     = capability.reject;\n    var abrupt = perform(function(){\n      var values    = []\n        , index     = 0\n        , remaining = 1;\n      _forOf(iterable, false, function(promise){\n        var $index        = index++\n          , alreadyCalled = false;\n        values.push(undefined);\n        remaining++;\n        C.resolve(promise).then(function(value){\n          if(alreadyCalled)return;\n          alreadyCalled  = true;\n          values[$index] = value;\n          --remaining || resolve(values);\n        }, reject);\n      });\n      --remaining || resolve(values);\n    });\n    if(abrupt)reject(abrupt.error);\n    return capability.promise;\n  },\n  // 25.4.4.4 Promise.race(iterable)\n  race: function race(iterable){\n    var C          = this\n      , capability = newPromiseCapability(C)\n      , reject     = capability.reject;\n    var abrupt = perform(function(){\n      _forOf(iterable, false, function(promise){\n        C.resolve(promise).then(capability.resolve, reject);\n      });\n    });\n    if(abrupt)reject(abrupt.error);\n    return capability.promise;\n  }\n});\n\nvar promise$1 = _core.Promise;\n\nvar promise = createCommonjsModule(function (module) {\nmodule.exports = { \"default\": promise$1, __esModule: true };\n});\n\nvar _Promise = unwrapExports(promise);\n\n/**\n * chimee-helper-utils v0.1.2\n * (c) 2017 toxic-johann\n * Released under MIT\n */\n\n// **********************  judgement   ************************\n/**\n * check if the code running in browser environment (not include worker env)\n * @returns {Boolean}\n */\nvar inBrowser = typeof window !== 'undefined' && Object.prototype.toString.call(window) !== '[object Object]';\n\n// **********************  对象操作  ************************\n/**\n * 转变一个类数组对象为数组\n */\nfunction makeArray(obj) {\n  return _Array$from(obj);\n}\n\n/**\n * sort Object attributes by function\n * and transfer them into array\n * @param  {Object} obj Object form from numric\n * @param  {Function} fn sort function\n * @return {Array} the sorted attirbutes array\n */\nfunction transObjectAttrIntoArray(obj) {\n  var fn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function (a, b) {\n    return +a - +b;\n  };\n\n  return _Object$keys(obj).sort(fn).reduce(function (order, key) {\n    return order.concat(obj[key]);\n  }, []);\n}\n// ********************** class operation ***************************\n// class MixinBuilder {\n//   constructor (superclass) {\n//     this.superclass = superclass || class {};\n//   }\n\n//   with (...mixins) {\n//     return mixins.reduce((c, mixin) => mixin(c), this.superclass);\n//   }\n// }\n// export const mix = (superclass) => {\n//   return new MixinBuilder(superclass);\n// };\n/**\n * run a queue one by one.If include function reject or return false it will stop\n * @param  {Array} queue the queue which we want to run one by one\n * @return {Promise}    tell us whether a queue run finished\n */\nfunction runRejectableQueue(queue) {\n  for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    args[_key - 1] = arguments[_key];\n  }\n\n  return new _Promise(function (resolve, reject) {\n    var step = function step(index) {\n      if (index >= queue.length) {\n        resolve();\n        return;\n      }\n      var result = isFunction(queue[index]) ? queue[index].apply(queue, _toConsumableArray(args)) : queue[index];\n      if (result === false) return reject('stop');\n      return _Promise.resolve(result).then(function () {\n        return step(index + 1);\n      }).catch(function () {\n        return reject('stop');\n      });\n    };\n    step(0);\n  });\n}\n/**\n * run a queue one by one.If include function return false it will stop\n * @param  {Array} queue the queue which we want to run one by one\n * @return {boolean} tell the user if the queue run finished\n */\nfunction runStoppableQueue(queue) {\n  for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n    args[_key2 - 1] = arguments[_key2];\n  }\n\n  var step = function step(index) {\n    if (index >= queue.length) {\n      return true;\n    }\n    var result = isFunction(queue[index]) ? queue[index].apply(queue, _toConsumableArray(args)) : queue[index];\n    if (result === false) return false;\n    return step(++index);\n  };\n  return step(0);\n}\n/**\n * set an attribute to an object which is frozen.\n * Means you can't remove it, iterate it or rewrite it.\n * @param {!primitive} obj\n * @param {string} key\n * @param {Anything} value\n */\nfunction setFrozenAttr(obj, key, value) {\n  if (isPrimitive(obj)) throw TypeError('setFrozenAttr obj parameter can not be primitive type');\n  if (!isString(key)) throw TypeError('setFrozenAttr key parameter must be String');\n  _Object$defineProperty(obj, key, {\n    value: value,\n    configurable: false,\n    enumerable: false,\n    writable: false\n  });\n}\n/**\n * set attr on an Object. We will bind getter and setter on it if you provide to us\n * @param {!primitive} obj\n * @param {string} key\n * @param {Function} options.get\n * @param {Function} options.set\n * @param {String} prefix the origin data's prefix. We do not plan to save it by closure.\n */\nfunction setAttrGetterAndSetter(obj, key) {\n  var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n      get = _ref.get,\n      set = _ref.set;\n\n  var prefix = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '__';\n\n  if (isPrimitive(obj)) throw TypeError('setFrozenAttr obj parameter can not be primitive type');\n  if (!isString(key)) throw TypeError('setAttrGetterAndSetter key parameter must be String');\n  var originalData = obj[key];\n  if (!isFunction(get)) {\n    _Object$defineProperty(obj, prefix + key, {\n      value: originalData,\n      configurable: true,\n      writable: true,\n      enumerable: false\n    });\n    get = function get() {\n      return this[prefix + key];\n    };\n    if (set && isFunction(set)) {\n      var originSetter = set;\n      set = function set() {\n        for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n          args[_key3] = arguments[_key3];\n        }\n\n        this[prefix + key] = originSetter.call.apply(originSetter, [this].concat(args));\n      };\n    }\n  }\n  _Object$defineProperty(obj, key, { get: get, set: set });\n}\n\nfunction checkContinuation(uint8array, start, checkLength) {\n  var array = uint8array;\n  if (start + checkLength < array.length) {\n    while (checkLength--) {\n      if ((array[++start] & 0xC0) !== 0x80) {\n        return false;\n      }\n    }\n    return true;\n  } else {\n    return false;\n  }\n}\n\n// decodeUTF8\nfunction decodeUTF8(uint8array) {\n  var out = [];\n  var input = uint8array;\n  var i = 0;\n  var length = uint8array.length;\n\n  while (i < length) {\n    if (input[i] < 0x80) {\n      out.push(String.fromCharCode(input[i]));\n      ++i;\n      continue;\n    } else if (input[i] < 0xC0) {\n      // fallthrough\n    } else if (input[i] < 0xE0) {\n      if (checkContinuation(input, i, 1)) {\n        var ucs4 = (input[i] & 0x1F) << 6 | input[i + 1] & 0x3F;\n        if (ucs4 >= 0x80) {\n          out.push(String.fromCharCode(ucs4 & 0xFFFF));\n          i += 2;\n          continue;\n        }\n      }\n    } else if (input[i] < 0xF0) {\n      if (checkContinuation(input, i, 2)) {\n        var _ucs = (input[i] & 0xF) << 12 | (input[i + 1] & 0x3F) << 6 | input[i + 2] & 0x3F;\n        if (_ucs >= 0x800 && (_ucs & 0xF800) !== 0xD800) {\n          out.push(String.fromCharCode(_ucs & 0xFFFF));\n          i += 3;\n          continue;\n        }\n      }\n    } else if (input[i] < 0xF8) {\n      if (checkContinuation(input, i, 3)) {\n        var _ucs2 = (input[i] & 0x7) << 18 | (input[i + 1] & 0x3F) << 12 | (input[i + 2] & 0x3F) << 6 | input[i + 3] & 0x3F;\n        if (_ucs2 > 0x10000 && _ucs2 < 0x110000) {\n          _ucs2 -= 0x10000;\n          out.push(String.fromCharCode(_ucs2 >>> 10 | 0xD800));\n          out.push(String.fromCharCode(_ucs2 & 0x3FF | 0xDC00));\n          i += 4;\n          continue;\n        }\n      }\n    }\n    out.push(String.fromCharCode(0xFFFD));\n    ++i;\n  }\n  return out.join('');\n}\n\nfunction debounce(func, wait, immediate) {\n  // immediate默认为false\n  var timeout = void 0,\n      args = void 0,\n      context = void 0,\n      timestamp = void 0,\n      result = void 0;\n\n  var later = function later() {\n    // 当wait指定的时间间隔期间多次调用_.debounce返回的函数，则会不断更新timestamp的值，导致last < wait && last >= 0一直为true，从而不断启动新的计时器延时执行func\n    var last = new Date() - timestamp;\n\n    if (last < wait && last >= 0) {\n      timeout = setTimeout(later, wait - last);\n    } else {\n      timeout = null;\n      if (!immediate) {\n        result = func.apply(context, args);\n        if (!timeout) context = args = null;\n      }\n    }\n  };\n\n  return function () {\n    context = this;\n    args = arguments;\n    timestamp = new Date();\n    // 第一次调用该方法时，且immediate为true，则调用func函数\n    var callNow = immediate && !timeout;\n    // 在wait指定的时间间隔内首次调用该方法，则启动计时器定时调用func函数\n    if (!timeout) timeout = setTimeout(later, wait);\n    if (callNow) {\n      result = func.apply(context, args);\n      context = args = null;\n    }\n\n    return result;\n  };\n}\n\n/**\n * 函数节流（控制函数执行频率）\n * @param  {Function} func 要节流控制的函数，必填\n * @return {Number}   wait 等待时长\n * @return {Object}   options {\n *                      leading<是否首次调用立即执行，否：则按wait设定等待到期后调用才执行>:false,\n *                      trailing<是否在调用并未到期时启用定时器，以保证一定执行>:true\n *                    }\n * @return {Object}   cxt 上下文对象\n * @return {Function}\n */\nfunction throttle(func, wait, options, cxt) {\n  /* options的默认值\n   *  表示首次调用返回值方法时，会马上调用func；否则仅会记录当前时刻，当第二次调用的时间间隔超过wait时，才调用func。\n   *  options.leading = true;\n   * 表示当调用方法时，未到达wait指定的时间间隔，则启动计时器延迟调用func函数，若后续在既未达到wait指定的时间间隔和func函数又未被调用的情况下调用返回值方法，则被调用请求将被丢弃。\n   *  options.trailing = true;\n   * 注意：当options.trailing = false时，效果与上面的简单实现效果相同\n   */\n  var context = void 0,\n      args = void 0,\n      result = void 0;\n  var timeout = null;\n  var previous = 0;\n  if (!options) options = {};\n  var later = function later() {\n    previous = options.leading === false ? 0 : new Date() - 0;\n    timeout = null;\n    result = func.apply(context, args);\n    if (!timeout) context = args = null;\n  };\n  wait = wait || 0;\n  return function () {\n    var now = new Date();\n    if (!previous && options.leading === false) previous = now;\n    // 计算剩余时间\n    var remaining = wait - (now - previous);\n    if (cxt) {\n      context = cxt;\n    } else {\n      context = this;\n    }\n\n    args = arguments;\n    // 当到达wait指定的时间间隔，则调用func函数\n    // 精彩之处：按理来说remaining <= 0已经足够证明已经到达wait的时间间隔，但这里还考虑到假如客户端修改了系统时间则马上执行func函数。\n    if (remaining <= 0 || remaining > wait) {\n      // 由于setTimeout存在最小时间精度问题，因此会存在到达wait的时间间隔，但之前设置的setTimeout操作还没被执行，因此为保险起见，这里先清理setTimeout操作\n      if (timeout) {\n        clearTimeout(timeout);\n        timeout = null;\n      }\n      previous = now;\n      result = func.apply(context, args);\n      if (!timeout) context = args = null;\n    } else if (!timeout && options.trailing !== false) {\n      // options.trailing=true时，延时执行func函数\n      timeout = setTimeout(later, remaining);\n    }\n    return result;\n  };\n}\n\n// requestAnimationFrame\nvar raf = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame || window.oRequestAnimationFrame || function (cb) {\n  return setTimeout(cb, 17);\n};\n\n// cancelAnimationFrame\nvar caf = window.cancelAnimationFrame || window.mozCancelAnimationFrame || window.webkitCancelAnimationFrame || window.webkitCancelRequestAnimationFrame || window.msCancelAnimationFrame || window.oCancelAnimationFrame || function (id) {\n  clearTimeout(id);\n};\n\n// 根据要求的位数，将9格式化为 09\\009\\0009...\nfunction strRepeat(num, bit) {\n  var pBit = bit;\n  num = '' + (num || '');\n  var numLen = num.length;\n  bit = (bit || numLen) - numLen;\n  var paddingStr = bit > 0 ? num.repeat ? '0'.repeat(bit) : new Array(bit + 1).join('0') : '';\n  return (paddingStr + num).slice(0, pBit);\n}\n\n// video 时间格式化\nfunction formatTime(time) {\n  var hh = Math.floor(time / 3600);\n  time = Math.floor(time % 3600);\n  var mm = strRepeat(Math.floor(time / 60), 2);\n  time = Math.floor(time % 60);\n  var ss = strRepeat(time, 2);\n  return hh >= 1 ? hh + ':' + mm + ':' + ss : mm + ':' + ss;\n}\n\n/**\n * 给obj对象扩展上trans方法，用以实现methodName对应的属性方法包装为静态函数且保持上下文的功能\n * @param  {Object} obj 目标对象\n */\nfunction addTransMethod(obj) {\n  setFrozenAttr(obj, 'trans', function (methodName) {\n    if (!obj.__fns) {\n      setFrozenAttr(obj, '__fns', {});\n    }\n    if (!obj.__fns[methodName]) {\n      obj.__fns[methodName] = function () {\n        if (!isFunction(obj[methodName])) throw TypeError('obj.trans(methodName) parameter must be Function');\n        return obj[methodName].apply(obj, arguments);\n      };\n    }\n    return obj.__fns[methodName];\n  });\n}\n\n/**\n * 追加样式代码到head的style标签，不存在则创建\n * @param {String} cssText 样式文本\n * @return {HTMLElement}\n */\nfunction appendCSS(cssText) {\n  var doc = document;\n  var styleEl = doc.querySelector('style');\n  if (!styleEl) {\n    styleEl = doc.createElement('style');\n    var header = doc.querySelector('head');\n    header && header.appendChild(styleEl);\n  }\n  styleEl.appendChild(doc.createTextNode(cssText));\n  return styleEl;\n}\n\n/**\n * 格式化日期对象为：年-月-日 时:分:秒.毫秒\n * @param {Date} date Date日期对象\n * @param {String} pattern 要输出的日期格式，默认：`yyyy-MM-dd hh:mm:ss.i`\n * @return {String}\n */\nfunction formatDate() {\n  var date = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Date();\n  var pattern = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'yyyy-MM-dd hh:mm:ss.i';\n\n  var year = date.getFullYear().toString();\n  var fields = {\n    M: date.getMonth() + 1,\n    d: date.getDate(),\n    h: date.getHours(),\n    m: date.getMinutes(),\n    s: date.getSeconds(),\n    i: date.getMilliseconds()\n  };\n  pattern = pattern.replace(/(y+)/ig, function (_, yearPattern) {\n    return year.substr(4 - Math.min(4, yearPattern.length));\n  });\n\n  var _loop = function _loop(i) {\n    pattern = pattern.replace(new RegExp('(' + i + '+)', 'g'), function (_, pattStr) {\n      return (fields[i] < 10 && pattStr.length > 1 ? '0' : '') + fields[i];\n    });\n  };\n\n  for (var i in fields) {\n    _loop(i);\n  }\n  return pattern;\n}\n\n/**\n * 读取本地存储的值（不支持localStorage则降级到cookie）\n * @param {String} key 目标数据key\n * @return {String}\n */\nfunction getLocalStorage(key) {\n  try {\n    return window.localStorage.getItem(key);\n  } catch (e) {\n    try {\n      var regRt = document.cookie.match(new RegExp('(^| )' + key + '=([^;]*)(;|$)'));\n      return isArray(regRt) ? unescape(regRt[2]) : '';\n    } catch (e) {\n      return '';\n    }\n  }\n}\n/**\n * 将指定key对应值写入本地存储（不支持localStorage则降级到cookie）\n * @param {String} key\n * @param {String} val\n * @return {String}\n */\nfunction setLocalStorage(key, val) {\n  try {\n    window.localStorage.setItem(key, val);\n  } catch (e) {\n    var expires = new Date();\n    // 默认存储300天\n    expires.setTime(expires.getTime() + 24 * 3600 * 1000 * 300);\n    try {\n      document.cookie = key + '=' + escape(val) + ';expires=' + expires.toUTCString() + ';path=/;';\n    } catch (e) {}\n  }\n}\n\nvar classCallCheck = createCommonjsModule(function (module, exports) {\n\"use strict\";\n\nexports.__esModule = true;\n\nexports.default = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n});\n\nvar _classCallCheck = unwrapExports(classCallCheck);\n\nvar createClass = createCommonjsModule(function (module, exports) {\n\"use strict\";\n\nexports.__esModule = true;\n\n\n\nvar _defineProperty2 = _interopRequireDefault(defineProperty$1);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      (0, _defineProperty2.default)(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n});\n\nvar _createClass = unwrapExports(createClass);\n\n// 19.1.2.1 Object.assign(target, source, ...)\nvar $assign  = Object.assign;\n\n// should work with symbols and should have deterministic property order (V8 bug)\nvar _objectAssign = !$assign || _fails(function(){\n  var A = {}\n    , B = {}\n    , S = Symbol()\n    , K = 'abcdefghijklmnopqrst';\n  A[S] = 7;\n  K.split('').forEach(function(k){ B[k] = k; });\n  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;\n}) ? function assign(target, source){ // eslint-disable-line no-unused-vars\n  var T     = _toObject(target)\n    , aLen  = arguments.length\n    , index = 1\n    , getSymbols = _objectGops.f\n    , isEnum     = _objectPie.f;\n  while(aLen > index){\n    var S      = _iobject(arguments[index++])\n      , keys   = getSymbols ? _objectKeys(S).concat(getSymbols(S)) : _objectKeys(S)\n      , length = keys.length\n      , j      = 0\n      , key;\n    while(length > j)if(isEnum.call(S, key = keys[j++]))T[key] = S[key];\n  } return T;\n} : $assign;\n\n// 19.1.3.1 Object.assign(target, source)\n\n\n_export(_export.S + _export.F, 'Object', {assign: _objectAssign});\n\nvar assign$1 = _core.Object.assign;\n\nvar assign = createCommonjsModule(function (module) {\nmodule.exports = { \"default\": assign$1, __esModule: true };\n});\n\nvar _Object$assign = unwrapExports(assign);\n\n// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])\n_export(_export.S, 'Object', {create: _objectCreate});\n\nvar $Object$1 = _core.Object;\nvar create$1 = function create(P, D){\n  return $Object$1.create(P, D);\n};\n\nvar create = createCommonjsModule(function (module) {\nmodule.exports = { \"default\": create$1, __esModule: true };\n});\n\nvar _Object$create = unwrapExports(create);\n\n/**\n * chimee-helper-events v0.1.0\n * (c) 2017 toxic-johann\n * Released under MIT\n */\n\n/**\n* @module event\n* @author huzunjie\n* @description 自定义事件基础类\n*/\n\n/* 缓存事件监听方法及包装，内部数据格式：\n * targetIndex_<type:'click|mouseup|done'>: [ [\n *   function(){ ... handler ... },\n *   function(){ ... handlerWrap ... handler.apply(target, arguments) ... },\n *   isOnce\n * ]]\n */\nvar _evtListenerCache = _Object$create(null);\n_evtListenerCache.count = 0;\n\n/**\n * 得到某对象的某事件类型对应的监听队列数组\n * @param  {Object}  target 发生事件的对象\n * @param {String} type 事件类型(这里的时间类型不只是名称，还是缓存标识，可以通过添加后缀来区分)\n * @return {Array}\n */\nfunction getEvtTypeCache(target, type) {\n\n  var evtId = target.__evt_id;\n  if (!evtId) {\n\n    /* 设置__evt_id不可枚举 */\n    Object.defineProperty(target, '__evt_id', {\n      writable: true,\n      enumerable: false,\n      configurable: true\n    });\n\n    /* 空对象初始化绑定索引 */\n    evtId = target.__evt_id = ++_evtListenerCache.count;\n  }\n\n  var typeCacheKey = evtId + '_' + type;\n  var evtTypeCache = _evtListenerCache[typeCacheKey];\n  if (!evtTypeCache) {\n    evtTypeCache = _evtListenerCache[typeCacheKey] = [];\n  }\n\n  return evtTypeCache;\n}\n\n/**\n * 触发事件监听方法\n * @param  {Object}  target 发生事件的对象\n * @param {String} type 事件类型\n * @param {Object} eventObj 触发事件时要传回的event对象\n * @return {undefined}\n */\nfunction emitEventCache(target, type, eventObj) {\n  var evt = _Object$create(null);\n  evt.type = type;\n  evt.target = target;\n  if (eventObj) {\n    _Object$assign(evt, isObject$1(eventObj) ? eventObj : { data: eventObj });\n  }\n  getEvtTypeCache(target, type).forEach(function (item) {\n    (item[1] || item[0]).apply(target, [evt]);\n  });\n}\n\n/**\n * 添加事件监听到缓存\n * @param  {Object}  target 发生事件的对象\n * @param {String} type 事件类型\n * @param {Function} handler 监听函数\n * @param {Boolean} isOnce 是否单次执行\n * @param {Function} handlerWrap\n * @return {undefined}\n */\nfunction addEventCache(target, type, handler) {\n  var isOnce = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  var handlerWrap = arguments[4];\n\n  if (isFunction(isOnce) && !handlerWrap) {\n    handlerWrap = isOnce;\n    isOnce = undefined;\n  }\n  var handlers = [handler, undefined, isOnce];\n  if (isOnce && !handlerWrap) {\n    handlerWrap = function handlerWrap() {\n      removeEventCache(target, type, handler, isOnce);\n\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      handler.apply(target, args);\n    };\n  }\n  if (handlerWrap) {\n    handlers[1] = handlerWrap;\n  }\n  getEvtTypeCache(target, type).push(handlers);\n}\n\n/**\n * 移除事件监听\n * @param  {Object}  target 发生事件的对象\n * @param {String} type 事件类型\n * @param {Function} handler 监听函数\n * @return {undefined}\n */\nfunction removeEventCache(target, type, handler) {\n  var isOnce = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n\n  var typeCache = getEvtTypeCache(target, type);\n\n  if (handler || isOnce) {\n    /* 有指定 handler 则清除对应监听 */\n    var handlerId = -1;\n    var handlerWrap = void 0;\n    typeCache.find(function (item, i) {\n      if ((!handler || item[0] === handler) && (!isOnce || item[2])) {\n        handlerId = i;\n        handlerWrap = item[1];\n        return true;\n      }\n    });\n    if (handlerId !== -1) {\n      typeCache.splice(handlerId, 1);\n    }\n    return handlerWrap;\n  } else {\n    /* 未指定 handler 则清除type对应的所有监听 */\n    typeCache.length = 0;\n  }\n}\n\n/**\n * @class CustEvent\n * @description\n * Event 自定义事件类\n * 1. 可以使用不传参得到的实例作为eventBus使用\n * 2. 可以通过指定target，用多个实例操作同一target对象的事件管理\n * 3. 当设定target时，可以通过设置assign为true，来给target实现\"on\\once\\off\\emit\"方法\n * @param  {Object}  target 发生事件的对象（空则默认为event实例）\n * @param  {Boolean}  assign 是否将\"on\\once\\off\\emit\"方法实现到target对象上\n * @return {event}\n */\nvar CustEvent = function () {\n  function CustEvent(target, assign$$1) {\n    var _this = this;\n\n    _classCallCheck(this, CustEvent);\n\n    /* 设置__target不可枚举 */\n    Object.defineProperty(this, '__target', {\n      writable: true,\n      enumerable: false,\n      configurable: true\n    });\n    this.__target = this;\n\n    if (target) {\n\n      if ((typeof target === 'undefined' ? 'undefined' : _typeof(target)) !== 'object') {\n        throw new Error('CusEvent target are not object');\n      }\n      this.__target = target;\n\n      /* 为target实现on\\once\\off\\emit */\n      if (assign$$1) {\n        ['on', 'once', 'off', 'emit'].forEach(function (mth) {\n          target[mth] = _this[mth];\n        });\n      }\n    }\n  }\n\n  /**\n   * 添加事件监听\n   * @param {String} type 事件类型\n   * @param {Function} handler 监听函数\n   * @param {Boolean} isOnce 单次监听类型\n   * @return {event}\n   */\n\n\n  _createClass(CustEvent, [{\n    key: 'on',\n    value: function on(type, handler) {\n      var isOnce = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n      addEventCache(this.__target, type, handler, isOnce);\n      return this;\n    }\n\n    /**\n     * 添加事件监听,并且只执行一次\n     * @param {String} type 事件类型\n     * @param {Function} handler 监听函数\n     * @return {event}\n     */\n\n  }, {\n    key: 'once',\n    value: function once(type, handler) {\n      return this.on(type, handler, true);\n    }\n\n    /**\n     * 移除事件监听\n     * @param {String} type 事件类型\n     * @param {Function} handler 监听函数(不指定handler则清除type对应的所有事件监听)\n     * @param {Boolean} isOnce 单次监听类型\n     * @return {event}\n     */\n\n  }, {\n    key: 'off',\n    value: function off(type, handler) {\n      var isOnce = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n      removeEventCache(this.__target, type, handler, isOnce);\n      return this;\n    }\n\n    /**\n     * 触发事件监听函数\n     * @param {String} type 事件类型\n     * @return {event}\n     */\n\n  }, {\n    key: 'emit',\n    value: function emit(type, data) {\n      emitEventCache(this.__target, type, { data: data });\n      return this;\n    }\n  }]);\n\n  return CustEvent;\n}();\n\n/**\n * chimee-helper-dom v0.1.0\n * (c) 2017 toxic-johann\n * Released under MIT\n */\n\n/**\n * chimee-helper-events v0.1.0\n * (c) 2017 toxic-johann\n * Released under MIT\n */\n\n/**\n* @module event\n* @author huzunjie\n* @description 自定义事件基础类\n*/\n\n/* 缓存事件监听方法及包装，内部数据格式：\n * targetIndex_<type:'click|mouseup|done'>: [ [\n *   function(){ ... handler ... },\n *   function(){ ... handlerWrap ... handler.apply(target, arguments) ... },\n *   isOnce\n * ]]\n */\nvar _evtListenerCache$1 = _Object$create(null);\n_evtListenerCache$1.count = 0;\n\n/**\n * 得到某对象的某事件类型对应的监听队列数组\n * @param  {Object}  target 发生事件的对象\n * @param {String} type 事件类型(这里的时间类型不只是名称，还是缓存标识，可以通过添加后缀来区分)\n * @return {Array}\n */\nfunction getEvtTypeCache$1(target, type) {\n\n  var evtId = target.__evt_id;\n  if (!evtId) {\n\n    /* 设置__evt_id不可枚举 */\n    Object.defineProperty(target, '__evt_id', {\n      writable: true,\n      enumerable: false,\n      configurable: true\n    });\n\n    /* 空对象初始化绑定索引 */\n    evtId = target.__evt_id = ++_evtListenerCache$1.count;\n  }\n\n  var typeCacheKey = evtId + '_' + type;\n  var evtTypeCache = _evtListenerCache$1[typeCacheKey];\n  if (!evtTypeCache) {\n    evtTypeCache = _evtListenerCache$1[typeCacheKey] = [];\n  }\n\n  return evtTypeCache;\n}\n\n/**\n * 触发事件监听方法\n * @param  {Object}  target 发生事件的对象\n * @param {String} type 事件类型\n * @param {Object} eventObj 触发事件时要传回的event对象\n * @return {undefined}\n */\nfunction emitEventCache$1(target, type, eventObj) {\n  var evt = _Object$create(null);\n  evt.type = type;\n  evt.target = target;\n  if (eventObj) {\n    _Object$assign(evt, isObject$1(eventObj) ? eventObj : { data: eventObj });\n  }\n  getEvtTypeCache$1(target, type).forEach(function (item) {\n    (item[1] || item[0]).apply(target, [evt]);\n  });\n}\n\n/**\n * 添加事件监听到缓存\n * @param  {Object}  target 发生事件的对象\n * @param {String} type 事件类型\n * @param {Function} handler 监听函数\n * @param {Boolean} isOnce 是否单次执行\n * @param {Function} handlerWrap\n * @return {undefined}\n */\nfunction addEventCache$1(target, type, handler) {\n  var isOnce = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  var handlerWrap = arguments[4];\n\n  if (isFunction(isOnce) && !handlerWrap) {\n    handlerWrap = isOnce;\n    isOnce = undefined;\n  }\n  var handlers = [handler, undefined, isOnce];\n  if (isOnce && !handlerWrap) {\n    handlerWrap = function handlerWrap() {\n      removeEventCache$1(target, type, handler, isOnce);\n\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      handler.apply(target, args);\n    };\n  }\n  if (handlerWrap) {\n    handlers[1] = handlerWrap;\n  }\n  getEvtTypeCache$1(target, type).push(handlers);\n}\n\n/**\n * 移除事件监听\n * @param  {Object}  target 发生事件的对象\n * @param {String} type 事件类型\n * @param {Function} handler 监听函数\n * @return {undefined}\n */\nfunction removeEventCache$1(target, type, handler) {\n  var isOnce = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n\n  var typeCache = getEvtTypeCache$1(target, type);\n\n  if (handler || isOnce) {\n    /* 有指定 handler 则清除对应监听 */\n    var handlerId = -1;\n    var handlerWrap = void 0;\n    typeCache.find(function (item, i) {\n      if ((!handler || item[0] === handler) && (!isOnce || item[2])) {\n        handlerId = i;\n        handlerWrap = item[1];\n        return true;\n      }\n    });\n    if (handlerId !== -1) {\n      typeCache.splice(handlerId, 1);\n    }\n    return handlerWrap;\n  } else {\n    /* 未指定 handler 则清除type对应的所有监听 */\n    typeCache.length = 0;\n  }\n}\n\n/**\n * @class CustEvent\n * @description\n * Event 自定义事件类\n * 1. 可以使用不传参得到的实例作为eventBus使用\n * 2. 可以通过指定target，用多个实例操作同一target对象的事件管理\n * 3. 当设定target时，可以通过设置assign为true，来给target实现\"on\\once\\off\\emit\"方法\n * @param  {Object}  target 发生事件的对象（空则默认为event实例）\n * @param  {Boolean}  assign 是否将\"on\\once\\off\\emit\"方法实现到target对象上\n * @return {event}\n */\nvar CustEvent$1 = function () {\n  function CustEvent(target, assign$$1) {\n    var _this = this;\n\n    _classCallCheck(this, CustEvent);\n\n    /* 设置__target不可枚举 */\n    Object.defineProperty(this, '__target', {\n      writable: true,\n      enumerable: false,\n      configurable: true\n    });\n    this.__target = this;\n\n    if (target) {\n\n      if ((typeof target === 'undefined' ? 'undefined' : _typeof(target)) !== 'object') {\n        throw new Error('CusEvent target are not object');\n      }\n      this.__target = target;\n\n      /* 为target实现on\\once\\off\\emit */\n      if (assign$$1) {\n        ['on', 'once', 'off', 'emit'].forEach(function (mth) {\n          target[mth] = _this[mth];\n        });\n      }\n    }\n  }\n\n  /**\n   * 添加事件监听\n   * @param {String} type 事件类型\n   * @param {Function} handler 监听函数\n   * @param {Boolean} isOnce 单次监听类型\n   * @return {event}\n   */\n\n\n  _createClass(CustEvent, [{\n    key: 'on',\n    value: function on(type, handler) {\n      var isOnce = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n      addEventCache$1(this.__target, type, handler, isOnce);\n      return this;\n    }\n\n    /**\n     * 添加事件监听,并且只执行一次\n     * @param {String} type 事件类型\n     * @param {Function} handler 监听函数\n     * @return {event}\n     */\n\n  }, {\n    key: 'once',\n    value: function once(type, handler) {\n      return this.on(type, handler, true);\n    }\n\n    /**\n     * 移除事件监听\n     * @param {String} type 事件类型\n     * @param {Function} handler 监听函数(不指定handler则清除type对应的所有事件监听)\n     * @param {Boolean} isOnce 单次监听类型\n     * @return {event}\n     */\n\n  }, {\n    key: 'off',\n    value: function off(type, handler) {\n      var isOnce = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n      removeEventCache$1(this.__target, type, handler, isOnce);\n      return this;\n    }\n\n    /**\n     * 触发事件监听函数\n     * @param {String} type 事件类型\n     * @return {event}\n     */\n\n  }, {\n    key: 'emit',\n    value: function emit(type, data) {\n      emitEventCache$1(this.__target, type, { data: data });\n      return this;\n    }\n  }]);\n\n  return CustEvent;\n}();\n\n/**\n * chimee-helper-utils v0.1.1\n * (c) 2017 toxic-johann\n * Released under MIT\n */\n\n// **********************  judgement   ************************\n/**\n * check if the code running in browser environment (not include worker env)\n * @returns {Boolean}\n */\nvar inBrowser$1 = typeof window !== 'undefined' && Object.prototype.toString.call(window) !== '[object Object]';\n\n// **********************  对象操作  ************************\n/**\n * 转变一个类数组对象为数组\n */\nfunction makeArray$1(obj) {\n  return _Array$from(obj);\n}\n\n/**\n* @module dom\n* @author huzunjie\n* @description 一些常用的DOM判断及操作方法，可以使用dom.$('*')包装DOM，实现类jQuery的链式操作；当然这里的静态方法也可以直接使用。\n*/\n\nvar _divEl = document.createElement('div');\nvar _textAttrName = 'innerText';\n'textContent' in _divEl && (_textAttrName = 'textContent');\nvar _arrPrototype = Array.prototype;\n\n/**\n * 读取HTML元素属性值\n * @param {HTMLElement} el 目标元素\n * @param {String} attrName 目标属性名称\n * @return {String}\n */\nfunction getAttr(el, attrName) {\n  return el.getAttribute(attrName);\n}\n\n/**\n * 设置HTML元素属性值\n * @param {HTMLElement} el 目标元素\n * @param {String} attrName 目标属性名称\n * @param {String} attrVal 目标属性值\n */\nfunction setAttr(el, attrName, attrVal) {\n  if (attrVal === undefined) {\n    el.removeAttribute(attrName);\n  } else {\n    el.setAttribute(attrName, attrVal);\n  }\n}\n\n/**\n * 为HTML元素添加className\n * @param {HTMLElement} el 目标元素\n * @param {String} cls 要添加的className（多个以空格分割）\n */\nfunction addClassName(el, cls) {\n  if (!cls || !(cls = cls.trim())) {\n    return;\n  }\n  var clsArr = cls.split(/\\s+/);\n  if (el.classList) {\n    clsArr.forEach(function (c) {\n      return el.classList.add(c);\n    });\n  } else {\n    var curCls = ' ' + (el.className || '') + ' ';\n    clsArr.forEach(function (c) {\n      curCls.indexOf(' ' + c + ' ') === -1 && (curCls += ' ' + c);\n    });\n    el.className = curCls.trim();\n  }\n}\n\n/**\n * 为HTML元素移除className\n * @param {HTMLElement} el 目标元素\n * @param {String} cls 要移除的className（多个以空格分割）\n */\nfunction removeClassName(el, cls) {\n  if (!cls || !(cls = cls.trim())) {\n    return;\n  }\n\n  var clsArr = cls.split(/\\s+/);\n  if (el.classList) {\n    clsArr.forEach(function (c) {\n      return el.classList.remove(c);\n    });\n  } else {\n    var curCls = ' ' + el.className + ' ';\n    clsArr.forEach(function (c) {\n      var tar = ' ' + c + ' ';\n      while (curCls.indexOf(tar) !== -1) {\n        curCls = curCls.replace(tar, ' ');\n      }\n    });\n    el.className = curCls.trim();\n  }\n}\n\n/**\n * 检查HTML元素是否已设置className\n * @param {HTMLElement} el 目标元素\n * @param {String} className 要检查的className\n * @return {Boolean}\n */\nfunction hasClassName(el, className) {\n  return new RegExp('(?:^|\\\\s)' + className + '(?=\\\\s|$)').test(el.className);\n}\n\n/**\n * 为HTML元素移除事件监听\n * @param {HTMLElement} el 目标元素\n * @param {String} type 事件名称\n * @param {Function} handler 处理函数\n * @param {Boolean} once 是否只监听一次\n * @param {Boolean} capture 是否在捕获阶段的监听\n */\nfunction removeEvent(el, type, handler) {\n  var once = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  var capture = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n\n  if (once) {\n    /* 尝试从缓存中读取包装后的方法 */\n    var handlerWrap = removeEventCache$1(el, type + '_once', handler);\n    if (handlerWrap) {\n      handler = handlerWrap;\n    }\n  }\n  el.removeEventListener(type, handler, capture);\n}\n\n/**\n * 为HTML元素添加事件监听\n * @param {HTMLElement} el 目标元素\n * @param {String} type 事件名称\n * @param {Function} handler 处理函数\n * @param {Boolean} once 是否只监听一次\n * @param {Boolean} capture 是否在捕获阶段监听\n */\nfunction addEvent(el, type, handler) {\n  var once = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  var capture = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n\n  if (once) {\n    var oldHandler = handler;\n    handler = function () {\n      return function () {\n        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        oldHandler.apply(this, args);\n        removeEvent(el, type, handler, once, capture);\n      };\n    }();\n    /* 将包装后的方法记录到缓存中 */\n    addEventCache$1(el, type + '_once', oldHandler, handler);\n  }\n\n  el.addEventListener(type, handler, capture);\n}\n\n/**\n * 为HTML元素添加事件代理\n * @param {HTMLElement} el 目标元素\n * @param {String} selector 要被代理的元素\n * @param {String} type 事件名称\n * @param {Function} handler 处理函数\n * @param {Boolean} capture 是否在捕获阶段监听\n */\nfunction addDelegate(el, selector, type, handler) {\n  var capture = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n\n\n  var handlerWrap = function handlerWrap(e) {\n    var targetEls = findParents(e.srcElement, el, true);\n    var targetEl = query(selector, el, true).find(function (seEl) {\n      return targetEls.find(function (tgEl) {\n        return seEl === tgEl;\n      });\n    });\n    targetEl && handler.apply(targetEl, arguments);\n  };\n  /* 将包装后的方法记录到缓存中 */\n  addEventCache$1(el, type + '_delegate_' + selector, handler, handlerWrap);\n  el.addEventListener(type, handlerWrap, capture);\n}\n\n/**\n * 为HTML元素移除事件代理\n * @param {HTMLElement} el 目标元素\n * @param {String} selector 要被代理的元素\n * @param {String} type 事件名称\n * @param {Function} handler 处理函数\n * @param {Boolean} capture 是否在捕获阶段监听\n */\nfunction removeDelegate(el, selector, type, handler) {\n  var capture = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n\n  /* 尝试从缓存中读取包装后的方法 */\n  var handlerWrap = removeEventCache$1(el, type + '_delegate_' + selector, handler);\n  handlerWrap && el.removeEventListener(type, handlerWrap, capture);\n}\n\n/**\n * 读取HTML元素样式值\n * @param {HTMLElement} el 目标元素\n * @param {String} key 样式key\n * @return {String}\n */\nfunction getStyle(el, key) {\n  return (el.currentStyle || document.defaultView.getComputedStyle(el, null))[key] || el.style[key];\n}\n\n/**\n * 设置HTML元素样式值\n * @param {HTMLElement} el 目标元素\n * @param {String} key 样式key\n * @param {String} val 样式值\n */\nfunction setStyle(el, key, val) {\n  if (isObject$1(key)) {\n    for (var k in key) {\n      setStyle(el, k, key[k]);\n    }\n  } else {\n    el.style[key] = val;\n  }\n}\n\n/**\n * 根据选择器查询目标元素\n * @param {String} selector 选择器,用于 querySelectorAll\n * @param {HTMLElement} container 父容器\n * @param {Boolean} toArray 强制输出为数组\n * @return {NodeList|Array}\n */\nfunction query(selector) {\n  var container = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document;\n  var toArray = arguments[2];\n\n  var retNodeList = container.querySelectorAll(selector);\n  return toArray ? _Array$from(retNodeList) : retNodeList;\n}\n\n/**\n * 从DOM树中移除el\n * @param {HTMLElement} el 目标元素\n */\nfunction removeEl(el) {\n  el.parentNode.removeChild(el);\n}\n\n/**\n * 查找元素的父节点们\n * @param {HTMLElement} el 目标元素\n * @param {HTMLElement} endEl 最大父容器（不指定则找到html）\n * @param {Boolean} haveEl 包含当前元素\n * @param {Boolean} haveEndEl 包含设定的最大父容器\n */\nfunction findParents(el) {\n  var endEl = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  var haveEl = arguments[2];\n  var haveEndEl = arguments[3];\n\n  var retEls = [];\n  if (haveEl) {\n    retEls.push(el);\n  }\n  while (el && el.parentNode !== endEl) {\n    el = el.parentNode;\n    el && retEls.push(el);\n  }\n  if (haveEndEl) {\n    retEls.push(endEl);\n  }\n  return retEls;\n}\n\n/**\n * 根据选择器查询并得到目标元素的wrap包装器\n * @param {String} selector 选择器,另外支持 HTMLString||NodeList||NodeArray||HTMLElement\n * @param {HTMLElement} container 父容器\n * @return {Object}\n */\nfunction $(selector, container) {\n  return selector.constructor === NodeWrap ? selector : new NodeWrap(selector, container);\n}\n\n/**\n * @class NodeWrap\n * @description\n * NodeWrap DOM包装器，用以实现基本的链式操作\n * new dom.NodeWrap('*') 相当于 dom.$('*')\n * 这里面用于DOM操作的属性方法都是基于上面静态方法实现，有需要可以随时修改补充\n * @param {String} selector 选择器(兼容 String||HTMLString||NodeList||NodeArray||HTMLElement)\n * @param {HTMLElement} container 父容器（默认为document）\n */\n\nvar NodeWrap = function () {\n  function NodeWrap(selector) {\n    var container = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document;\n\n    _classCallCheck(this, NodeWrap);\n\n    var _this = this;\n    _this.selector = selector;\n\n    /* String||NodeList||HTMLElement 识别处理 */\n    var elsArr = void 0;\n    if (selector && selector.constructor === NodeList) {\n      /* 支持直接传入NodeList来构建包装器 */\n      elsArr = makeArray$1(selector);\n    } else if (isArray(selector)) {\n      /* 支持直接传入Node数组来构建包装器 */\n      elsArr = selector;\n    } else if (isString(selector)) {\n      if (selector.indexOf('<') === 0) {\n        /* 支持直接传入HTML字符串来新建DOM并构建包装器 */\n        _divEl.innerHTML = selector;\n        elsArr = query('*', _divEl, true);\n      } else {\n        /* 支持直接传入字符串选择器来查找DOM并构建包装器 */\n        elsArr = query(selector, container, true);\n      }\n    } else {\n      /* 其他任意对象直接构建包装器 */\n      elsArr = [selector];\n    }\n    _Object$assign(_this, elsArr);\n\n    /* NodeWrap本意可以 extends Array省略构造方法中下面这部分代码，但目前编译不支持 */\n    _this.length = elsArr.length;\n  }\n\n  /**\n   * 循环遍历DOM集合\n   * @param {Function} fn 遍历函数 fn(item, i)\n   * @return {Object}\n   */\n\n\n  _createClass(NodeWrap, [{\n    key: 'each',\n    value: function each() {\n      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      _arrPrototype.forEach.apply(this, args);\n      return this;\n    }\n  }, {\n    key: 'push',\n\n\n    /**\n     * 添加元素到DOM集合\n     * @param {HTMLElement} el 要加入的元素\n     * @return {this}\n     */\n    value: function push() {\n      for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        args[_key3] = arguments[_key3];\n      }\n\n      _arrPrototype.push.apply(this, args);\n      return this;\n    }\n  }, {\n    key: 'splice',\n\n\n    /**\n     * 截取DOM集合片段，并得到新的包装器splice\n     * @param {Nubmer} start\n     * @param {Nubmer} count\n     * @return {NodeWrap} 新的DOM集合包装器\n     */\n    value: function splice() {\n      for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n        args[_key4] = arguments[_key4];\n      }\n\n      return $(_arrPrototype.splice.apply(this, args));\n    }\n  }, {\n    key: 'find',\n\n\n    /**\n     * 查找子元素\n     * @param {String} selector 选择器\n     * @return {NodeWrap} 新的DOM集合包装器\n     */\n    value: function find(selector) {\n      var childs = [];\n      this.each(function (el) {\n        childs = childs.concat(query(selector, el, true));\n      });\n      var childsWrap = $(childs);\n      childsWrap.parent = this;\n      childsWrap.selector = selector;\n      return childsWrap;\n    }\n\n    /**\n     * 添加子元素\n     * @param {HTMLElement} childEls 要添加的HTML元素\n     * @return {this}\n     */\n\n  }, {\n    key: 'append',\n    value: function append(childEls) {\n      var childsWrap = $(childEls);\n      var firstEl = this[0];\n      childsWrap.each(function (newEl) {\n        return firstEl.appendChild(newEl);\n      });\n      return this;\n    }\n\n    /**\n     * 将元素集合添加到指定容器\n     * @param {HTMLElement} parentEl 要添加到父容器\n     * @return {this}\n     */\n\n  }, {\n    key: 'appendTo',\n    value: function appendTo(parentEl) {\n      $(parentEl).append(this);\n      return this;\n    }\n\n    /**\n     * DOM集合text内容读写操作\n     * @param {String} val 文本内容（如果有设置该参数则执行写操作，否则执行读操作）\n     * @return {this}\n     */\n\n  }, {\n    key: 'text',\n    value: function text(val) {\n      if (arguments.length === 0) {\n        return this[0][_textAttrName];\n      }\n      return this.each(function (el) {\n        el[_textAttrName] = val;\n      });\n    }\n\n    /**\n     * DOM集合HTML内容读写操作\n     * @param {String} html html内容（如果有设置该参数则执行写操作，否则执行读操作）\n     * @return {this}\n     */\n\n  }, {\n    key: 'html',\n    value: function html(_html) {\n      if (arguments.length === 0) {\n        return this[0].innerHTML;\n      }\n      return this.each(function (el) {\n        el.innerHTML = _html;\n      });\n    }\n\n    /**\n     * DOM集合属性读写操作\n     * @param {String} name 属性名称\n     * @param {String} val 属性值（如果有设置该参数则执行写操作，否则执行读操作）\n     * @return {this}\n     */\n\n  }, {\n    key: 'attr',\n    value: function attr(name, val) {\n      if (arguments.length === 1) {\n        return getAttr(this[0], name);\n      }\n      return this.each(function (el) {\n        return setAttr(el, name, val);\n      });\n    }\n\n    /**\n     * DOM集合dataset读写操作\n     * @param {String} key 键名\n     * @param {Any} val 键值（如果有设置该参数则执行写操作，否则执行读操作）\n     * @return {this}\n     */\n\n  }, {\n    key: 'data',\n    value: function data(key, val) {\n      if (arguments.length === 0) {\n        return this[0].dataset || {};\n      }\n      if (arguments.length === 1) {\n        return (this[0].dataset || {})[key];\n      }\n      return this.each(function (el) {\n        (el.dataset || (el.dataset = {}))[key] = val;\n      });\n    }\n\n    /**\n     * DOM集合样式读写操作\n     * @param {String} key 样式key\n     * @param {String} val 样式值（如果有设置该参数则执行写操作，否则执行读操作）\n     * @return {this}\n     */\n\n  }, {\n    key: 'css',\n    value: function css(key, val) {\n      if (arguments.length === 1 && !isObject$1(key)) {\n        return getStyle(this[0], key);\n      }\n      return this.each(function (el) {\n        return setStyle(el, key, val);\n      });\n    }\n\n    /**\n     * 为DOM集合增加className\n     * @param {String} cls 要增加的className\n     * @return {this}\n     */\n\n  }, {\n    key: 'addClass',\n    value: function addClass(cls) {\n      return this.each(function (el) {\n        return addClassName(el, cls);\n      });\n    }\n\n    /**\n     * 移除当前DOM集合的className\n     * @param {String} cls 要移除的className\n     * @return {this}\n     */\n\n  }, {\n    key: 'removeClass',\n    value: function removeClass(cls) {\n      return this.each(function (el) {\n        return removeClassName(el, cls);\n      });\n    }\n\n    /**\n     * 检查索引0的DOM是否有className\n     * @param {String} cls 要检查的className\n     * @return {this}\n     */\n\n  }, {\n    key: 'hasClass',\n    value: function hasClass(cls) {\n      return hasClassName(this[0], cls);\n    }\n\n    /**\n     * 为DOM集合添加事件监听\n     * @param {String} type 事件名称\n     * @param {Function} handler 处理函数\n     * @param {Boolean} once 是否只监听一次\n     * @param {Boolean} capture 是否在捕获阶段监听\n     * @return {this}\n     */\n\n  }, {\n    key: 'on',\n    value: function on(type, handler) {\n      var once = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var capture = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n\n      return this.each(function (el) {\n        return addEvent(el, type, handler, once, capture);\n      });\n    }\n\n    /**\n     * 为DOM集合解除事件监听\n     * @param {String} type 事件名称\n     * @param {Function} handler 处理函数\n     * @param {Boolean} once 是否只监听一次\n     * @param {Boolean} capture 是否在捕获阶段监听\n     * @return {this}\n     */\n\n  }, {\n    key: 'off',\n    value: function off(type, handler) {\n      var once = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var capture = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n\n      return this.each(function (el) {\n        return removeEvent(el, type, handler, once, capture);\n      });\n    }\n\n    /**\n     * 为DOM集合绑定事件代理\n     * @param {String} selector 目标子元素选择器\n     * @param {String} type 事件名称\n     * @param {Function} handler 处理函数\n     * @param {Boolean} capture 是否在捕获阶段监听\n     * @return {this}\n     */\n\n  }, {\n    key: 'delegate',\n    value: function delegate(selector, type, handler) {\n      var capture = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n\n      return this.each(function (el) {\n        return addDelegate(el, selector, type, handler, capture);\n      });\n    }\n\n    /**\n     * 为DOM集合解绑事件代理\n     * @param {String} selector 目标子元素选择器\n     * @param {String} type 事件名称\n     * @param {Function} handler 处理函数\n     * @param {Boolean} capture 是否在捕获阶段监听\n     * @return {this}\n     */\n\n  }, {\n    key: 'undelegate',\n    value: function undelegate(selector, type, handler) {\n      var capture = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n\n      return this.each(function (el) {\n        return removeDelegate(el, selector, type, handler, capture);\n      });\n    }\n\n    /**\n     * 从DOM树中移除\n     * @return {this}\n     */\n\n  }, {\n    key: 'remove',\n    value: function remove() {\n      return this.each(function (el) {\n        return removeEl(el);\n      });\n    }\n  }]);\n\n  return NodeWrap;\n}();\n\n/**\n * chimee-helper-log v0.1.0\n * (c) 2017 songguangyu\n * Released under MIT\n */\n\nvar Log = function () {\n  function Log() {\n    _classCallCheck(this, Log);\n  }\n\n  _createClass(Log, null, [{\n    key: 'error',\n    value: function error(tag, msg) {\n      if (!Log.ENABLE_ERROR) {\n        return;\n      }\n\n      if (!tag || Log.FORCE_GLOBAL_TAG) {\n        tag = Log.GLOBAL_TAG;\n      }\n      var str = '[' + tag + '] > ' + msg;\n\n      if (console.error) {\n        console.error(str);\n      } else if (console.warn) {\n        console.warn(str);\n      } else {\n        console.log(str);\n      }\n    }\n  }, {\n    key: 'info',\n    value: function info(tag, msg) {\n      if (!Log.ENABLE_INFO) {\n        return;\n      }\n\n      if (!tag || Log.FORCE_GLOBAL_TAG) {\n        tag = Log.GLOBAL_TAG;\n      }\n\n      var str = '[' + tag + '] > ' + msg;\n\n      if (console.info) {\n        console.info(str);\n      } else {\n        console.log(str);\n      }\n    }\n  }, {\n    key: 'warn',\n    value: function warn(tag, msg) {\n      if (!Log.ENABLE_WARN) {\n        return;\n      }\n\n      if (!tag || Log.FORCE_GLOBAL_TAG) {\n        tag = Log.GLOBAL_TAG;\n      }\n\n      var str = '[' + tag + '] > ' + msg;\n\n      if (console.warn) {\n        console.warn(str);\n      } else {\n        console.log(str);\n      }\n    }\n  }, {\n    key: 'debug',\n    value: function debug(tag, msg) {\n      if (!Log.ENABLE_DEBUG) {\n        return;\n      }\n\n      if (!tag || Log.FORCE_GLOBAL_TAG) {\n        tag = Log.GLOBAL_TAG;\n      }\n\n      var str = '[' + tag + '] > ' + msg;\n\n      if (console.debug) {\n        console.debug(str);\n      } else {\n        console.log(str);\n      }\n    }\n  }, {\n    key: 'verbose',\n    value: function verbose(tag, msg) {\n      if (!Log.ENABLE_VERBOSE) {\n        return;\n      }\n\n      if (!tag || Log.FORCE_GLOBAL_TAG) {\n        tag = Log.GLOBAL_TAG;\n      }\n\n      console.log('[' + tag + '] > ' + msg);\n    }\n  }]);\n\n  return Log;\n}();\n\nLog.GLOBAL_TAG = 'chimee';\nLog.FORCE_GLOBAL_TAG = false;\nLog.ENABLE_ERROR = true;\nLog.ENABLE_INFO = true;\nLog.ENABLE_WARN = true;\nLog.ENABLE_DEBUG = true;\nLog.ENABLE_VERBOSE = true;\n\nexports.Log = Log;\nexports.genTraversalHandler = genTraversalHandler;\nexports.deepClone = deepClone;\nexports.deepAssign = deepAssign;\nexports.camelize = camelize;\nexports.hypenate = hypenate;\nexports.bind = bind;\nexports.uuid = uuid;\nexports.S4 = S4;\nexports.rand = rand;\nexports.isVoid = isVoid;\nexports.isArray = isArray;\nexports.isFunction = isFunction;\nexports.isObject = isObject$1;\nexports.isNumber = isNumber;\nexports.isNumeric = isNumeric;\nexports.isInteger = isInteger;\nexports.isEmpty = isEmpty;\nexports.isEvent = isEvent;\nexports.isBlob = isBlob;\nexports.isFile = isFile;\nexports.isDate = isDate;\nexports.isString = isString;\nexports.isBoolean = isBoolean;\nexports.isPromise = isPromise;\nexports.isPrimitive = isPrimitive;\nexports.isUrl = isUrl;\nexports.isNode = isNode;\nexports.isElement = isElement;\nexports.isChildNode = isChildNode;\nexports.isPosterityNode = isPosterityNode;\nexports.isHTMLString = isHTMLString;\nexports.isError = isError;\nexports.inBrowser = inBrowser;\nexports.makeArray = makeArray;\nexports.transObjectAttrIntoArray = transObjectAttrIntoArray;\nexports.runRejectableQueue = runRejectableQueue;\nexports.runStoppableQueue = runStoppableQueue;\nexports.setFrozenAttr = setFrozenAttr;\nexports.setAttrGetterAndSetter = setAttrGetterAndSetter;\nexports.decodeUTF8 = decodeUTF8;\nexports.debounce = debounce;\nexports.throttle = throttle;\nexports.raf = raf;\nexports.caf = caf;\nexports.strRepeat = strRepeat;\nexports.formatTime = formatTime;\nexports.addTransMethod = addTransMethod;\nexports.appendCSS = appendCSS;\nexports.formatDate = formatDate;\nexports.getLocalStorage = getLocalStorage;\nexports.setLocalStorage = setLocalStorage;\nexports.emitEventCache = emitEventCache;\nexports.addEventCache = addEventCache;\nexports.removeEventCache = removeEventCache;\nexports.CustEvent = CustEvent;\nexports.getAttr = getAttr;\nexports.setAttr = setAttr;\nexports.addClassName = addClassName;\nexports.removeClassName = removeClassName;\nexports.hasClassName = hasClassName;\nexports.removeEvent = removeEvent;\nexports.addEvent = addEvent;\nexports.addDelegate = addDelegate;\nexports.removeDelegate = removeDelegate;\nexports.getStyle = getStyle;\nexports.setStyle = setStyle;\nexports.query = query;\nexports.removeEl = removeEl;\nexports.findParents = findParents;\nexports.$ = $;\nexports.NodeWrap = NodeWrap;\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 18 */
/***/ (function(module, exports) {

eval("module.exports = function(originalModule) {\r\n\tif(!originalModule.webpackPolyfill) {\r\n\t\tvar module = Object.create(originalModule);\r\n\t\t// module.parent = undefined by default\r\n\t\tif(!module.children) module.children = [];\r\n\t\tObject.defineProperty(module, \"loaded\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.l;\r\n\t\t\t}\r\n\t\t});\r\n\t\tObject.defineProperty(module, \"id\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.i;\r\n\t\t\t}\r\n\t\t});\r\n\t\tObject.defineProperty(module, \"exports\", {\r\n\t\t\tenumerable: true,\r\n\t\t});\r\n\t\tmodule.webpackPolyfill = 1;\r\n\t}\r\n\treturn module;\r\n};\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vaGFybW9ueS1tb2R1bGUuanM/Y2M5NiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiMTguanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG9yaWdpbmFsTW9kdWxlKSB7XHJcblx0aWYoIW9yaWdpbmFsTW9kdWxlLndlYnBhY2tQb2x5ZmlsbCkge1xyXG5cdFx0dmFyIG1vZHVsZSA9IE9iamVjdC5jcmVhdGUob3JpZ2luYWxNb2R1bGUpO1xyXG5cdFx0Ly8gbW9kdWxlLnBhcmVudCA9IHVuZGVmaW5lZCBieSBkZWZhdWx0XHJcblx0XHRpZighbW9kdWxlLmNoaWxkcmVuKSBtb2R1bGUuY2hpbGRyZW4gPSBbXTtcclxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwibG9hZGVkXCIsIHtcclxuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcclxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmw7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJpZFwiLCB7XHJcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXHJcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5pO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwiZXhwb3J0c1wiLCB7XHJcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXHJcblx0XHR9KTtcclxuXHRcdG1vZHVsZS53ZWJwYWNrUG9seWZpbGwgPSAxO1xyXG5cdH1cclxuXHRyZXR1cm4gbW9kdWxlO1xyXG59O1xyXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAod2VicGFjaykvYnVpbGRpbi9oYXJtb255LW1vZHVsZS5qc1xuLy8gbW9kdWxlIGlkID0gMThcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(4);


/***/ })
/******/ ]);